# Importa a biblioteca Tkinter para criar interfaces gr√°ficas
import tkinter as tk

# Importa componentes espec√≠ficos do Tkinter:
# - `ttk` para widgets mais modernos
# - `Toplevel` para criar janelas secund√°rias
# - `StringVar` para manipular vari√°veis de texto
#       reativas na interface
# - `messagebox` para exibir caixas de di√°logo e mensagens
# - `END` para indicar o final de uma entrada em um campo de texto
from tkinter import (
    ttk,
    Toplevel,
    StringVar,
    messagebox,
    END
)

from PIL.ImageOps import expand
from openpyxl.styles.builtins import styles, title
from pandas.core.indexes.base import str_t
from pandas.core.reshape.reshape import unstack
from reportlab.graphics.samples.excelcolors import backgroundGrey
from reportlab.lib.pdfencrypt import padding

"""
Onde encontrar mais emojis Unicode?
Se quiser encontrar mais √≠cones como esses, pode usar o seguinte site:

üîπ Emojipedia ‚Äì Para procurar emojis e copiar diretamente.
    https://emojipedia.org/
"""

# Importa `Calendar` e `DateEntry` da biblioteca `tkcalendar`
# - `Calendar` permite exibir um calend√°rio interativo
# - `DateEntry` √© um campo de entrada para selecionar datas
from tkcalendar import Calendar, DateEntry

# Importa funcionalidades da biblioteca Pillow para manipula√ß√£o de imagens
# - `Image` permite abrir, modificar e salvar imagens
# - `ImageTk` converte imagens para um formato compat√≠vel com Tkinter
from PIL import Image, ImageTk

# Importa `datetime` para manipula√ß√£o e formata√ß√£o de datas e horas
from datetime import datetime

# Importa o cliente `MongoClient` para conectar-se a um
#       banco de dados MongoDB
from pymongo import MongoClient, version_tuple

# Importa `ObjectId` para manipular identificadores √∫nicos no MongoDB
from bson import ObjectId

# Importa `pandas` para manipula√ß√£o e an√°lise de dados em DataFrames
import pandas as pd

# -------------------------------------------------------------------------
# Conex√£o MongoDB
# -------------------------------------------------------------------------

# Cria uma conex√£o com o servidor do MongoDB que est√° rodando localmente
# "mongodb://localhost:27017/" significa que estamos
#       conectando ao MongoDB na m√°quina local (localhost)
# na porta padr√£o 27017, que √© a porta padr√£o do MongoDB.
client = MongoClient("mongodb://localhost:27017/")

# Acessa o banco de dados chamado "Vagas_Estacionamento_db"
# Se esse banco de dados n√£o existir, ele ser√° criado
#       automaticamente ao inserir os primeiros dados.
db = client["Vagas_Estacionamento_db"]

# Abaixo, estamos criando refer√™ncias para cole√ß√µes (tabelas no MongoDB)
# O MongoDB organiza os dados em cole√ß√µes, que s√£o
#       semelhantes a tabelas em bancos relacionais.

# Cria ou acessa a cole√ß√£o "usuarios", onde ser√£o armazenadas
#       informa√ß√µes sobre os usu√°rios do sistema.
colecao_usuarios = db["usuarios"]

# Cria ou acessa a cole√ß√£o "clientes", onde ser√£o armazenados
#       dados dos clientes do estacionamento.
colecao_clientes = db["clientes"]

# Cria ou acessa a cole√ß√£o "veiculos", onde ser√£o
#       cadastrados os ve√≠culos dos clientes.
colecao_veiculos = db["veiculos"]

# Cria ou acessa a cole√ß√£o "blocos", que pode ser usada para
#       armazenar informa√ß√µes sobre setores ou √°reas do estacionamento.
colecao_blocos = db["blocos"]

# Cria ou acessa a cole√ß√£o "vagas", onde estar√£o registradas as
#       vagas dispon√≠veis no estacionamento.
colecao_vagas = db["vagas"]

# Cria ou acessa a cole√ß√£o "reservas", onde ser√£o armazenados os
#       registros de reservas de vagas feitas pelos clientes.
colecao_reservas = db["reservas"]



# Define a fun√ß√£o `centralizar_janela` que centraliza uma janela na tela.
# Par√¢metros:
# - `janela`: a janela que ser√° centralizada.
# - `largura`: a largura da janela desejada.
# - `altura`: a altura da janela desejada.
def centralizar_janela(janela, largura, altura):

    # Obt√©m a largura total da tela do usu√°rio.
    # `winfo_screenwidth()` retorna a largura em pixels da tela principal.
    largura_tela = janela.winfo_screenwidth()

    # Obt√©m a altura total da tela do usu√°rio.
    # `winfo_screenheight()` retorna a altura em pixels da tela principal.
    altura_tela = janela.winfo_screenheight()

    # Calcula a posi√ß√£o horizontal (x) para centralizar a janela na tela.
    # `(largura_tela - largura) // 2` desloca a janela
    #       para o centro horizontalmente.
    x = (largura_tela - largura) // 2

    # Calcula a posi√ß√£o vertical (y) para centralizar a janela na tela.
    # `(altura_tela - altura) // 2` desloca a janela
    #       para o centro verticalmente.
    y = (altura_tela - altura) // 2

    # Define a geometria da janela com a largura, altura e as
    #       coordenadas `x` e `y` calculadas.
    # O formato da string f"{largura}x{altura}+{x}+{y}"
    #       define o tamanho e a posi√ß√£o da janela.
    janela.geometry(f"{largura}x{altura}+{x}+{y}")


# -------------------------------------------------------------------------
# Tela de Login
# -------------------------------------------------------------------------

# Fun√ß√£o que cria e exibe a tela de login do sistema.
def tela_login():

    # Cria a janela principal da interface gr√°fica.
    root = tk.Tk()

    # Define o t√≠tulo da janela para "Login - Sistema de Estacionamento".
    root.title("Login - Sistema de Estacionamento")

    # Maximiza a janela automaticamente para ocupar toda a tela.
    # `zoomed` funciona como um modo de tela cheia, mas
    #       sem ocultar a barra de tarefas.
    root.state("zoomed")

    # Define a cor de fundo da janela principal.
    # "#ECEFF1" √© um tom claro de cinza-azulado para um
    #       visual moderno e agrad√°vel.
    root.configure(bg="#ECEFF1")

    # Cria um estilo para os bot√µes usando o
    #       m√≥dulo ttk (Themed Tkinter Widgets).
    estilo = ttk.Style()

    # Configura o estilo padr√£o dos bot√µes (`TButton`).
    # Define a fonte como "Arial", tamanho 12, garantindo boa legibilidade.
    # Adiciona `padding=8`, que cria um espa√ßamento
    #       interno ao redor do texto do bot√£o.
    estilo.configure("TButton", font=("Arial", 12), padding=8)

    # Cria um frame principal para centralizar os elementos da tela de login.
    # `bg="#ECEFF1"` define a cor de fundo do frame como um tom de cinza claro.
    frame_container = tk.Frame(root, bg="#ECEFF1")

    # Posiciona o frame no centro da tela.
    # `relx=0.5` define a posi√ß√£o horizontal no centro da tela.
    # `rely=0.5` define a posi√ß√£o vertical no centro da tela.
    # `anchor="center"` faz com que o ponto de refer√™ncia do frame seja o centro.
    frame_container.place(relx=0.5, rely=0.5, anchor="center")

    # Cria um r√≥tulo de t√≠tulo para a tela de login.
    # `text="üîí Acesso ao Sistema"` define o texto exibido no
    #       r√≥tulo com um √≠cone de cadeado.
    # `font=("Arial", 24, "bold")` define a fonte como Arial, tamanho 24, e negrito.
    # `foreground="#2E86C1"` define a cor do texto como azul vibrante.
    # `background="#ECEFF1"` define a cor de fundo do r√≥tulo
    #       como o mesmo tom de cinza claro do frame.
    lbl_titulo = ttk.Label(frame_container,
                           text="üîí Acesso ao Sistema",
                           font=("Arial", 24, "bold"),
                           foreground="#2E86C1",
                           background="#ECEFF1")

    # Exibe o r√≥tulo na interface.
    # `pady=10` adiciona 10 pixels de espa√ßamento vertical ao
    #       redor do r√≥tulo para separa√ß√£o visual.
    lbl_titulo.pack(pady=10)

    # Cria um frame para a caixa de login onde o usu√°rio informar√° suas credenciais.
    # `frame_container` √© o frame pai que cont√©m esse elemento.
    # `text="Informe suas credenciais"` adiciona um t√≠tulo descritivo ao frame.
    # `padding=20` adiciona um espa√ßamento interno de 20 pixels
    #       para melhor organiza√ß√£o visual.
    # `relief="ridge"` define uma borda em relevo ao redor do
    #       frame, dando um efeito de contorno.
    frame_formulario = ttk.LabelFrame(frame_container,
                                      text="Informe suas credenciais",
                                      padding=20,
                                      relief="ridge")

    # Exibe o frame na interface.
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels
    #       abaixo do frame, para melhor separa√ß√£o dos elementos.
    frame_formulario.pack(pady=10)

    # Usu√°rio
    # Cria um r√≥tulo (label) para o campo de entrada do usu√°rio.
    # `frame_formulario` √© o frame onde o r√≥tulo ser√° inserido.
    # `text="Usu√°rio:"` define o texto exibido no r√≥tulo.
    # `font=("Arial", 14)` define a fonte como Arial,
    #       tamanho 14, para melhor legibilidade.
    # `grid(row=0, column=0, padx=5, pady=5, sticky="e")`
    #       posiciona o r√≥tulo na primeira linha (row=0),
    #       primeira coluna (column=0), com espa√ßamento
    #       horizontal (padx=5) e vertical (pady=5).
    # `sticky="e"` alinha o r√≥tulo √† direita (leste) da c√©lula na grade.
    ttk.Label(frame_formulario,
              text="Usu√°rio:",
              font=("Arial", 14)).grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (Entry) para que o usu√°rio possa digitar seu nome.
    # `frame_formulario` √© o frame onde o campo de entrada ser√° inserido.
    # `width=30` define a largura do campo como 30 caracteres.
    # `font=("Arial", 14)` define a fonte do texto
    #       digitado no campo, para melhor visibilidade.
    entrada_usuario = ttk.Entry(frame_formulario, width=30, font=("Arial", 14))

    # Posiciona o campo de entrada na interface.
    # `grid(row=0, column=1, padx=5, pady=5)` o posiciona na primeira linha (row=0),
    # segunda coluna (column=1), com espa√ßamento horizontal (padx=5) e vertical (pady=5).
    entrada_usuario.grid(row=0, column=1, padx=5, pady=5)

    # Insere um nome padr√£o no campo de entrada quando a interface √© aberta.
    # `insert(0, "clevison")` adiciona o texto "clevison" na
    #       posi√ß√£o inicial (√≠ndice 0) do campo.
    entrada_usuario.insert(0, "clevison")

    # Senha
    # Cria um r√≥tulo (label) para o campo de entrada da senha.
    # `frame_formulario` √© o frame onde o r√≥tulo ser√° inserido.
    # `text="Senha:"` define o texto exibido no r√≥tulo.
    # `font=("Arial", 14)` define a fonte do texto como Arial,
    #       tamanho 14, garantindo boa legibilidade.
    # `grid(row=1, column=0, padx=5, pady=5, sticky="e")` posiciona o
    #       r√≥tulo na segunda linha (row=1),
    #       primeira coluna (column=0), com espa√ßamento
    #       horizontal (padx=5) e vertical (pady=5).
    # `sticky="e"` alinha o r√≥tulo √† direita (leste) da c√©lula na grade.
    ttk.Label(frame_formulario,
              text="Senha:",
              font=("Arial", 14)).grid(row=1, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (Entry) para que o usu√°rio possa digitar sua senha.
    # `frame_formulario` √© o frame onde o campo de entrada ser√° inserido.
    # `width=30` define a largura do campo como 30 caracteres.
    # `show="*"` oculta os caracteres digitados no campo,
    #       substituindo-os por asteriscos (*), garantindo seguran√ßa.
    # `font=("Arial", 14)` define a fonte do texto digitado no
    #       campo, mantendo a visibilidade adequada.
    entrada_senha = ttk.Entry(frame_formulario,
                              width=30,
                              show="*",
                              font=("Arial", 14))

    # Posiciona o campo de entrada da senha na interface.
    # `grid(row=1, column=1, padx=5, pady=5)` o posiciona na segunda linha (row=1),
    # segunda coluna (column=1), com espa√ßamento horizontal (padx=5) e vertical (pady=5).
    entrada_senha.grid(row=1, column=1, padx=5, pady=5)

    # Insere um valor padr√£o no campo de senha quando a interface √© aberta.
    # `insert(0, "555")` adiciona o texto "555" na
    #       posi√ß√£o inicial (√≠ndice 0) do campo.
    # OBS: Em um ambiente real, nunca se deve inserir
    #       senhas fixas por seguran√ßa.
    entrada_senha.insert(0, "555")

    # Espa√ßamento antes dos bot√µes
    # Cria um r√≥tulo vazio dentro do `frame_formulario` para
    #       adicionar espa√ßamento entre os elementos.
    # `ttk.Label(frame_formulario)` cria um r√≥tulo sem texto.
    # `grid(row=2, column=0, columnspan=2, pady=5)` posiciona o
    #       r√≥tulo na terceira linha (row=2),
    #       ocupando duas colunas (columnspan=2), e adiciona um
    #       espa√ßamento vertical de 5 pixels (pady=5).
    ttk.Label(frame_formulario).grid(row=2, column=0, columnspan=2, pady=5)

    # Cria um frame que conter√° os bot√µes da interface.
    # `tk.Frame(frame_container, bg="#ECEFF1")` define que o
    #       frame ser√° um filho do `frame_container`,
    #       e que sua cor de fundo ser√° `#ECEFF1` para manter a
    #       padroniza√ß√£o visual.
    frame_botoes = tk.Frame(frame_container, bg="#ECEFF1")

    # Exibe o `frame_botoes` na interface e adiciona um espa√ßamento vertical.
    # `pack(pady=10)` posiciona o frame abaixo dos outros elementos e
    #       adiciona 10 pixels de espa√ßamento vertical.
    frame_botoes.pack(pady=10)


    # Define a fun√ß√£o `autenticar`, respons√°vel por validar o
    #       usu√°rio e a senha inseridos.
    def autenticar():

        """
        Fun√ß√£o respons√°vel por autenticar um usu√°rio no sistema.
        Ela verifica se o usu√°rio e a senha informados existem no banco de dados
                e, em caso positivo, permite o acesso √† tela principal do sistema.
        """

        # Obt√©m o valor digitado no campo de entrada de usu√°rio.
        # `.strip()` remove espa√ßos em branco no in√≠cio e no final do texto,
        #       garantindo que n√£o haja espa√ßos indesejados.
        usuario = entrada_usuario.get().strip()

        # Obt√©m o valor digitado no campo de entrada da senha.
        # `.strip()` tamb√©m remove espa√ßos em branco desnecess√°rios, garantindo
        #       que a senha seja tratada corretamente.
        senha = entrada_senha.get().strip()

        # Verifica se os campos de usu√°rio ou senha est√£o vazios.
        # Se algum dos dois estiver vazio, exibe uma mensagem de erro e encerra a fun√ß√£o.
        if not usuario or not senha:

            # Exibe uma mensagem de erro informando que o usu√°rio e a senha s√£o obrigat√≥rios.
            # `messagebox.showerror()` cria um pop-up com t√≠tulo "Erro" e a mensagem informando o problema.
            # `parent=root` define que a janela principal (`root`) √© a respons√°vel pela mensagem exibida.
            messagebox.showerror("Erro",
                                 "Por favor, informe usu√°rio e senha!", parent=root)

            # `return` encerra a execu√ß√£o da fun√ß√£o imediatamente,
            #       impedindo que a autentica√ß√£o continue.
            return

        # Exibe no console um log da tentativa de autentica√ß√£o com os dados inseridos.
        # **Importante:** Nunca exiba a senha do usu√°rio em logs em
        #       sistemas reais, pois isso compromete a seguran√ßa.
        print(f"Tentando autenticar: Usu√°rio = {usuario}, Senha = {senha}")

        # üîπ Busca o usu√°rio no banco de dados
        # O m√©todo `find_one()` pesquisa na cole√ß√£o `colecao_usuarios` um
        #       documento onde "usuario" corresponda ao valor informado.
        usuario_encontrado = colecao_usuarios.find_one({"usuario": usuario})

        # Verifica se o usu√°rio foi encontrado no banco de dados.
        if usuario_encontrado:

            # Exibe no console os detalhes do usu√°rio encontrado no
            #       banco para fins de depura√ß√£o.
            print("Usu√°rio encontrado no banco:", usuario_encontrado)

        else:

            # Se o usu√°rio n√£o for encontrado, exibe no console uma mensagem
            #       indicando a aus√™ncia do usu√°rio no banco.
            print("Usu√°rio n√£o encontrado.")


        # Aqui, verificamos se o usu√°rio foi encontrado e se a senha informada
        #       corresponde √† senha armazenada no banco de dados.
        if usuario_encontrado and usuario_encontrado.get("senha") == senha:

            # Se as credenciais estiverem corretas, exibe uma mensagem
            #       informando que o login foi bem-sucedido.
            messagebox.showinfo("Sucesso",
                                f"Bem-vindo(a), {usuario}!", parent=root)

            # Fecha a janela de login, pois a autentica√ß√£o foi conclu√≠da com sucesso.
            root.destroy()

            # Chama a fun√ß√£o `tela_dashboard()`, que carrega a interface principal do sistema.
            # Essa fun√ß√£o deve estar definida no c√≥digo para que a transi√ß√£o ocorra corretamente.
            tela_dashboard()


        else:

            # Se a autentica√ß√£o falhar (usu√°rio n√£o encontrado ou senha incorreta),
            # exibe uma mensagem de erro informando que os dados fornecidos s√£o inv√°lidos.
            messagebox.showerror("Erro", "Usu√°rio ou senha inv√°lidos!", parent=root)


    # Define a fun√ß√£o `abrir_crud_usuarios()` para abrir a
    #       tela de gerenciamento de usu√°rios.
    def abrir_crud_usuarios():

        # Chama a fun√ß√£o `tela_usuarios_crud(None)` para abrir a
        #       interface de CRUD de usu√°rios.
        # `None` pode ser um par√¢metro opcional para inicializar a
        #       tela sem informa√ß√µes pr√©vias.
        tela_usuarios_crud(None)


    # Cria um bot√£o para realizar o login.
    # `text="‚úÖ Entrar"` define o texto do bot√£o, incluindo um
    #       √≠cone de check (‚úÖ) para melhorar a interface.
    # `command=autenticar` define que, ao clicar no bot√£o, a
    #       fun√ß√£o `autenticar()` ser√° executada.
    # `width=15` define a largura do bot√£o, garantindo que o
    #       tamanho seja consistente.
    btn_entrar = ttk.Button(frame_botoes,
                            text="‚úÖ Entrar",
                            command=autenticar, width=15)

    # Posiciona o bot√£o `btn_entrar` dentro do `frame_botoes`.
    # `row=0, column=0` define a posi√ß√£o do bot√£o na grade (linha 0, coluna 0).
    # `padx=10` adiciona um espa√ßamento horizontal de 10 pixels ao redor do bot√£o.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels ao redor do bot√£o.
    btn_entrar.grid(row=0, column=0, padx=10, pady=5)

    # Cria um bot√£o para abrir a tela de cadastro de usu√°rios.
    # `text="‚ûï Cadastrar"` define o texto do bot√£o com um √≠cone de
    #       adi√ß√£o (‚ûï) para indicar cadastro.
    # `command=abrir_crud_usuarios` define que, ao clicar no
    #       bot√£o, a fun√ß√£o `abrir_crud_usuarios()` ser√° executada.
    # `width=15` define a largura do bot√£o para manter um tamanho uniforme.
    btn_cadastrar = ttk.Button(frame_botoes,
                               text="‚ûï Cadastrar",
                               command=abrir_crud_usuarios,
                               width=15)

    # Posiciona o bot√£o `btn_cadastrar` dentro do `frame_botoes`.
    # `row=0, column=1` coloca o bot√£o na linha 0, coluna 1 (ao lado do bot√£o "Entrar").
    # `padx=10` adiciona um espa√ßamento horizontal de 10 pixels entre os bot√µes.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels abaixo do bot√£o.
    btn_cadastrar.grid(row=0, column=1, padx=10, pady=5)

    # Cria um bot√£o para fechar a aplica√ß√£o.
    # `text="üö™ Sair"` define o texto do bot√£o com um √≠cone de porta (üö™) para indicar sa√≠da.
    # `command=root.destroy` define que, ao clicar no bot√£o, a janela principal ser√° fechada.
    # `width=15` define a largura do bot√£o para manter um tamanho consistente.
    btn_sair = ttk.Button(frame_container,
                          text="üö™ Sair",
                          command=root.destroy, width=15)

    # Posiciona o bot√£o `btn_sair` dentro do `frame_container`.
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels
    #       acima e abaixo do bot√£o para melhor visualiza√ß√£o.
    btn_sair.pack(pady=10)

    # Inicia o loop principal do Tkinter para exibir a interface
    #       gr√°fica e aguardar intera√ß√µes do usu√°rio.
    root.mainloop()


# -------------------------------------------------------------------------
# Tela Principal (Dashboard)
# -------------------------------------------------------------------------

# Define a fun√ß√£o respons√°vel por criar e exibir a tela do dashboard.
# Esta fun√ß√£o inicializa a interface gr√°fica do dashboard principal.
def tela_dashboard():

    # Cria a janela principal do dashboard.
    # `tk.Tk()` inicializa a interface gr√°fica do Tkinter e
    #       gera a janela principal do dashboard.
    dash = tk.Tk()

    # Define o t√≠tulo da janela do dashboard.
    # `"Dashboard Principal"` ser√° exibido na barra de t√≠tulo da janela.
    dash.title("Dashboard Principal")

    # Configura a janela para iniciar maximizada (em tela cheia).
    # `state('zoomed')` faz com que a janela ocupe toda a tela ao ser aberta.
    dash.state('zoomed')

    # Define a cor de fundo da janela do dashboard.
    # `bg="#F5F5F5"` aplica um tom de cinza claro ao fundo da
    #       interface para um visual mais limpo e profissional.
    dash.configure(bg="#F5F5F5")

    # Cria um estilo personalizado para os bot√µes do dashboard.
    # `ttk.Style()` permite configurar estilos visuais para
    #       widgets da biblioteca Tkinter.
    estilo = ttk.Style()

    # Configura o estilo dos bot√µes do tipo `TButton` dentro do Tkinter.
    # `font=("Arial", 14)` define a fonte dos bot√µes
    #       como Arial, tamanho 14, proporcionando melhor legibilidade.
    # `padding=12` adiciona espa√ßamento interno de 12 pixels ao redor
    #       do texto dentro dos bot√µes, tornando-os mais espa√ßosos.
    estilo.configure("TButton", font=("Arial", 14), padding=12)

    # Cria um frame que servir√° como container principal
    #       dentro da janela do dashboard.
    # `bg="#F5F5F5"` define a cor de fundo como cinza claro.
    frame_container = tk.Frame(dash, bg="#F5F5F5")

    # Posiciona o frame no centro da tela.
    # `relx=0.5` define a posi√ß√£o no meio da largura da tela.
    # `rely=0.5` define a posi√ß√£o no meio da altura da tela.
    # `anchor="center"` faz com que o frame seja centralizado
    #       pelo seu pr√≥prio centro.
    frame_container.place(relx=0.5, rely=0.5, anchor="center")

    # Cria um r√≥tulo de t√≠tulo para a tela do dashboard.
    # `text="üìä DASHBOARD PRINCIPAL"` define o texto que ser√° exibido.
    # `font=("Arial", 28, "bold")` configura a fonte
    #       como Arial, tamanho 28, em negrito.
    # `foreground="#2E86C1"` define a cor do texto como azul escuro.
    # `background="#F5F5F5"` define a cor de fundo do r√≥tulo como cinza claro.
    lbl_title = ttk.Label(frame_container,
                          text="üìä DASHBOARD PRINCIPAL",
                          font=("Arial", 28, "bold"),
                          foreground="#2E86C1",
                          background="#F5F5F5")

    # Exibe o r√≥tulo na interface gr√°fica.
    # `pady=10` adiciona 10 pixels de espa√ßamento
    #       vertical acima e abaixo do r√≥tulo.
    lbl_title.pack(pady=10)

    # Cria um frame para organizar os bot√µes do dashboard.
    # `bg="#F5F5F5"` define a cor de fundo como cinza claro.
    frame_botoes = tk.Frame(frame_container, bg="#F5F5F5")

    # Exibe o frame que cont√©m os bot√µes na interface.
    # `pady=20` adiciona 20 pixels de espa√ßamento
    #       vertical abaixo do r√≥tulo.
    frame_botoes.pack(pady=20)

    # Define a fun√ß√£o para abrir a tela de CRUD de usu√°rios.
    # `tela_usuarios_crud(dash)` chama a fun√ß√£o correspondente e
    #       passa a janela do dashboard como par√¢metro.
    def abrir_crud_usuarios():
        tela_usuarios_crud(dash)


    # Define a fun√ß√£o para abrir a tela de CRUD de clientes.
    # `tela_clientes_crud(dash)` chama a fun√ß√£o correspondente e
    #       passa a janela do dashboard como par√¢metro.
    def abrir_crud_clientes():
        tela_clientes_crud(dash)

    # Define a fun√ß√£o para abrir a tela de CRUD de ve√≠culos.
    # `tela_veiculos_crud(dash)` chama a fun√ß√£o correspondente e
    #       passa a janela do dashboard como par√¢metro.
    def abrir_crud_veiculos():
        tela_veiculos_crud(dash)

    # Define a fun√ß√£o para abrir a tela de CRUD de blocos.
    # `tela_blocos_crud(dash)` chama a fun√ß√£o correspondente e
    #       passa a janela do dashboard como par√¢metro.
    def abrir_crud_blocos():
        tela_blocos_crud(dash)

    # Define a fun√ß√£o para abrir o mapa de reservas.
    # `tela_mapa_reservas(dash)` chama a fun√ß√£o correspondente e
    #       passa a janela do dashboard como par√¢metro.
    def abrir_mapa():
        tela_mapa_reservas(dash)

    # Define a fun√ß√£o para abrir a tela de relat√≥rios.
    # `tela_relatorio(dash)` chama a fun√ß√£o correspondente e
    #       passa a janela do dashboard como par√¢metro.
    def abrir_rel():
        tela_relatorio(dash)


    # Define uma lista contendo os bot√µes do dashboard.
    # Cada tupla cont√©m um √≠cone com texto e a fun√ß√£o
    #       correspondente ao bot√£o.
    botoes = [
        ("üë§ Usu√°rios", abrir_crud_usuarios),  # Bot√£o para abrir a tela de gerenciamento de usu√°rios.
        ("üë• Clientes", abrir_crud_clientes),  # Bot√£o para abrir a tela de gerenciamento de clientes.
        ("üöó Ve√≠culos", abrir_crud_veiculos),  # Bot√£o para abrir a tela de gerenciamento de ve√≠culos.
        ("üè¢ Blocos", abrir_crud_blocos),  # Bot√£o para abrir a tela de gerenciamento de blocos.
        ("üó∫Ô∏è Mapa Reservas", abrir_mapa),  # Bot√£o para abrir a tela de mapa de reservas.
        ("üìë Relat√≥rio", abrir_rel)  # Bot√£o para abrir a tela de relat√≥rios do sistema.
    ]

    # Percorre a lista de bot√µes para cri√°-los dinamicamente.
    # `enumerate(botoes)` gera um √≠ndice `i` e os
    #       valores `texto` e `comando` de cada bot√£o.
    for i, (texto, comando) in enumerate(botoes):

        # Cria um bot√£o `ttk.Button` dentro do `frame_botoes`.
        # `text=texto` define o texto do bot√£o, incluindo um √≠cone e a descri√ß√£o.
        # `style="TButton"` aplica o estilo personalizado configurado anteriormente.
        # `command=comando` associa a fun√ß√£o correta que
        #       ser√° executada ao clicar no bot√£o.
        # `width=20` define a largura do bot√£o para
        #       garantir um tamanho uniforme.
        btn = ttk.Button(frame_botoes,
                         text=texto,
                         style="TButton",
                         command=comando,
                         width=20)

        # Posiciona o bot√£o na grade (`grid`) dentro do `frame_botoes`.
        # `row=i // 2` organiza os bot√µes em linhas, distribuindo-os de 2 em 2.
        # `column=i % 2` organiza os bot√µes em colunas alternadas.
        # `padx=15` adiciona espa√ßamento horizontal entre os bot√µes.
        # `pady=15` adiciona espa√ßamento vertical entre os bot√µes.
        btn.grid(row=i // 2, column=i % 2, padx=15, pady=15)

    # Cria um bot√£o para sair do sistema.
    # `text="üö™ Sair"` define o texto exibido no bot√£o,
    #       incluindo um √≠cone de porta de sa√≠da.
    # `command=dash.destroy` associa a a√ß√£o de fechar a
    #       janela ao clicar no bot√£o.
    # `width=20` define a largura do bot√£o para manter o
    #       alinhamento com os demais.
    btn_sair = ttk.Button(frame_container,
                          text="üö™ Sair",
                          command=dash.destroy, width=20)

    # Posiciona o bot√£o no layout usando `pack()`.
    # `pady=20` adiciona um espa√ßamento vertical de 20 pixels
    #       para afastar o bot√£o dos demais elementos.
    btn_sair.pack(pady=20)

    # Inicia o loop principal da interface gr√°fica.
    # `mainloop()` mant√©m a janela aberta e responde a
    #       intera√ß√µes do usu√°rio.
    dash.mainloop()



# -------------------------------------------------------------------------
# Tela de Relat√≥rio (Treeview + Filtros)
# -------------------------------------------------------------------------

# Cria a fun√ß√£o `tela_relatorio` para exibir um relat√≥rio completo.
# `parent` representa a janela principal que chama essa fun√ß√£o.
def tela_relatorio(parent):

    # Cria uma nova janela `Toplevel`, que √© uma janela
    #       secund√°ria sobre a principal.
    janela = Toplevel(parent)

    # Define o t√≠tulo da janela como "Relat√≥rio Completo".
    janela.title("Relat√≥rio Completo")

    # Configura a janela para abrir no modo maximizado (tela cheia).
    janela.state("zoomed")

    # Aplica um estilo personalizado √† janela, conforme
    #       definido em `criar_estilo_geral`.
    criar_estilo_geral(janela)

    # Cria um frame principal dentro da janela para
    #       organizar os elementos visuais.
    frame_main = ttk.Frame(janela)

    # O `pack` posiciona o frame na tela, expandindo-o para
    #       preencher o espa√ßo dispon√≠vel.
    # `fill="both"` permite que ele cres√ßa tanto na horizontal quanto na vertical.
    # `expand=True` faz com que o frame ocupe todo o espa√ßo poss√≠vel.
    # `padx=10, pady=10` adiciona um espa√ßamento de 10 pixels em todas as dire√ß√µes.
    frame_main.pack(fill="both", expand=True, padx=10, pady=10)

    # Cria um r√≥tulo (`Label`) para exibir o t√≠tulo do relat√≥rio.
    lbl_title = ttk.Label(frame_main,  # Define que o r√≥tulo pertence ao `frame_main`.
                          text="Relat√≥rio Geral de Reservas",  # Texto que ser√° exibido no r√≥tulo.
                          font=("Arial", 18, "bold"),  # Define a fonte como Arial, tamanho 18 e em negrito.
                          foreground="#3F51B5")  # Define a cor do texto como um tom de azul escuro.

    # Posiciona o r√≥tulo na tela com um espa√ßamento
    #       vertical de 10 pixels (`pady=10`).
    lbl_title.pack(pady=10)

    # Filtros
    # Cria um frame para os filtros do relat√≥rio.
    # Esse frame ser√° respons√°vel por agrupar os campos de entrada do usu√°rio.
    frame_filtro = ttk.Frame(frame_main)

    # Adiciona um espa√ßamento vertical de 5 pixels.
    frame_filtro.pack(pady=5)

    # Cria um r√≥tulo para indicar o campo de filtro pelo CPF do cliente.
    # `text="Cliente (CPF):"` define o texto que ser√° exibido no r√≥tulo.
    # O r√≥tulo ser√° posicionado na primeira linha (row=0) e primeira coluna (column=0).
    # `padx=5, pady=5` adiciona espa√ßamento horizontal e vertical para melhor disposi√ß√£o.
    # `sticky="e"` alinha o r√≥tulo √† direita dentro da c√©lula.
    ttk.Label(frame_filtro,
              text="Cliente (CPF):").grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada para o CPF do cliente.
    # `width=15` define a largura do campo como 15 caracteres,
    #       proporcionando um espa√ßo adequado para inserir o CPF.
    # O campo de entrada ser√° utilizado para filtrar os dados de
    #       reservas de um cliente espec√≠fico, baseado no CPF.
    # `grid(row=0, column=1)` posiciona o campo de entrada na
    #       primeira linha (linha 0) e segunda coluna (coluna 1).
    # `padx=5` e `pady=5` adicionam espa√ßamento horizontal e vertical
    #       para que o campo de entrada tenha um visual mais organizado e espa√ßado.
    entry_cpf = ttk.Entry(frame_filtro, width=15)
    entry_cpf.grid(row=0, column=1, padx=5, pady=5)

    # Cria um r√≥tulo (label) para indicar o campo de filtro pela placa do ve√≠culo.
    # `text="Ve√≠culo (Placa):"` define o texto que ser√° exibido no
    #       r√≥tulo. O texto informa ao usu√°rio qual campo preencher.
    # O r√≥tulo √© posicionado na primeira linha (row=0) e terceira
    #       coluna (column=2) da grade (grid).
    # `padx=5` e `pady=5` adicionam espa√ßamento horizontal e vertical ao
    #       redor do r√≥tulo, para que ele n√£o fique encostado nas bordas.
    # `sticky="e"` alinha o texto do r√≥tulo √† direita, o que √©
    #       comum para r√≥tulos em campos de formul√°rio.
    ttk.Label(frame_filtro,
              text="Ve√≠culo (Placa):").grid(row=0, column=2, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada para a placa do ve√≠culo.
    # `width=15` define a largura do campo de entrada como 15
    #       caracteres, suficiente para a placa do ve√≠culo.
    # Este campo ser√° usado para filtrar as reservas de um
    #       ve√≠culo espec√≠fico, baseado na placa.
    # `grid(row=0, column=3)` posiciona o campo na primeira linha (linha 0) e
    #       quarta coluna (coluna 3) da grade (grid).
    # `padx=5` e `pady=5` adicionam espa√ßamento horizontal e vertical ao
    #       redor do campo de entrada, para um layout mais organizado.
    entry_placa = ttk.Entry(frame_filtro, width=15)
    entry_placa.grid(row=0, column=3, padx=5, pady=5)

    # Cria um r√≥tulo (label) para indicar o campo de filtro pelo bloco.
    # `text="Bloco:"` define o texto exibido no r√≥tulo, que
    #       orienta o usu√°rio a inserir o nome do bloco.
    # O r√≥tulo √© posicionado na primeira linha (row=0) e quinta coluna (column=4) da grade.
    # `padx=5` e `pady=5` adicionam espa√ßamento ao redor do r√≥tulo.
    # `sticky="e"` alinha o texto √† direita, o que √© comum para r√≥tulos de campos de formul√°rio.
    ttk.Label(frame_filtro,
              text="Bloco:").grid(row=0, column=4, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada para o nome do bloco.
    # `width=10` define a largura do campo de entrada como 10
    #       caracteres, o suficiente para um nome de bloco curto.
    # Este campo ser√° usado para filtrar as reservas de um bloco espec√≠fico.
    # `grid(row=0, column=5)` posiciona o campo na primeira linha (linha 0) e
    #       sexta coluna (coluna 5) da grade (grid).
    # `padx=5` e `pady=5` adicionam espa√ßamento horizontal e vertical ao redor do
    #       campo de entrada, criando um layout mais espa√ßado e organizado.
    entry_bloco = ttk.Entry(frame_filtro, width=10)
    entry_bloco.grid(row=0, column=5, padx=5, pady=5)

    # Cria um r√≥tulo (label) para indicar o campo de filtro pelo status.
    # `text="Status:"` define o texto exibido no r√≥tulo, orientando o
    #       usu√°rio a inserir o status da reserva.
    # O r√≥tulo √© posicionado na primeira linha (row=0) e s√©tima coluna (column=6) da grade.
    # `padx=5` e `pady=5` adicionam espa√ßamento ao redor do r√≥tulo.
    # `sticky="e"` alinha o texto √† direita, o que √© comum para
    #       r√≥tulos de campos de formul√°rio.
    ttk.Label(frame_filtro,
              text="Status:").grid(row=0, column=6, padx=5, pady=5, sticky="e")

    # Cria uma combobox para sele√ß√£o do status da reserva.
    # `values=["","Reservado","Finalizado","Cancelado","Ocupada"]`
    #       define as op√ß√µes dispon√≠veis na combobox.
    # A primeira op√ß√£o (uma string vazia) permite limpar a sele√ß√£o e n√£o aplicar filtro de status.
    # `state="readonly"` faz com que a combobox seja apenas para sele√ß√£o e n√£o para digita√ß√£o.
    # `width=12` define a largura da combobox para acomodar as op√ß√µes.
    # `grid(row=0, column=7, padx=5, pady=5)` posiciona a combobox na
    #       primeira linha (linha 0) e oitava coluna (coluna 7) da grade.
    # `padx=5` e `pady=5` adicionam espa√ßamento horizontal e vertical ao
    #       redor da combobox, tornando o layout mais espa√ßado e organizado.
    combo_st = ttk.Combobox(frame_filtro,
                            values=["", "Reservado", "Finalizado", "Cancelado", "Ocupada"],
                            state="readonly",
                            width=12)
    combo_st.grid(row=0, column=7, padx=5, pady=5)

    # Define a op√ß√£o inicial da combobox como vazia (nenhum status selecionado).
    # Isso pode ser √∫til para permitir que o usu√°rio inicie sem filtro.
    combo_st.set("")

    # Data In√≠cio e Data Fim usando DateEntry
    # Cria um r√≥tulo (label) para indicar o campo de entrada da data de in√≠cio.
    # `text="Data In√≠cio:"` define o texto exibido no r√≥tulo.
    # `grid(row=1, column=0, padx=5, pady=5, sticky="e")`
    #       posiciona o r√≥tulo na linha 1, coluna 0.
    # `padx=5` e `pady=5` adicionam espa√ßamento ao redor do r√≥tulo.
    # `sticky="e"` alinha o r√≥tulo √† direita da c√©lula na grade.
    ttk.Label(frame_filtro,
              text="Data In√≠cio:").grid(row=1, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada de data para o usu√°rio selecionar a data de in√≠cio.
    # `DateEntry(frame_filtro, date_pattern="dd/MM/yyyy", width=12)` cria o campo com
    #       formato de data brasileiro (dia/m√™s/ano).
    # `width=12` define a largura do campo de entrada.
    # `grid(row=1, column=1, padx=5, pady=5)` posiciona o campo na
    #       linha 1, coluna 1, ao lado do r√≥tulo.
    date_ini = DateEntry(frame_filtro, date_pattern="dd/MM/yyyy", width=12)
    date_ini.grid(row=1, column=1, padx=5, pady=5)

    # Cria um r√≥tulo (label) para indicar o campo de entrada da data de fim.
    # `text="Data Fim:"` define o texto exibido no r√≥tulo.
    # `grid(row=1, column=2, padx=5, pady=5, sticky="e")` posiciona o
    #       r√≥tulo na linha 1, coluna 2.
    # `padx=5` e `pady=5` adicionam espa√ßamento ao redor do r√≥tulo.
    # `sticky="e"` alinha o r√≥tulo √† direita da c√©lula na grade.
    ttk.Label(frame_filtro,
              text="Data Fim:").grid(row=1, column=2, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada de data para o usu√°rio selecionar a data de fim.
    # `DateEntry(frame_filtro, date_pattern="dd/MM/yyyy", width=12)` cria o campo
    #       com formato de data brasileiro (dia/m√™s/ano).
    # `width=12` define a largura do campo de entrada.
    # `grid(row=1, column=3, padx=5, pady=5)` posiciona o campo na
    #       linha 1, coluna 3, ao lado do r√≥tulo.
    date_fim = DateEntry(frame_filtro, date_pattern="dd/MM/yyyy", width=12)

    # Posiciona o campo de entrada de data de fim na interface.
    # `row=1, column=3` define a posi√ß√£o do campo na grade.
    # `padx=5, pady=5` adicionam espa√ßamento ao redor do campo.
    date_fim.grid(row=1, column=3, padx=5, pady=5)

    # Treeview
    # Cria um frame (container) para a Tabela de Visualiza√ß√£o (Treeview).
    # `ttk.Frame(frame_main)` cria um novo frame dentro do frame principal.
    frame_tv = ttk.Frame(frame_main)

    # Posiciona o frame na interface.
    # `fill="both"` permite que o frame expanda tanto na horizontal quanto na vertical.
    # `expand=True` garante que o frame ocupe todo o espa√ßo dispon√≠vel.
    frame_tv.pack(fill="both", expand=True)

    # Define as colunas da tabela de visualiza√ß√£o (Treeview).
    # Cada elemento da tupla representa um nome de coluna que ser√° exibido na tabela.
    colunas = (
        "id",  # Identificador √∫nico da reserva.
        "cliente_cpf",  # CPF do cliente associado √† reserva.
        "cliente_nome",  # Nome do cliente que realizou a reserva.
        "veiculo_placa",  # Placa do ve√≠culo cadastrado na reserva.
        "veiculo_modelo",  # Modelo do ve√≠culo cadastrado na reserva.
        "data_entrada",  # Data em que a reserva come√ßou.
        "hora_entrada",  # Hora exata de entrada do ve√≠culo.
        "data_saida",  # Data em que a reserva foi finalizada.
        "hora_saida",  # Hora exata de sa√≠da do ve√≠culo.
        "bloco",  # Bloco onde a vaga reservada est√° localizada.
        "numero_vaga",  # N√∫mero da vaga reservada.
        "status",  # Status da reserva (ex.: "Reservado", "Finalizado", "Cancelado").
        "valor_total"  # Valor total cobrado pela reserva.
    )

    # Cria a Tabela de Visualiza√ß√£o (Treeview).
    # `columns=colunas` define as colunas da tabela com base na
    #       tupla de colunas previamente criada.
    # `show="headings"` faz com que apenas os cabe√ßalhos das colunas
    #       sejam exibidos, sem uma coluna extra √† esquerda.
    # `height=20` define a altura da tabela, ou seja, quantas linhas
    #       ser√£o exibidas por vez.
    tv = ttk.Treeview(frame_tv, columns=colunas, show="headings", height=20)

    # Posiciona a tabela na interface gr√°fica.
    # `fill="both"` permite que a tabela expanda tanto na horizontal
    #       quanto na vertical, ocupando todo o espa√ßo dispon√≠vel.
    # `expand=True` faz com que a tabela cres√ßa conforme o espa√ßo da interface.
    tv.pack(fill="both", expand=True)

    # Loop para configurar cada coluna definida na tabela.
    for c in colunas:

        # Define o nome do cabe√ßalho da coluna.
        # `tv.heading(c, text=c.capitalize())` ajusta o texto do cabe√ßalho da coluna.
        # `c.capitalize()` coloca a primeira letra em mai√∫scula para melhor apresenta√ß√£o.
        tv.heading(c, text=c.capitalize())

        # Define a largura padr√£o de cada coluna para 100 pixels.
        # `tv.column(c, width=100)` ajusta a largura inicial da coluna.
        tv.column(c, width=100)

    # Define uma largura menor para a coluna "id", pois cont√©m menos caracteres.
    # `tv.column("id", width=50)` ajusta a largura da coluna "id"
    #       para 50 pixels, economizando espa√ßo.
    tv.column("id", width=50)



    # Define a fun√ß√£o `filtrar()` para aplicar filtros e atualizar os dados na tabela.
    def filtrar():

        # Remove todas as linhas atualmente exibidas na tabela antes
        #       de carregar os novos dados.
        # `tv.delete(*tv.get_children())` remove todos os itens da
        #       Treeview antes de inserir os filtrados.
        tv.delete(*tv.get_children())

        # Obt√©m os valores digitados nos campos de filtro pelo usu√°rio.
        # `entry_cpf.get().strip()` captura e remove espa√ßos extras no in√≠cio e fim.
        cpf_ = entry_cpf.get().strip()

        # Converte a placa para mai√∫sculas para padroniza√ß√£o.
        # `entry_placa.get().strip().upper()` garante que a placa
        #       seja pesquisada corretamente.
        plac_ = entry_placa.get().strip().upper()

        # Captura o nome do bloco digitado pelo usu√°rio.
        blo_ = entry_bloco.get().strip()

        # Obt√©m o status selecionado no combobox.
        # `combo_st.get().strip()` remove espa√ßos extras do status selecionado.
        st_ = combo_st.get().strip()

        # Obt√©m as datas selecionadas nos campos `DateEntry`.
        # `date_ini.get_date()` e `date_fim.get_date()` retornam
        #       valores no formato `datetime.date`.
        di_ = date_ini.get_date()
        df_ = date_fim.get_date()

        # Se o usu√°rio n√£o alterar as datas, o DateEntry
        #       automaticamente define o dia atual.
        # Convertendo as datas para string no formato `dd/mm/yyyy`.
        di_str = di_.strftime("%d/%m/%Y") if di_ else ""
        df_str = df_.strftime("%d/%m/%Y") if df_ else ""

        # Inicializa um dicion√°rio `query` vazio que ser√°
        #       preenchido com os filtros escolhidos.
        query = {}

        # Verifica se o campo CPF foi preenchido pelo usu√°rio.
        # Se `cpf_` n√£o estiver vazio, adiciona um filtro na query.
        # `"cliente_cpf": cpf_` filtra apenas reservas do cliente com esse CPF.
        if cpf_:
            query["cliente_cpf"] = cpf_

        # Verifica se o campo Placa foi preenchido.
        # Se `plac_` n√£o estiver vazio, adiciona um filtro na query.
        # `"veiculo_placa": plac_` filtra apenas reservas do ve√≠culo com essa placa.
        if plac_:
            query["veiculo_placa"] = plac_

        # Verifica se o campo Bloco foi preenchido.
        # Se `blo_` n√£o estiver vazio, adiciona um filtro na query.
        # `"bloco": blo_` filtra apenas reservas do bloco espec√≠fico.
        if blo_:
            query["bloco"] = blo_

        # Verifica se o campo Status foi preenchido.
        # Se `st_` n√£o estiver vazio, adiciona um filtro na query.
        # `"status": st_` filtra apenas reservas com esse status.
        if st_:
            query["status"] = st_

        # Executa a busca na cole√ß√£o `colecao_reservas` com os filtros aplicados.
        # `list(colecao_reservas.find(query))` retorna todos os
        #       documentos que correspondem aos filtros.
        docs = list(colecao_reservas.find(query))

        # Inicializa a lista `results` para armazenar os registros
        #       finais ap√≥s a filtragem por data.
        results = []

        # Percorre todos os documentos retornados da
        #       consulta `colecao_reservas.find(query)`.
        for r in docs:

            # Obt√©m a data de entrada da reserva do dicion√°rio `r`.
            # Se a chave "data_entrada" n√£o existir, retorna uma string vazia `""`.
            dtent = r.get("data_entrada", "")

            try:

                # Tenta converter a string da data de entrada (`dtent`)
                #       para um objeto `datetime`.
                # O formato esperado √© `"%d/%m/%Y"` (exemplo: "25/02/2024").
                dtobj = datetime.strptime(dtent, "%d/%m/%Y")

                # Extrai apenas a parte da data (sem hor√°rio) para
                #       compara√ß√µes futuras.
                dtdate = dtobj.date()

            except:

                # Se ocorrer um erro na convers√£o (formato inv√°lido ou string vazia),
                # define `dtobj` e `dtdate` como `None` para evitar
                #       falhas nas compara√ß√µes.
                dtobj = None
                dtdate = None

            # Filtro data in√≠cio/fim
            # Inicializa a vari√°vel `ok` como `True`. Se alguma condi√ß√£o de
            #       filtro n√£o for atendida, ela ser√° alterada para `False`.
            ok = True

            # Se a string `di_str` (data de in√≠cio) n√£o estiver vazia,
            #       converte para `date` e filtra as datas menores.
            if di_str:

                # Converte a string `di_str` para um objeto `date` (`diobj`) no
                #       formato `"%d/%m/%Y"`.
                diobj = datetime.strptime(di_str, "%d/%m/%Y").date()

                # Se `dtdate` (data da reserva) existir e for menor que a
                #       data de in√≠cio (`diobj`), marca `ok` como `False` para excluir esse registro.
                if dtdate and dtdate < diobj:
                    ok = False

            # Se a string `df_str` (data de fim) n√£o estiver vazia, converte
            #       para `date` e filtra as datas maiores.
            if df_str:

                # Converte a string `df_str` para um objeto `date` (`dfobj`) no formato `"%d/%m/%Y"`.
                dfobj = datetime.strptime(df_str, "%d/%m/%Y").date()

                # Se `dtdate` (data da reserva) existir e for maior que a
                #       data de fim (`dfobj`), marca `ok` como `False` para excluir esse registro.
                if dtdate and dtdate > dfobj:
                    ok = False

            # Se `ok` ainda for `True`, significa que a reserva passou por todos os
            #       filtros e deve ser adicionada √† lista `results`.
            if ok:
                results.append(r)

        # Percorre cada item da lista de resultados para processar e
        #       formatar os valores antes da exibi√ß√£o.
        for d in results:

            # Obt√©m o valor total da reserva a partir do dicion√°rio.
            # `d.get("valor_total", 0)` verifica se existe o campo "valor_total".
            # Caso o campo n√£o exista, assume 0 como valor padr√£o.
            valor = d.get("valor_total", 0)

            # Verifica se o valor obtido √© um n√∫mero inteiro (int) ou
            #       de ponto flutuante (float).
            # Isso garante que o valor pode ser formatado corretamente.
            if isinstance(valor, (int, float)):

                # Formata o valor para exibi√ß√£o no formato monet√°rio brasileiro.
                # `f"{valor:,.2f}"` formata o n√∫mero com duas casas decimais e separadores de milhar.
                # `.replace(",", "X").replace(".", ",").replace("X", ".")` ajusta a formata√ß√£o
                # para seguir o padr√£o brasileiro (ponto como separador de
                #       milhar e v√≠rgula como decimal).
                valor_formatado = f"{valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

            else:

                # Caso o valor n√£o seja num√©rico, define "0,00"
                #       como valor padr√£o para exibi√ß√£o.
                valor_formatado = "0,00"

            # Insere os dados processados na Treeview (`tv`), que representa a tabela de exibi√ß√£o.
            # O comando `tv.insert("", END, values=(...))` adiciona uma
            #       nova linha ao final da tabela.
            tv.insert("", END, values=(

                # Converte o identificador √∫nico (_id) para string
                #       antes de inseri-lo na tabela.
                str(d["_id"]),

                # Obt√©m e insere o CPF do cliente associado √† reserva.
                # Se n√£o houver CPF no documento, insere uma string vazia.
                d.get("cliente_cpf", ""),

                # Obt√©m e insere o nome do cliente.
                # Se o nome n√£o existir no documento, insere uma string vazia.
                d.get("cliente_nome", ""),

                # Obt√©m e insere a placa do ve√≠culo associado √† reserva.
                # Se n√£o houver placa registrada, insere uma string vazia.
                d.get("veiculo_placa", ""),

                # Obt√©m e insere o modelo do ve√≠culo.
                # Se n√£o houver modelo no documento, insere uma string vazia.
                d.get("veiculo_modelo", ""),

                # Obt√©m e insere a data de entrada da reserva.
                # Se n√£o houver data registrada, insere uma string vazia.
                d.get("data_entrada", ""),

                # Obt√©m e insere a hora de entrada da reserva.
                # Se n√£o houver hora registrada, insere uma string vazia.
                d.get("hora_entrada", ""),

                # Obt√©m e insere a data de sa√≠da da reserva.
                # Se n√£o houver data de sa√≠da registrada, insere uma string vazia.
                d.get("data_saida", ""),

                # Obt√©m e insere a hora de sa√≠da da reserva.
                # Se n√£o houver hora de sa√≠da registrada, insere uma string vazia.
                d.get("hora_saida", ""),

                # Obt√©m e insere o bloco onde a vaga est√° localizada.
                # Se n√£o houver informa√ß√£o do bloco, insere uma string vazia.
                d.get("bloco", ""),

                # Obt√©m e insere o n√∫mero da vaga associada √† reserva.
                # Se n√£o houver n√∫mero de vaga registrado, insere uma string vazia.
                d.get("numero_vaga", ""),

                # Obt√©m e insere o status atual da reserva.
                # O status pode ser "Reservado", "Finalizado", "Cancelado" ou "Ocupada".
                # Se n√£o houver status registrado, insere uma string vazia.
                d.get("status", ""),

                # Usa a vari√°vel `valor_formatado` para inserir o
                #       valor monet√°rio corretamente formatado.
                valor_formatado

            ))


    # Define a fun√ß√£o `limpar_`, que √© respons√°vel por limpar os
    #       campos de entrada e resetar os filtros.
    def limpar_():

        # Apaga o conte√∫do do campo de entrada do CPF.
        entry_cpf.delete(0, END)

        # Apaga o conte√∫do do campo de entrada da placa do ve√≠culo.
        entry_placa.delete(0, END)

        # Apaga o conte√∫do do campo de entrada do bloco.
        entry_bloco.delete(0, END)

        # Reseta a sele√ß√£o do campo de status para um valor vazio.
        combo_st.set("")

        # Reseta os campos de sele√ß√£o de data para a data atual.
        date_ini.set_date(datetime.now())  # Define a data inicial como hoje.
        date_fim.set_date(datetime.now())  # Define a data final como hoje.

        # Remove todas as linhas da Treeview (`tv`), limpando
        #       completamente a tabela de exibi√ß√£o.
        tv.delete(*tv.get_children())


    # Define a fun√ß√£o `exportar_excel`, que exporta os dados da
    #       tabela (Treeview) para um arquivo Excel.
    def exportar_excel():

        # Cria uma lista vazia para armazenar as linhas da tabela.
        rows = []

        # Percorre todos os itens (linhas) da Treeview.
        for item_id in tv.get_children():

            # Obt√©m os valores de cada linha.
            rowvals = tv.item(item_id, "values")

            # Adiciona os valores obtidos √† lista de linhas.
            rows.append(rowvals)

        # `rows` agora cont√©m todas as linhas da tabela como uma lista de tuplas.
        # Criamos um DataFrame do Pandas usando os dados coletados.
        df = pd.DataFrame(rows, columns=colunas)

        # Exportamos o DataFrame para um arquivo Excel chamado "relatorio.xlsx".
        # O par√¢metro `index=False` garante que o Pandas n√£o
        #       inclua uma coluna de √≠ndice no Excel.
        df.to_excel("relatorio.xlsx", index=False)

        # Exibe uma mensagem de sucesso informando que o relat√≥rio foi exportado.
        # O par√¢metro `parent=janela` define que o alerta ser√°
        #       exibido dentro da janela principal.
        messagebox.showinfo("Exportado",
                            "Relat√≥rio exportado para relatorio.xlsx",
                            parent=janela)


    # Cria um container (frame) para os bot√µes dentro do frame principal.
    frame_btn = ttk.Frame(frame_main)

    # Adiciona um espa√ßo vertical (pady=5) para melhorar a
    #       disposi√ß√£o dos elementos na tela.
    frame_btn.pack(pady=5)

    # Cria um bot√£o para filtrar os dados com base nos crit√©rios de pesquisa inseridos.
    # `text="Filtrar"` define o r√≥tulo do bot√£o como "Filtrar".
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=filtrar` vincula a a√ß√£o de filtrar os dados ao pressionar o bot√£o.
    # `side="left"` posiciona o bot√£o √† esquerda dentro do frame.
    # `padx=10` adiciona um espa√ßamento horizontal de 10 pixels entre os bot√µes.
    ttk.Button(frame_btn,
               text="Filtrar",
               style="MyButton.TButton",
               command=filtrar).pack(side="left", padx=10)

    # Cria um bot√£o para limpar os campos do formul√°rio e
    #       redefinir os filtros para o estado inicial.
    # `text="Limpar"` define o r√≥tulo do bot√£o como "Limpar".
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=limpar_` vincula a a√ß√£o de limpar os campos do formul√°rio ao pressionar o bot√£o.
    # `side="left"` posiciona o bot√£o √† esquerda dentro do frame.
    # `padx=10` adiciona um espa√ßamento horizontal de 10 pixels entre os bot√µes.
    ttk.Button(frame_btn,
               text="Limpar",
               style="MyButton.TButton",
               command=limpar_).pack(side="left", padx=10)

    # Cria um bot√£o para exportar os dados filtrados para um arquivo Excel.
    # `text="Exportar Excel"` define o r√≥tulo do bot√£o como "Exportar Excel".
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=exportar_excel` vincula a a√ß√£o de exporta√ß√£o ao pressionar o bot√£o.
    # `side="left"` posiciona o bot√£o √† esquerda dentro do frame.
    # `padx=10` adiciona um espa√ßamento horizontal de 10 pixels entre os bot√µes.
    ttk.Button(frame_btn,
               text="Exportar Excel",
               style="MyButton.TButton",
               command=exportar_excel).pack(side="left", padx=10)

    # Ao abrir a tela, j√° carrega todos os dados dispon√≠veis, sem filtro aplicado.
    # A fun√ß√£o `filtrar()` √© chamada automaticamente para preencher a tabela.
    filtrar()


# -------------------------------------------------------------------------
# Fun√ß√µes Auxiliares de Layout, Conex√£o, etc.
# -------------------------------------------------------------------------
def criar_estilo_geral(janela):

    """
    Configura o estilo geral da interface gr√°fica usando `ttk.Style`.

    Esse m√©todo define as cores de fundo e a apar√™ncia dos
            widgets `ttk` (como bot√µes, r√≥tulos e entradas).
    Ele tamb√©m aplica um tema espec√≠fico para garantir uma apar√™ncia mais moderna.

    Par√¢metros:
    - janela: a inst√¢ncia principal da janela onde o estilo ser√° aplicado.
    """

    # Define a cor de fundo da janela principal.
    # `#FAFAFA` √© um tom de cinza claro, proporcionando um design mais suave.
    janela.configure(background="#FAFAFA")

    # Cria um objeto de estilo para modificar a apar√™ncia dos widgets `ttk`.
    # Esse objeto permitir√° personalizar cores, fontes e
    #       comportamentos dos componentes da interface.
    style = ttk.Style(janela)

    # Define o tema a ser utilizado na interface.
    # O tema `"clam"` √© um dos estilos dispon√≠veis no Tkinter,
    #       proporcionando um visual moderno e consistente.
    style.theme_use("clam")

    # Configura o estilo do widget `TLabel`, que √© um r√≥tulo de texto.
    # `background="#FAFAFA"` define a cor de fundo do r√≥tulo como um tom de cinza claro.
    # `foreground="#212121"` define a cor do texto como um tom escuro para contraste.
    # `font=("Arial", 12)` define a fonte usada no r√≥tulo como Arial, tamanho 12.
    style.configure("TLabel",
                    background="#FAFAFA",
                    foreground="#212121",
                    font=("Arial", 12))

    # Configura o estilo do bot√£o personalizado chamado "MyButton.TButton".
    # `background="#3F51B5"` define a cor de fundo do
    #       bot√£o como um tom de azul.
    # `foreground="#FFFFFF"` define a cor do texto do
    #       bot√£o como branco para contraste.
    # `font=("Arial", 12, "bold")` define a fonte do bot√£o
    #       como Arial, tamanho 12 e negrito.
    # `padding=6` adiciona um espa√ßamento interno de 6 pixels ao
    #       redor do texto dentro do bot√£o.
    style.configure("MyButton.TButton",
                    background="#3F51B5",
                    foreground="#FFFFFF",
                    font=("Arial", 12, "bold"),
                    padding=6)

    # Configura o mapeamento do bot√£o "MyButton.TButton" para
    #       alterar sua apar√™ncia quando o usu√°rio interage.
    # `background=[("active", "#303F9F")]` muda a cor de fundo do
    #       bot√£o para um tom mais escuro de azul
    #       quando o bot√£o est√° pressionado ou o mouse passa sobre ele.
    style.map("MyButton.TButton",
              background=[("active", "#303F9F")])



# -------------------------------------------------------------------------
# Mapa de Vagas (com Scrollbars, Calendar e filtragem por data e bloco)
# -------------------------------------------------------------------------

# Define a fun√ß√£o `tela_mapa_reservas()` que cria a
#       interface para o mapa de reservas.
# `janela_pai`: Par√¢metro que representa a janela principal da
#       aplica√ß√£o, que servir√° como parent desta janela.
def tela_mapa_reservas(janela_pai):

    # Cria uma nova janela secund√°ria dentro da janela principal.
    # `janela_pai`: Refer√™ncia √† janela principal que abrir√° esta nova janela.
    janela = tk.Toplevel(janela_pai)

    # Define o t√≠tulo da janela, exibindo um √≠cone de
    #       localiza√ß√£o seguido do texto "Mapa de Reservas".
    janela.title("üìç Mapa de Reservas")

    # Define o tamanho da janela.
    # `largura = 800`: Define a largura da janela como 800 pixels.
    # `altura = 600`: Define a altura da janela como 600 pixels.
    largura, altura = 800, 600

    # Chama a fun√ß√£o `centralizar_janela()` para posicionar a
    #       janela no centro da tela.
    # `janela`: Passa a refer√™ncia da janela que ser√° centralizada.
    # `largura, altura`: Passa os valores de largura e
    #       altura definidos anteriormente.
    centralizar_janela(janela, largura, altura)

    # Define a cor de fundo da janela como um tom claro de
    #       cinza (`#F5F5F5`), proporcionando um visual limpo e moderno.
    janela.configure(bg="#F5F5F5")

    # Cria um container principal dentro da janela para
    #       organizar os elementos da interface.
    # `tk.Frame(janela)`: Cria um frame dentro da
    #       janela principal para agrupar componentes.
    # `bg="#F5F5F5"`: Define a cor de fundo do frame
    #       como um tom claro de cinza.
    container_principal = tk.Frame(janela, bg="#F5F5F5")

    # Empacota o container dentro da janela, garantindo que
    #       ele ocupe todo o espa√ßo dispon√≠vel.
    # `expand=True`: Faz com que o container se expanda
    #       para preencher a √°rea dispon√≠vel.
    # `fill="both"`: Permite que o container seja preenchido
    #       tanto na largura quanto na altura.
    container_principal.pack(expand=True, fill="both")

    # --- T√≠tulo ---
    # Cria um r√≥tulo (label) que serve como t√≠tulo da tela do mapa de reservas.
    # `ttk.Label(container_principal)`: Cria um r√≥tulo
    #       dentro do container principal.
    # `text="üìå Mapa de Reservas de Vagas"`: Define o texto do
    #       r√≥tulo com um emoji de alfinete e a descri√ß√£o do mapa.
    # `font=("Arial", 20, "bold")`: Define a fonte do texto
    #       como Arial, tamanho 20, em negrito.
    # `foreground="#2E86C1"`: Define a cor do texto como azul escuro.
    # `background="#F5F5F5"`: Define a cor de fundo do
    #       r√≥tulo para combinar com o container.
    rotulo_titulo = ttk.Label(container_principal,
                              text="üìå Mapa de Reservas de Vagas",
                              font=("Arial", 20, "bold"),
                              foreground="#2E86C1",
                              background="#F5F5F5")

    # Posiciona o r√≥tulo dentro do container principal.
    # `pady=10`: Adiciona um espa√ßamento vertical de
    #       10 pixels acima e abaixo do r√≥tulo.
    rotulo_titulo.pack(pady=10)

    # --- Filtros ---

    # Cria um container (frame) para armazenar os
    #       filtros de busca no mapa de reservas.
    # `ttk.Frame(container_principal)`: Cria um frame
    #       dentro do container principal da janela.
    container_filtros = ttk.Frame(container_principal)

    # Posiciona o frame na interface.
    # `pady=10`: Adiciona um espa√ßamento vertical de 10 pixels
    #       entre o frame e os outros elementos.
    container_filtros.pack(pady=10)

    # Cria um r√≥tulo para identificar o campo de sele√ß√£o do bloco.
    # `text="üè¢ Bloco:"` define o texto do r√≥tulo com um √≠cone de pr√©dio e a palavra "Bloco".
    # `font=("Arial", 12)` define a fonte como Arial, tamanho 12.
    # `row=0, column=0` posiciona o r√≥tulo na primeira linha e primeira coluna do grid.
    # `padx=5, pady=5` adiciona espa√ßamento horizontal e
    #       vertical ao redor do r√≥tulo.
    # `sticky="e"` alinha o r√≥tulo √† direita dentro da c√©lula do grid.
    ttk.Label(container_filtros,
              text="üè¢ Bloco:",
              font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria uma vari√°vel do tipo StringVar para armazenar a
    #       sele√ß√£o do bloco feita pelo usu√°rio.
    # Essa vari√°vel ser√° vinculada ao combobox correspondente,
    #       permitindo armazenar e recuperar a sele√ß√£o.
    var_bloco = tk.StringVar()

    # Cria um combobox para selecionar um bloco.
    # `container_filtros` define o cont√™iner onde o combobox ser√° posicionado.
    # `textvariable=var_bloco` vincula o combobox √†
    #       vari√°vel `var_bloco`, permitindo armazenar a sele√ß√£o do usu√°rio.
    # `state="readonly"` impede que o usu√°rio digite manualmente no
    #       campo, permitindo apenas selecionar op√ß√µes predefinidas.
    # `width=20` define a largura do combobox, garantindo espa√ßo
    #       suficiente para exibir os nomes dos blocos.
    combo_bloco = ttk.Combobox(container_filtros,
                               textvariable=var_bloco,
                               state="readonly",
                               width=20)

    # Posiciona o combobox dentro do grid do cont√™iner de filtros.
    # `row=0, column=1` define a linha e a coluna onde o combobox
    #       ser√° colocado, ficando ao lado do r√≥tulo "Bloco".
    # `padx=5, pady=5` adiciona espa√ßamento horizontal e vertical ao
    #       redor do combobox para melhor organiza√ß√£o visual.
    combo_bloco.grid(row=0, column=1, padx=5, pady=5)

    # Carregar blocos dispon√≠veis
    # Obt√©m todos os documentos da cole√ß√£o `colecao_blocos`.
    # `find()` retorna um cursor com todos os documentos da cole√ß√£o.
    documentos_blocos = colecao_blocos.find()

    # Cria uma lista contendo apenas os nomes dos blocos extra√≠dos dos documentos.
    # `doc["nome"]` acessa o campo "nome" de cada documento encontrado na consulta.
    # `sorted(...)` ordena os nomes em ordem alfab√©tica para facilitar a busca pelo usu√°rio.
    lista_blocos = sorted([doc["nome"] for doc in documentos_blocos])

    # Define os valores do combobox `combo_bloco` para
    #       permitir a sele√ß√£o de blocos.
    # `["Todos"] + lista_blocos` adiciona a op√ß√£o "Todos" no
    #       in√≠cio da lista, permitindo visualizar todas as reservas.
    combo_bloco["values"] = ["Todos"] + lista_blocos

    # Define "Todos" como a op√ß√£o padr√£o selecionada no
    #       combobox ao abrir a tela.
    combo_bloco.set("Todos")

    # Cria um r√≥tulo (label) para indicar o campo de sele√ß√£o de data.
    # `text="üìÖ Data:"` define o texto do r√≥tulo, incluindo um
    #       √≠cone visual para melhor identifica√ß√£o.
    # `font=("Arial", 12)` define a fonte do texto como Arial, tamanho 12.
    # `.grid(...)` posiciona o r√≥tulo na linha 0, coluna 2 do `container_filtros`.
    # `padx=5, pady=5` adiciona um espa√ßamento horizontal e vertical de 5 pixels.
    # `sticky="e"` alinha o r√≥tulo √† direita dentro da c√©lula da grade.
    ttk.Label(container_filtros,
              text="üìÖ Data:",
              font=("Arial", 12)).grid(row=0, column=2, padx=5, pady=5, sticky="e")

    # Cria um calend√°rio para sele√ß√£o de data.
    # O calend√°rio pertence ao `container_filtros`,
    #       garantindo uma interface organizada.
    # `date_pattern="dd/MM/yyyy"` define o formato da
    #       data exibida no calend√°rio como dia/m√™s/ano.
    calendario = Calendar(container_filtros, date_pattern="dd/MM/yyyy")

    # Posiciona o calend√°rio no layout utilizando o grid.
    # `.grid(row=0, column=3)` coloca o calend√°rio na linha 0,
    #       coluna 3 do `container_filtros`.
    # `padx=5, pady=5` adiciona 5 pixels de espa√ßamento
    #       horizontal e vertical ao redor do calend√°rio.
    calendario.grid(row=0, column=3, padx=5, pady=5)

    # Define a data selecionada no calend√°rio como a data atual.
    # `datetime.now()` pega a data e hora atuais do sistema.
    # `selection_set()` aplica essa data ao calend√°rio para
    #       exibir a data atual como selecionada.
    calendario.selection_set(datetime.now())

    # Cria um container para os bot√µes dentro da interface principal.
    # O container √© um `ttk.Frame`, garantindo um layout bem organizado.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels
    #       ao redor do container de bot√µes.
    container_botoes = ttk.Frame(container_principal)
    container_botoes.pack(pady=5)


    # Define a fun√ß√£o carregar_mapa
    # Essa fun√ß√£o √© respons√°vel por carregar os dados do mapa de reservas,
    # limpando os elementos anteriores e aplicando os filtros selecionados.
    def carregar_mapa():

        # Limpa o conte√∫do anterior do mapa.
        # `winfo_children()` retorna todos os widgets filhos do frame `frame_mapa`.
        # `widget.destroy()` remove cada widget do frame,
        #       limpando a √°rea para o novo conte√∫do.
        for widget in frame_mapa.winfo_children():
            widget.destroy()

        # Pega a data selecionada no calend√°rio.
        # `calendario.get_date()` retorna a data que foi
        #       selecionada no calend√°rio,
        #       no formato especificado (dd/MM/yyyy).
        data_selecionada = calendario.get_date()

        # Pega o bloco selecionado no combobox de blocos.
        # `var_bloco.get()` retorna o valor do bloco selecionado.
        # `.strip()` remove espa√ßos extras do in√≠cio e fim da string
        #       para garantir que o valor esteja limpo.
        bloco_selecionado = var_bloco.get().strip()

        # Verifica se o valor selecionado para o bloco √© "Todos"
        # Se o valor selecionado for "Todos", a consulta ao banco de
        #       dados ir√° retornar todas as vagas
        #       que n√£o t√™m o status "Removido". Isso √© feito
        #       utilizando a condi√ß√£o `{"status": {"$ne": "Removido"}}`,
        #       onde `$ne` significa "n√£o √© igual a". Ou seja, a
        #       consulta vai excluir qualquer vaga com status "Removido".
        if bloco_selecionado == "Todos":

            # Quando "Todos" √© selecionado, busca todas as
            #       vagas com status diferente de "Removido".
            vagas = list(colecao_vagas.find({"status": {"$ne": "Removido"}}))

        else:

            # Quando um bloco espec√≠fico √© selecionado, busca
            #       todas as vagas desse bloco espec√≠fico que
            #       n√£o est√£o com o status "Removido".
            vagas = list(colecao_vagas.find({"bloco": bloco_selecionado, "status": {"$ne": "Removido"}}))

        # Ordena a lista de vagas primeiro por "bloco" e depois por "numero_vaga"
        # A fun√ß√£o `sort()` organiza a lista `vagas` de acordo com o valor do bloco e o n√∫mero da vaga.
        # A chave de ordena√ß√£o (key) √© definida por uma fun√ß√£o `lambda` que retorna uma tupla contendo:
        # - `vaga["bloco"]` para garantir que as vagas ser√£o agrupadas pelo bloco
        # - `int(vaga["numero_vaga"])` para garantir que as vagas sejam ordenadas
        #           numericamente dentro de cada bloco
        # A fun√ß√£o `int()` √© usada para garantir que o n√∫mero da
        #       vaga seja tratado como um n√∫mero inteiro para ordena√ß√£o correta.
        vagas.sort(key=lambda vaga: (vaga["bloco"], int(vaga["numero_vaga"])))

        # Define o n√∫mero de colunas por linha para a cria√ß√£o dos bot√µes
        # A vari√°vel `colunas_por_linha` determina quantos bot√µes de
        #       vaga ser√£o exibidos em cada linha do mapa.
        # Aqui, estamos especificando que queremos 6 bot√µes de vagas por linha.
        colunas_por_linha = 6

        # Inicializa as vari√°veis `linha` e `coluna` que ser√£o usadas
        #       para controlar onde cada bot√£o de vaga ser√° colocado
        # O valor inicial de `linha` √© 0, indicando que come√ßaremos na primeira linha.
        # O valor inicial de `coluna` √© 0, indicando que come√ßaremos na primeira coluna.
        linha = 0
        coluna = 0

        # Itera sobre cada vaga na lista de vagas ordenadas
        # `for vaga in vagas:` come√ßa um loop que vai percorrer
        #       todas as vagas que foram ordenadas na linha anterior
        # Cada elemento de `vagas` ser√° armazenado na vari√°vel `vaga` dentro do loop.
        for vaga in vagas:

            # Recupera o valor do campo "bloco" da vaga
            # `bloco = vaga["bloco"]` armazena o nome do bloco da
            #       vaga atual em uma vari√°vel chamada `bloco`
            # Isso √© feito para utilizar esse valor mais tarde
            #       na consulta √† base de dados.
            bloco = vaga["bloco"]

            # Recupera o n√∫mero da vaga
            # `numero_vaga = vaga["numero_vaga"]` armazena o n√∫mero da
            #       vaga atual em uma vari√°vel chamada `numero_vaga`
            # Esse n√∫mero ser√° usado na consulta para verificar se a
            #       vaga j√° est√° reservada ou ocupada.
            numero_vaga = vaga["numero_vaga"]

            # Busca se h√° uma reserva para a vaga na data selecionada
            # `colecao_reservas.find_one({...})` executa uma consulta para
            #       verificar se existe uma reserva para a vaga
            # A consulta utiliza os par√¢metros:
            # - `"bloco": bloco` para filtrar pelo bloco da vaga.
            # - `"numero_vaga": numero_vaga` para filtrar pelo n√∫mero da vaga.
            # - `"data_entrada": data_selecionada` para verificar a
            #       reserva na data selecionada.
            # - `"status": {"$in": ["Reservado", "Ocupada"]}` para
            #       garantir que a vaga esteja reservada ou ocupada.
            # Caso uma reserva seja encontrada, ela ser√° armazenada na vari√°vel `reserva`.
            reserva = colecao_reservas.find_one({

                "bloco": bloco,  # Filtro pelo bloco
                "numero_vaga": numero_vaga,  # Filtro pelo n√∫mero da vaga
                "data_entrada": data_selecionada,  # Filtro pela data de entrada
                "status": {"$in": ["Reservado", "Ocupada"]}  # Verifica se a vaga est√° reservada ou ocupada

            })

            # Verifica se foi encontrada uma reserva para a vaga
            # `if reserva:` verifica se a vari√°vel `reserva` cont√©m um
            #       valor (ou seja, se a consulta √† base de dados retornou uma reserva).
            # Caso n√£o tenha sido encontrada nenhuma reserva, `reserva`
            #       ser√° `None` e a execu√ß√£o passar√° para o bloco `else`.
            if reserva:

                # Verifica se o status da reserva √© "Ocupada"
                # `if reserva["status"] == "Ocupada":` verifica se o status da
                #       reserva retornada pela consulta √© "Ocupada".
                # Caso o status seja "Ocupada", o c√≥digo define que a vaga est√° ocupada.
                if reserva["status"] == "Ocupada":

                    # Define o status como "Ocupada"
                    # `status = "Ocupada"` armazena o status "Ocupada" para ser
                    #       usado em outras partes do c√≥digo, se necess√°rio.
                    status = "Ocupada"

                    # Cria o texto que ser√° exibido na interface com o n√∫mero do bloco e da vaga
                    # `texto = f"{bloco}-{numero_vaga}\nüü• Ocupada"` define o texto a
                    #       ser mostrado na interface,
                    # informando o bloco, o n√∫mero da vaga e o status "Ocupada", al√©m
                    #       de adicionar o emoji correspondente.
                    texto = f"{bloco}-{numero_vaga}\nüü• Ocupada"

                    # Define a cor de fundo como vermelha
                    # `cor_fundo = "#F44336"` atribui a cor vermelha (HEX: #F44336) √† vari√°vel `cor_fundo`,
                    # para indicar visualmente que a vaga est√° ocupada.
                    cor_fundo = "#F44336"  # Vermelho

                else:

                    # Caso o status seja diferente de "Ocupada", verifica se √© "Reservada"
                    # Caso o status seja "Reservada", o c√≥digo define que a vaga est√° reservada.
                    status = "Reservada"

                    # Cria o texto que ser√° exibido na interface com o
                    #       n√∫mero do bloco e da vaga
                    # `texto = f"{bloco}-{numero_vaga}\nüü° Reservada"` define o
                    #       texto a ser mostrado na interface,
                    # informando o bloco, o n√∫mero da vaga e o status "Reservada",
                    #       al√©m de adicionar o emoji correspondente.
                    texto = f"{bloco}-{numero_vaga}\nüü° Reservada"

                    # Define a cor de fundo como amarela
                    # `cor_fundo = "#FFC107"` atribui a cor
                    #       amarela (HEX: #FFC107) √† vari√°vel `cor_fundo`,
                    # para indicar visualmente que a vaga est√° reservada.
                    cor_fundo = "#FFC107"  # Amarelo

            else:

                # Caso n√£o tenha sido encontrada uma reserva, a vaga est√° livre
                # `status = "Livre"` define o status como "Livre",
                #       pois n√£o h√° reserva para a vaga.
                status = "Livre"

                # Cria o texto que ser√° exibido na interface com o
                #       n√∫mero do bloco e da vaga
                # `texto = f"{bloco}-{numero_vaga}\nüü© Livre"` define o
                #       texto a ser mostrado na interface,
                # informando o bloco, o n√∫mero da vaga e o status "Livre",
                #       al√©m de adicionar o emoji correspondente.
                texto = f"{bloco}-{numero_vaga}\nüü© Livre"

                # Define a cor de fundo como verde
                # `cor_fundo = "#4CAF50"` atribui a cor verde (HEX: #4CAF50) √†
                #       vari√°vel `cor_fundo`,
                #       para indicar visualmente que a vaga est√° livre.
                cor_fundo = "#4CAF50"  # Verde

            # Bot√£o da vaga
            # Cria um bot√£o para cada vaga no mapa
            # `botao_vaga = tk.Button(...)` cria um objeto de bot√£o para
            #       representar uma vaga no mapa.

            # `frame_mapa` √© o cont√™iner onde o bot√£o ser√° exibido.
            # `text=texto` define o texto que aparecer√° no bot√£o. O `texto` √© gerado na
            #       parte anterior do c√≥digo, dependendo do status da
            #       vaga (livre, reservada, ocupada).
            # `width=12` define a largura do bot√£o em termos de caracteres. Ajusta a
            #       largura do bot√£o para que o texto caiba de forma confort√°vel.
            # `height=3` define a altura do bot√£o, garantindo que o bot√£o tenha uma
            #       √°rea adequada para visualiza√ß√£o.
            # `bg=cor_fundo` define a cor de fundo do bot√£o. A cor de fundo (`cor_fundo`) muda
            #       dependendo do status da vaga: vermelho para ocupada, amarelo para
            #       reservada e verde para livre.
            # `fg="white"` define a cor do texto dentro do bot√£o como branca, para
            #       garantir boa visibilidade sobre o fundo colorido.
            # `font=("Arial", 10, "bold")` define a fonte do texto como Arial, com
            #       tamanho 10 e em negrito. Isso d√° um visual mais chamativo ao texto.
            # `relief="raised"` define o estilo de relevo do bot√£o, o que cria uma
            #       apar√™ncia de bot√£o "pressionado" ou "em alto", adicionando
            #       profundidade ao bot√£o.
            # `borderwidth=2` define a largura da borda do bot√£o. Um valor maior
            #       pode tornar a borda mais vis√≠vel.
            # `padx=5` e `pady=5` adicionam preenchimento dentro do bot√£o. `padx`
            #       adiciona espa√ßamento horizontal e `pady` adiciona espa√ßamento vertical,
            #       ajudando a ajustar o tamanho e a apar√™ncia do bot√£o.
            # `highlightbackground="#D1D1D1"` define a cor de fundo do bot√£o quando ele
            #       n√£o est√° em foco. Isso garante que o bot√£o tenha uma apar√™ncia
            #       consistente quando n√£o est√° ativo.
            # `activebackground="#616161"` define a cor de fundo do bot√£o quando ele √©
            #       pressionado ou ativado. Isso cria um feedback visual para o
            #       usu√°rio ao clicar no bot√£o.
            botao_vaga = tk.Button(frame_mapa,
                                   text=texto,
                                   width=12,
                                   height=3,
                                   bg=cor_fundo,
                                   fg="white",
                                   font=("Arial", 10, "bold"),
                                   relief="raised",
                                   borderwidth=2,
                                   padx=5,
                                   pady=5,
                                   highlightbackground="#D1D1D1",
                                   activebackground="#616161")

            # Define a fun√ß√£o `acao_vaga` com dois par√¢metros: `bloco_vaga` e `num_vaga`.
            # `bloco_vaga` e `num_vaga` recebem valores padr√µes (valores de `bloco` e
            #       `numero_vaga` do c√≥digo anterior) para quando a fun√ß√£o for
            #       chamada sem argumentos expl√≠citos.
            # A fun√ß√£o chama outra fun√ß√£o chamada `popup_acoes_vaga_mapa`
            #       passando os par√¢metros necess√°rios, que abre uma
            #       janela de a√ß√µes para a vaga espec√≠fica.
            def acao_vaga(bloco_vaga=bloco, num_vaga=numero_vaga):

                # Chama a fun√ß√£o popup_acoes_vaga_mapa para exibir uma tela de a√ß√µes
                #       relacionadas √† vaga espec√≠fica.
                # `janela` √© a janela principal do aplicativo, `bloco_vaga` e
                #       `num_vaga` s√£o os dados da vaga.
                # `data_selecionada` √© a data que foi escolhida pelo usu√°rio.
                # `carregar_mapa` √© uma fun√ß√£o que recarrega o mapa ap√≥s
                #       uma a√ß√£o ser realizada (como uma reserva, por exemplo).
                popup_acoes_vaga_mapa(janela, bloco_vaga, num_vaga, data_selecionada, carregar_mapa)

            # Configura o bot√£o `botao_vaga` para chamar a fun√ß√£o `acao_vaga`
            #       quando for clicado.
            # Isso faz com que o comportamento do bot√£o seja definido de acordo
            #       com a fun√ß√£o `acao_vaga` para abrir o popup de a√ß√µes para a vaga.
            botao_vaga.configure(command=acao_vaga)

            # Coloca o bot√£o na grid (tabela) na posi√ß√£o espec√≠fica, definida
            #       pelas vari√°veis `linha` e `coluna`.
            # `padx=8` e `pady=8` adicionam espa√ßamento interno ao redor do bot√£o na
            #       grid, garantindo que o bot√£o n√£o fique colado nas bordas.
            botao_vaga.grid(row=linha, column=coluna, padx=8, pady=8)

            # Incrementa a vari√°vel `coluna` em 1 para passar para a
            #       pr√≥xima coluna na grid.
            # Isso permite que os bot√µes de vagas sejam colocados em
            #       colunas sucessivas da grid.
            coluna += 1

            # Verifica se o n√∫mero de colunas j√° atingiu o limite definido
            #       em `colunas_por_linha`.
            # Se `coluna` for maior ou igual a `colunas_por_linha`, significa
            #       que a linha atual est√° cheia e √© necess√°rio passar para a pr√≥xima linha.
            # Nesse caso, `coluna` √© resetada para 0, para come√ßar uma nova linha.
            if coluna >= colunas_por_linha:

                # Reseta a coluna para 0, come√ßando a nova linha.
                coluna = 0

                # Incrementa a vari√°vel `linha` para passar para a
                #       pr√≥xima linha da grid.
                linha += 1

        # Atualiza a interface de tarefas pendentes no canvas.
        # `canvas_mapa.update_idletasks()` for√ßa a atualiza√ß√£o do
        #       canvas, aplicando quaisquer mudan√ßas ou altera√ß√µes
        #       feitas na interface.
        # Isso garante que o canvas seja atualizado para refletir
        #       corretamente a posi√ß√£o de seus elementos antes de
        #       qualquer outra opera√ß√£o.
        canvas_mapa.update_idletasks()

        # Atualiza a regi√£o de rolagem do canvas para que a √°rea
        #       de rolagem cubra todos os elementos desenhados.
        # `canvas_mapa.bbox("all")` retorna as coordenadas (caixa delimitadora) de
        #       todos os itens desenhados no canvas.
        # `canvas_mapa.configure(scrollregion=...)` ajusta a regi√£o de rolagem do
        #       canvas para cobrir a √°rea necess√°ria para exibir todos os elementos.
        canvas_mapa.configure(scrollregion=canvas_mapa.bbox("all"))


    # Bot√µes de a√ß√µes
    # Cria uma lista de tuplas, onde cada tupla cont√©m o texto e o comando do bot√£o
    # Cada tupla representa um bot√£o que ser√° exibido na interface.
    # Os bot√µes s√£o: "üìå Atualizar Mapa" com a fun√ß√£o `carregar_mapa` e
    #       "‚ùå Fechar" com a fun√ß√£o `janela.destroy`.
    botoes = [
        ("üìå Atualizar Mapa", carregar_mapa),
        ("‚ùå Fechar", janela.destroy)
    ]

    # Itera sobre cada item na lista de bot√µes (tupla), criando os
    #       bot√µes de forma din√¢mica.
    # `enumerate(botoes)` retorna o √≠ndice (i) e os valores das
    #       tuplas (texto e comando) para cada bot√£o.
    # `texto` √© o r√≥tulo a ser exibido no bot√£o e `comando` √© a
    #       fun√ß√£o a ser chamada quando o bot√£o for pressionado.
    for i, (texto, comando) in enumerate(botoes):

        # Cria o bot√£o com o texto definido pela vari√°vel `texto` e a
        #       a√ß√£o associada ao `comando`.
        # `width=18` define a largura do bot√£o em termos de n√∫mero de caracteres.
        # `command=comando` associa a fun√ß√£o que ser√° chamada ao pressionar o bot√£o.
        # `row=0, column=i` posiciona os bot√µes na linha 0, nas
        #       colunas de acordo com o √≠ndice (i).
        # `padx=10, pady=5` adiciona espa√ßamento horizontal e
        #       vertical ao redor de cada bot√£o.
        ttk.Button(container_botoes,
                   text=texto,
                   command=comando,
                   width=18).grid(row=0, column=i, padx=10, pady=5)

    # --- Mapa de Vagas ---

    # Cria um container principal para o mapa.
    # `container_mapa` √© um Frame do ttk, usado para
    #       agrupar o Canvas dentro da interface.
    # `container_principal` √© o container pai
    #       onde o mapa ser√° adicionado.
    container_mapa = ttk.Frame(container_principal)

    # Adiciona o `container_mapa` ao layout da janela.
    # `expand=True` faz com que o container ocupe
    #       todo o espa√ßo dispon√≠vel dentro de seu pai.
    # `fill="both"` faz com que o container preencha
    #       tanto horizontal quanto verticalmente.
    container_mapa.pack(expand=True, fill="both")

    # Cria um Canvas dentro do `container_mapa` para desenhar o mapa.
    # O Canvas √© um widget que permite desenhar
    #       gr√°ficos e elementos interativos.
    # O par√¢metro `background="#FAFAFA"` define a cor
    #       de fundo do Canvas como cinza claro.
    canvas_mapa = tk.Canvas(container_mapa, background="#FAFAFA")

    # Posiciona o Canvas dentro do `container_mapa`.
    # `side="left"` define que o Canvas ficar√° ancorado √† esquerda do container.
    # `fill="both"` faz o Canvas preencher toda a largura e altura do container.
    # `expand=True` permite que o Canvas se expanda para ocupar o espa√ßo restante.
    canvas_mapa.pack(side="left", fill="both", expand=True)

    # Cria uma barra de rolagem vertical (`yview`) para o Canvas.
    # `container_mapa` √© o cont√™iner onde o Canvas est√°, e a
    #       barra de rolagem ser√° posicionada √† direita.
    # `orient="vertical"` define a orienta√ß√£o da
    #       barra de rolagem como vertical.
    # `command=canvas_mapa.yview` associa a barra de rolagem √†
    #       visualiza√ß√£o vertical do Canvas, permitindo rolar o conte√∫do na dire√ß√£o Y.
    barra_rolagem_y = ttk.Scrollbar(container_mapa,
                                    orient="vertical",
                                    command=canvas_mapa.yview)

    # Posiciona a barra de rolagem vertical √† direita do `container_mapa`.
    # `side="right"` faz com que a barra de rolagem fique no
    #       lado direito do Canvas.
    # `fill="y"` faz com que a barra de rolagem preencha toda a
    #       altura do `container_mapa`, permitindo rolar o conte√∫do verticalmente.
    barra_rolagem_y.pack(side="right", fill="y")

    # Cria uma barra de rolagem horizontal (`xview`) para o Canvas.
    # `container_principal` √© o cont√™iner pai onde o Canvas est√°.
    # A barra de rolagem ser√° posicionada na parte inferior.
    # `orient="horizontal"` define a orienta√ß√£o da barra de
    #       rolagem como horizontal.
    # `command=canvas_mapa.xview` associa a barra de rolagem √†
    #       visualiza√ß√£o horizontal do Canvas, permitindo rolar o
    #       conte√∫do na dire√ß√£o X.
    barra_rolagem_x = ttk.Scrollbar(container_principal,
                                    orient="horizontal",
                                    command=canvas_mapa.xview)

    # Posiciona a barra de rolagem horizontal na parte inferior do `container_principal`.
    # `side="bottom"` faz com que a barra de rolagem fique na
    #       parte inferior do Canvas.
    # `fill="x"` faz com que a barra de rolagem preencha toda a
    # largura do `container_principal`, permitindo rolar o
    # conte√∫do horizontalmente.
    barra_rolagem_x.pack(side="bottom", fill="x")

    # Associa a funcionalidade de rolagem horizontal e vertical ao canvas_mapa.
    # `xscrollcommand=barra_rolagem_x.set` vincula a barra de rolagem
    #       horizontal (`barra_rolagem_x`) √† rolagem horizontal do canvas.
    # `yscrollcommand=barra_rolagem_y.set` vincula a barra de
    #       rolagem vertical (`barra_rolagem_y`) √† rolagem vertical do canvas.
    # Isso permite que as barras de rolagem se movam conforme o
    #       conte√∫do do canvas √© rolado e vice-versa.
    canvas_mapa.configure(xscrollcommand=barra_rolagem_x.set,
                          yscrollcommand=barra_rolagem_y.set)

    # Cria um frame dentro do canvas_mapa para adicionar o conte√∫do do mapa.
    # `ttk.Frame(canvas_mapa)` cria o frame dentro do canvas.
    # O frame ser√° usado para armazenar o conte√∫do que
    #       ser√° exibido dentro do canvas.
    frame_mapa = ttk.Frame(canvas_mapa)

    # Cria uma janela dentro do canvas que pode conter o `frame_mapa`.
    # `create_window` cria uma janela no canvas no ponto especificado
    #       por `(0, 0)`, no canto superior esquerdo.
    # `window=frame_mapa` indica que o `frame_mapa` ser√° o
    #       conte√∫do dessa janela.
    # `anchor="nw"` significa que a posi√ß√£o `(0, 0)` √© o **canto
    #       superior esquerdo** da janela dentro do canvas.
    canvas_mapa.create_window((0, 0),
                              window=frame_mapa,
                              anchor="nw")


    # Define a fun√ß√£o ajustar_tamanho_mapa, que ser√° chamada
    #       sempre que o tamanho do frame_mapa mudar.
    # A fun√ß√£o usa o evento de configura√ß√£o para
    #       atualizar o "scrollregion" do canvas_mapa,
    #       o que garante que as barras de rolagem cubram
    #       todo o conte√∫do vis√≠vel no canvas.
    def ajustar_tamanho_mapa(event):

        # Atualiza a regi√£o de rolagem do canvas_mapa para
        #       cobrir toda a √°rea do conte√∫do.
        # `canvas_mapa.bbox("all")` retorna as coordenadas de
        #       bounding box de todos os itens no canvas.
        # O `scrollregion` do canvas √© configurado para essas
        #       coordenadas para garantir que as barras de rolagem
        #       cubram todo o conte√∫do, mesmo quando o conte√∫do se expandir.
        canvas_mapa.configure(scrollregion=canvas_mapa.bbox("all"))


    # Vincula a fun√ß√£o ajustar_tamanho_mapa ao evento de
    #       configura√ß√£o (`<Configure>`) do frame_mapa.
    # O evento `<Configure>` √© disparado sempre que o
    #       frame_mapa √© redimensionado.
    # Assim, sempre que o tamanho do frame_mapa mudar, a
    #       fun√ß√£o ajustar_tamanho_mapa ser√° chamada
    #       para ajustar a regi√£o de rolagem do canvas_mapa.
    frame_mapa.bind("<Configure>", ajustar_tamanho_mapa)

    # Chama a fun√ß√£o carregar_mapa para carregar o mapa
    #       automaticamente quando a janela for aberta.
    # Isso garante que o mapa seja exibido corretamente
    #       logo que a interface for carregada.
    carregar_mapa()


# -------------------------------------------------------------------------
# Popup para mostrar A√ß√µes ao clicar na vaga
# -------------------------------------------------------------------------

# Define a fun√ß√£o `popup_acoes_vaga_mapa` que cria uma janela pop-up
#       para a√ß√µes relacionadas a uma vaga de estacionamento.
# `parent` √© a janela principal (janela que chamou esse pop-up), `bloco` √©
#       o bloco da vaga, `num_vaga` √© o n√∫mero da vaga,
# `data_sel` √© a data selecionada para a vaga e `callback_recarregar` √©
#       uma fun√ß√£o que ser√° chamada ap√≥s alguma a√ß√£o.
def popup_acoes_vaga_mapa(parent, bloco, num_vaga, data_sel, callback_recarregar):

    """
    Fun√ß√£o respons√°vel por criar e exibir um pop-up com as a√ß√µes
                dispon√≠veis para uma vaga de estacionamento.

    Par√¢metros:
    - parent (Tk): Janela principal ou pai do pop-up.
    - bloco (str): Identifica√ß√£o do bloco onde a vaga est√° localizada.
    - num_vaga (int): N√∫mero da vaga dentro do bloco.
    - data_sel (str): Data espec√≠fica para a qual a vaga est√° sendo consultada (formato "YYYY-MM-DD").
    - callback_recarregar (function): Fun√ß√£o que ser√° chamada para atualizar a interface ap√≥s alguma a√ß√£o.
    """

    # üîπ Cria√ß√£o da janela pop-up (Toplevel)
    # `Toplevel(parent)` cria uma nova janela independente, associada √† janela principal (`parent`).
    # Esse tipo de janela permite que o usu√°rio continue interagindo com a interface
    #           principal enquanto o pop-up est√° aberto.
    top = Toplevel(parent)

    # üîπ Define o t√≠tulo da janela pop-up
    # O t√≠tulo inclui o bloco e o n√∫mero da vaga para que o usu√°rio saiba exatamente
    #           qual vaga est√° sendo gerenciada.
    top.title(f"A√ß√µes - Vaga {bloco}-{num_vaga}")

    # üîπ Centraliza a janela pop-up na tela
    # A fun√ß√£o `centralizar_janela(top, 400, 300)` ajusta a posi√ß√£o do pop-up
    #           para que ele fique centralizado na tela.
    # Os valores `400, 300` representam a largura e altura da janela em pixels.
    centralizar_janela(top, 400, 300)

    # üîπ Aplica um estilo geral √† janela pop-up
    # `criar_estilo_geral(top)` define a apar√™ncia da janela, como cores, fontes e estilos visuais.
    # Isso garante que o pop-up siga o padr√£o visual do sistema.
    criar_estilo_geral(top)

    # üîπ Cria√ß√£o do frame principal dentro do pop-up
    # `ttk.Frame(top)` cria um container dentro da janela pop-up (`top`).
    # Esse frame ser√° respons√°vel por conter e organizar os
    #        elementos visuais dentro do pop-up.
    frame_main = ttk.Frame(top)

    # üîπ Posicionamento do frame principal dentro da janela pop-up
    # `.pack(fill="both", expand=True, padx=10, pady=10)`
    # - `fill="both"` permite que o frame se expanda tanto horizontal
    #        quanto verticalmente.
    # - `expand=True` faz com que o frame ocupe todo o espa√ßo
    #        dispon√≠vel dentro da janela pop-up.
    # - `padx=10, pady=10` adiciona um espa√ßamento de 10 pixels ao
    #        redor do frame para n√£o ficar colado nas bordas.
    frame_main.pack(fill="both", expand=True, padx=10, pady=10)

    # üîπ Cria√ß√£o de um r√≥tulo informativo dentro do frame principal
    # `ttk.Label(frame_main, text=f"Vaga: {bloco}-{num_vaga}\nData: {data_sel}", ...)`
    # - Exibe o texto informando qual vaga est√° sendo gerenciada e a data da consulta.
    # - O texto utiliza interpola√ß√£o (`f"..."`) para incluir
    #        dinamicamente o bloco, o n√∫mero da vaga e a data.
    lbl_info = ttk.Label(
        frame_main,  # O r√≥tulo ser√° inserido dentro do frame principal (`frame_main`).
        text=f"Vaga: {bloco}-{num_vaga}\nData: {data_sel}",  # Texto informativo exibindo os detalhes da vaga.
        font=("Arial", 14, "bold"),  # Define a fonte como Arial, tamanho 14 e em negrito (bold) para destaque.
        foreground="#3F51B5"  # Define a cor do texto como azul escuro (#3F51B5) para um design elegante.
    )

    # üîπ Exibi√ß√£o do r√≥tulo na interface
    # `.pack(pady=10)` posiciona o r√≥tulo dentro do frame com um
    #        espa√ßamento vertical de 10 pixels.
    # Isso cria um espa√ßo entre o r√≥tulo e os outros elementos da
    #        interface, melhorando a legibilidade.
    lbl_info.pack(pady=10)

    # üîπ Tentativa de convers√£o da data para o formato correto
    try:

        # O m√©todo `strptime()` do m√≥dulo `datetime` converte a string `data_sel`
        #            de um formato espec√≠fico ("YYYY-MM-DD") para um objeto de data.
        # - "%Y-%m-%d" representa o formato original da data (exemplo: "2024-03-06").
        # - `strftime("%d/%m/%Y")` converte a data para o formato brasileiro (exemplo: "06/03/2024").
        data_formatada = datetime.strptime(data_sel, "%Y-%m-%d").strftime("%d/%m/%Y")

    # üîπ Captura um erro caso a data informada n√£o esteja no formato esperado
    except ValueError:

        # Se a convers√£o falhar, mant√©m `data_formatada` com o valor original de `data_sel`.
        # Isso evita que o c√≥digo quebre caso a data j√° esteja no formato correto ou inv√°lido.
        data_formatada = data_sel

    # üîπ Buscar no banco de dados apenas as reservas para a data espec√≠fica
    # A fun√ß√£o `find_one()` do MongoDB retorna o primeiro documento que satisfaz os crit√©rios especificados.
    reserva_existente = colecao_reservas.find_one({
        "bloco": bloco,  # Filtra pelo bloco onde a vaga est√° localizada.
        "numero_vaga": num_vaga,  # Filtra pelo n√∫mero da vaga dentro do bloco.
        "data_entrada": data_formatada,  # Filtra pela data formatada corretamente.
        "status": {"$in": ["Reservado", "Ocupada"]}
        # Filtra apenas reservas que estejam em status "Reservado" ou "Ocupada".
    })

    # üîπ Se houver uma reserva para a data, define o status como "Reservado" ou "Ocupada"
    if reserva_existente:

        # Se a busca no banco de dados (`reserva_existente`) retornou um documento v√°lido,
        # significa que a vaga est√° ocupada ou reservada na data espec√≠fica.
        # O status ser√° ent√£o definido com base no campo `"status"` do documento encontrado.
        status_vaga = reserva_existente["status"]

    else:

        # Se `reserva_existente` for `None`, significa que **n√£o h√° reserva** para a data informada.
        # Nesse caso, definimos o status como `"Livre"`, indicando que a vaga pode ser utilizada.
        status_vaga = "Livre"

    # üîπ Cria√ß√£o do frame que conter√° os bot√µes de a√ß√£o
    # Esse frame (`frame_btn`) ser√° usado para posicionar bot√µes dinamicamente
    # de acordo com o status da vaga (por exemplo, um bot√£o para reservar, ver detalhes, etc.).
    frame_btn = ttk.Frame(frame_main)

    # üîπ Posicionamento do frame na interface
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels abaixo do frame.
    frame_btn.pack(pady=10)

    # üîπ Exibi√ß√£o do status da vaga na interface gr√°fica
    # Criamos um r√≥tulo (`Label`) para exibir o status atualizado da vaga.
    ttk.Label(

        # O r√≥tulo ser√° inserido dentro do `frame_main`.
        frame_main,

        # O texto exibido incluir√° o status real da vaga.
        text=f"Status: {status_vaga}",

        # Define a fonte como Arial, tamanho 12, e negrito para destacar o status.
        font=("Arial", 12, "bold")

    ).pack()

    # üîπ Se a vaga est√° reservada na data, exibir bot√£o para ver detalhes
    if status_vaga == "Reservado":

        # Define uma fun√ß√£o interna `ver_detalhes_reserva()` que ser√° chamada ao clicar no bot√£o.
        def ver_detalhes_reserva():

            # Fecha a janela atual (`top`) antes de abrir os detalhes da reserva.
            top.destroy()

            # Chama a fun√ß√£o `popup_detalhes_reserva()` para abrir um novo pop-up
            # com mais informa√ß√µes sobre a reserva selecionada.
            # - `parent`: Passa a janela principal para o novo pop-up.
            # - `reserva_existente["_id"]`: Passa o identificador √∫nico da reserva.
            # - `callback_recarregar`: Fun√ß√£o de recarregamento da interface para atualiza√ß√£o dos dados.
            popup_detalhes_reserva(parent, reserva_existente["_id"], callback_recarregar)

        # üîπ Cria√ß√£o do bot√£o "Ver Detalhes"
        # - Esse bot√£o ser√° exibido **somente se a vaga estiver reservada na data selecionada**.
        # - `frame_btn`: O bot√£o ser√° adicionado dentro do frame de bot√µes.
        # - `text="Ver Detalhes"`: Define o texto exibido no bot√£o.
        # - `style="MyButton.TButton"`: Aplica um estilo customizado ao bot√£o para manter o design padronizado.
        # - `command=ver_detalhes_reserva`: Define a fun√ß√£o a ser executada quando o bot√£o for clicado.
        # - `.pack(side="left", padx=5)`: Posiciona o bot√£o √† esquerda e adiciona um
        #           espa√ßamento horizontal de 5 pixels.
        ttk.Button(frame_btn,
                   text="Ver Detalhes",
                   style="MyButton.TButton",
                   command=ver_detalhes_reserva).pack(side="left", padx=5)

    # üîπ Se a vaga est√° livre na data, permitir reserva
    elif status_vaga == "Livre":

        # Define uma fun√ß√£o interna `reservar()` que ser√° chamada ao clicar no bot√£o.
        def reservar():

            # Chama a fun√ß√£o `popup_reservar()` para abrir um novo pop-up
            # onde o usu√°rio poder√° concluir a reserva da vaga.
            # - `top`: Passa a janela atual como refer√™ncia para o novo pop-up.
            # - `bloco`: Passa o bloco da vaga a ser reservada.
            # - `num_vaga`: Passa o n√∫mero da vaga a ser reservada.
            # - `data_sel`: Passa a data espec√≠fica para a reserva.
            # - `callback_recarregar`: Fun√ß√£o de recarregamento para atualizar os dados ap√≥s a reserva.
            popup_reservar(top, bloco, num_vaga, data_sel, callback_recarregar)

        # üîπ Cria√ß√£o do bot√£o "Reservar"
        # - Esse bot√£o ser√° exibido **somente se a vaga estiver livre na data selecionada**.
        # - `frame_btn`: O bot√£o ser√° adicionado dentro do frame de bot√µes.
        # - `text="Reservar"`: Define o texto exibido no bot√£o.
        # - `style="MyButton.TButton"`: Aplica um estilo customizado ao bot√£o para manter o design padronizado.
        # - `command=reservar`: Define a fun√ß√£o a ser executada quando o bot√£o for clicado.
        # - `.pack(side="left", padx=5)`: Posiciona o bot√£o √† esquerda e adiciona um espa√ßamento
        #           horizontal de 5 pixels.
        ttk.Button(frame_btn,
                   text="Reservar",
                   style="MyButton.TButton",
                   command=reservar).pack(side="left", padx=5)

    # üîπ Cria√ß√£o do bot√£o "Fechar"
    ttk.Button(

        # O bot√£o ser√° adicionado dentro do frame principal (`frame_main`).
        frame_main,

        # Define o texto do bot√£o como "Fechar".
        text="Fechar",

        # Aplica um estilo personalizado chamado "MyButton.TButton".
        style="MyButton.TButton",

        # Define a a√ß√£o do bot√£o: ao ser pressionado, a janela `top` ser√° fechada.
        command=top.destroy

    ).pack(pady=10)  # Adiciona um espa√ßamento vertical (10 pixels) abaixo do bot√£o.



# -------------------------------------------------------------------------
# Popup de Detalhes da Reserva (se vaga estava "Reservada")
# -------------------------------------------------------------------------

# Cria uma nova janela de pop-up para exibir os detalhes da reserva.
# Define a fun√ß√£o e recebe os par√¢metros necess√°rios.
def popup_detalhes_reserva(parent, reserva_id, callback_recarregar):

    # `Toplevel(parent)` cria uma janela filha dentro da janela principal.
    top = Toplevel(parent)

    # Define o t√≠tulo da janela.
    # `title("Detalhes da Reserva")` exibe o texto no topo da janela.
    top.title("Detalhes da Reserva")

    # Centraliza a janela na tela com tamanho definido.
    # `centralizar_janela(top, 500, 400)` ajusta a posi√ß√£o e
    #       tamanho da janela para 500x400 pixels.
    centralizar_janela(top, 500, 400)

    # Aplica o estilo visual da interface √† nova janela.
    # `criar_estilo_geral(top)` configura fontes, cores e outros estilos visuais.
    criar_estilo_geral(top)

    # Cria um cont√™iner principal dentro da janela para organizar os elementos.
    # `ttk.Frame(top)` cria um frame dentro da janela `top`.
    frame_main = ttk.Frame(top)

    # Expande o frame para preencher toda a √°rea dispon√≠vel.
    # `fill="both"` permite que o frame ocupe toda a √°rea dispon√≠vel
    #       horizontal e verticalmente.
    # `expand=True` faz com que o frame cres√ßa automaticamente
    #       conforme o tamanho da janela.
    # `padx=10, pady=10` adiciona espa√ßamento interno para
    #       melhor organiza√ß√£o dos elementos.
    frame_main.pack(fill="both", expand=True, padx=10, pady=10)

    # Busca no banco de dados o documento da reserva correspondente ao ID fornecido.
    # Retorna o documento ou `None` se n√£o encontrado.
    doc_r = colecao_reservas.find_one({"_id": ObjectId(reserva_id)})

    # Verifica se a reserva foi encontrada no banco de dados.
    if not doc_r:

        # Cria um r√≥tulo (`Label`) para exibir a mensagem de erro caso a reserva n√£o exista.
        # `text="Reserva n√£o encontrada!"` define o texto que ser√° exibido na tela.
        # `foreground="red"` define a cor do texto como vermelho para indicar um erro.
        # `pady=20` adiciona um espa√ßamento vertical para separar o r√≥tulo dos outros elementos.
        ttk.Label(frame_main,
                  text="Reserva n√£o encontrada!",
                  foreground="red").pack(pady=20)

        # Retorna imediatamente para evitar que a fun√ß√£o continue a
        #       execu√ß√£o, pois n√£o h√° dados para exibir.
        return

    # Exibe dados
    # Cria um r√≥tulo para exibir o t√≠tulo da se√ß√£o de detalhes da reserva.
    # `text="DETALHES DA RESERVA"` define o texto exibido no r√≥tulo.
    # `font=("Arial",14,"bold")` define a fonte Arial, tamanho 14, em negrito.
    # `foreground="#3F51B5"` define a cor do texto como azul escuro.
    lbl_t = ttk.Label(frame_main,
                      text="DETALHES DA RESERVA",
                      font=("Arial", 14, "bold"),
                      foreground="#3F51B5")

    # Exibe o r√≥tulo na tela.
    # `pady=10` adiciona 10 pixels de espa√ßamento vertical ao redor do r√≥tulo.
    lbl_t.pack(pady=10)

    # Monta um texto formatado com as informa√ß√µes detalhadas da reserva.
    # `f"Cliente: {doc_r.get('cliente_nome','')} (CPF: {doc_r.get('cliente_cpf','')})\n"`
    # ‚Üí Exibe o nome do cliente e seu CPF.
    # `f"Ve√≠culo: {doc_r.get('veiculo_modelo','')} (Placa: {doc_r.get('veiculo_placa','')})\n"`
    # ‚Üí Exibe o modelo do ve√≠culo e sua placa.
    # `f"Data Entrada: {doc_r.get('data_entrada','')}   Hora Entrada: {doc_r.get('hora_entrada','')}\n"`
    # ‚Üí Exibe a data e hora de entrada da reserva.
    # `f"Data Sa√≠da: {doc_r.get('data_saida','-')}   Hora Sa√≠da: {doc_r.get('hora_saida','-')}\n"`
    # ‚Üí Exibe a data e hora de sa√≠da (se houver).
    # `f"Bloco: {doc_r.get('bloco','')}   Vaga: {doc_r.get('numero_vaga','')}\n"`
    # ‚Üí Exibe o bloco e n√∫mero da vaga reservada.
    # `f"Status: {doc_r.get('status','')}"` ‚Üí Exibe o status atual da reserva.
    info_txt = (
        f"Cliente: {doc_r.get('cliente_nome', '')} (CPF: {doc_r.get('cliente_cpf', '')})\n"
        f"Ve√≠culo: {doc_r.get('veiculo_modelo', '')} (Placa: {doc_r.get('veiculo_placa', '')})\n"
        f"Data Entrada: {doc_r.get('data_entrada', '')}   Hora Entrada: {doc_r.get('hora_entrada', '')}\n"
        f"Data Sa√≠da: {doc_r.get('data_saida', '-')}   Hora Sa√≠da: {doc_r.get('hora_saida', '-')}\n"
        f"Bloco: {doc_r.get('bloco', '')}   Vaga: {doc_r.get('numero_vaga', '')}\n"
        f"Status: {doc_r.get('status', '')}"
    )

    # Cria um r√≥tulo (`Label`) para exibir as informa√ß√µes da reserva na interface.
    # `text=info_txt` ‚Üí Define o texto do r√≥tulo como a vari√°vel `info_txt`
    #       contendo os detalhes da reserva.
    # `justify="left"` ‚Üí Alinha o texto √† esquerda para facilitar a leitura.
    lbl_d = ttk.Label(frame_main, text=info_txt, justify="left")

    # Adiciona o r√≥tulo √† interface com um espa√ßamento vertical de 5 pixels.
    lbl_d.pack(pady=5)

    # Cria um container (`Frame`) para organizar os bot√µes na interface.
    frame_botoes = ttk.Frame(frame_main)

    # Adiciona o frame na interface com um espa√ßamento vertical
    #       de 20 pixels para separar dos outros elementos.
    frame_botoes.pack(pady=20)


    # Bot√£o Cancelar
    # Define a fun√ß√£o para cancelar a reserva.
    def cancelar_reserva():

        # Remove a reserva do banco de dados.
        # `delete_many({"_id": ObjectId(reserva_id)})` ‚Üí Exclui qualquer
        #       documento da cole√ß√£o `colecao_reservas` que tenha o ID correspondente.
        colecao_reservas.delete_many({"_id": ObjectId(reserva_id)})

        # Atualiza o status da vaga no banco de dados para "Livre".
        # ‚Üí Busca a vaga pelo bloco e n√∫mero da vaga e define seu status como "Livre".
        colecao_vagas.update_one({"bloco": doc_r["bloco"],
                                  "numero_vaga": doc_r["numero_vaga"]},
                                 {"$set": {"status": "Livre"}})

        # Exibe uma mensagem de confirma√ß√£o informando que a reserva foi cancelada.
        # `messagebox.showinfo("OK", "Reserva cancelada!", parent=top)`
        # ‚Üí Mostra uma caixa de di√°logo informando o sucesso da opera√ß√£o.
        messagebox.showinfo("OK", "Reserva cancelada!", parent=top)

        # Fecha a janela de detalhes da reserva ap√≥s o cancelamento.
        # `top.destroy()` ‚Üí Fecha a janela pop-up atual.
        top.destroy()

        # Chama a fun√ß√£o de recarregar o mapa de reservas para
        #       atualizar a interface com os novos dados.
        # `callback_recarregar()` ‚Üí Atualiza a interface
        #       para refletir as mudan√ßas.
        callback_recarregar()


    # Cria um bot√£o para cancelar a reserva.
    # `text="Cancelar Reserva"` define o texto exibido no bot√£o.
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=cancelar_reserva` associa a a√ß√£o de cancelar a
    #       reserva ao clicar no bot√£o.
    # `pack(side="left", padx=10)` posiciona o bot√£o no lado esquerdo do
    #       frame com espa√ßamento horizontal de 10 pixels.
    ttk.Button(frame_botoes,
               text="Cancelar Reserva",
               style="MyButton.TButton",
               command=cancelar_reserva).pack(side="left", padx=10)


    # Define a fun√ß√£o para finalizar a reserva.
    def finalizar_reserva():

        # Coment√°rio explicativo: Ao finalizar a reserva, a vaga
        #       pode ser marcada como "Ocupada" ou j√° como "Paga".
        # Isso depende do fluxo da aplica√ß√£o. Neste caso, vamos
        #       pedir a data/hora de sa√≠da para calcular o valor.

        # Fecha a janela atual antes de abrir a pr√≥xima tela
        #       para finalizar a reserva.
        top.destroy()

        # Chama a fun√ß√£o que abrir√° a tela de finaliza√ß√£o da reserva.
        # `popup_finalizar_reserva(parent, reserva_id, callback_recarregar)`:
        # - `parent`: Janela principal da aplica√ß√£o.
        # - `reserva_id`: ID da reserva que ser√° finalizada.
        # - `callback_recarregar`: Fun√ß√£o para atualizar a interface
        #       ap√≥s finalizar a reserva.
        popup_finalizar_reserva(parent, reserva_id, callback_recarregar)

    # Cria um bot√£o para finalizar a reserva, ocupando a vaga ou processando o pagamento.
    # `text="Finalizar (Ocupar/Pagar)"` define o r√≥tulo do bot√£o.
    # `style="MyButton.TButton"` aplica um estilo customizado ao bot√£o.
    # `command=finalizar_reserva` associa a fun√ß√£o `finalizar_reserva` ao
    #       bot√£o, que abre a tela de finaliza√ß√£o.
    # `.pack(side="left", padx=10)` posiciona o bot√£o √† esquerda dentro do
    #       frame e adiciona espa√ßamento lateral de 10 pixels.
    ttk.Button(frame_botoes,
               text="Finalizar (Ocupar/Pagar)",
               style="MyButton.TButton",
               command=finalizar_reserva).pack(side="left", padx=10)

    # Cria um bot√£o para fechar a janela.
    # `text="Fechar"` define o texto exibido no bot√£o.
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=top.destroy` associa a a√ß√£o de fechar a janela ao bot√£o.
    # `pady=10` adiciona 10 pixels de espa√ßamento vertical ao redor do bot√£o.
    ttk.Button(frame_main,
               text="Fechar",
               style="MyButton.TButton",
               command=top.destroy).pack(pady=10)


# -------------------------------------------------------------------------
# Popup para Finalizar Reserva - pede data/hora de sa√≠da
# -------------------------------------------------------------------------

# Define a fun√ß√£o para exibir o popup de finaliza√ß√£o de reserva.
# Essa fun√ß√£o cria uma janela para que o usu√°rio insira a
#       data e a hora de sa√≠da de uma reserva existente.
def popup_finalizar_reserva(parent, reserva_id, callback_recarregar):

    # Cria uma nova janela (subjanela) dentro da janela principal.
    # `Toplevel(parent)` indica que a janela `top`
    #       ser√° filha da janela `parent`.
    top = Toplevel(parent)

    # Define o t√≠tulo da janela de finaliza√ß√£o da reserva.
    top.title("Finalizar Reserva - Inserir Data/Hora de Sa√≠da")

    # Centraliza a janela na tela e define seu tamanho para 400x300 pixels.
    # `centralizar_janela(top, 400, 300)` garante que a
    #       janela apare√ßa centralizada.
    centralizar_janela(top, 400, 300)

    # Aplica estilos gerais √† janela para manter a identidade visual do sistema.
    # `criar_estilo_geral(top)` define cores, fontes e outros elementos gr√°ficos.
    criar_estilo_geral(top)

    # Busca no banco de dados a reserva correspondente ao ID fornecido.
    # `find_one` retorna o primeiro documento que corresponde √† consulta.
    # `ObjectId(reserva_id)` converte a string do ID para um
    #       formato adequado para consultas no MongoDB.
    doc_r = colecao_reservas.find_one({"_id": ObjectId(reserva_id)})

    # Se a reserva n√£o for encontrada, exibe uma mensagem na
    #       tela e interrompe a execu√ß√£o da fun√ß√£o.
    if not doc_r:

        # Cria um r√≥tulo (`Label`) na janela informando que a reserva n√£o foi encontrada.
        # `foreground="red"` define a cor do texto como vermelha para destacar o erro.
        ttk.Label(top, text="Reserva n√£o encontrada!", foreground="red").pack(pady=20)

        # `return` encerra a execu√ß√£o da fun√ß√£o, pois n√£o h√° dados para exibir.
        return

    # Cria um cont√™iner (`frame_main`) dentro da janela `top`
    #       para organizar os elementos da interface.
    frame_main = ttk.Frame(top)

    # Adiciona `frame_main` √† janela e o expande para
    #       preencher o espa√ßo dispon√≠vel.
    # `fill="both"` permite que o frame ocupe todo o espa√ßo
    #       dispon√≠vel horizontal e verticalmente.
    # `expand=True` faz com que o frame cres√ßa junto com a janela, se necess√°rio.
    # `padx=10, pady=10` adiciona um espa√ßamento de 10 pixels ao
    #       redor do frame para um layout mais limpo.
    frame_main.pack(fill="both", expand=True, padx=10, pady=10)

    # Cria um r√≥tulo (`Label`) dentro do `frame_main` para exibir o
    #       t√≠tulo e informa√ß√µes da reserva.
    # O r√≥tulo exibe a mensagem "Finalizar Reserva" seguida pelo
    #       bloco e n√∫mero da vaga.
    #  Insere dinamicamente os dados da reserva.
    # `font=("Arial",14,"bold")` define a fonte como Arial, tamanho 14 e
    #       negrito para destacar o texto.
    # `foreground="#3F51B5"` altera a cor do texto para um
    #       azul escuro (#3F51B5) para melhorar a visibilidade.
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels para
    #       separar o r√≥tulo dos demais elementos.
    ttk.Label(frame_main,
              text=f"Finalizar Reserva\nBloco: {doc_r['bloco']} - Vaga: {doc_r['numero_vaga']}",
              font=("Arial", 14, "bold"),
              foreground="#3F51B5").pack(pady=10)

    # Obt√©m a data de entrada da reserva, se n√£o houver valor,
    #       exibe "??/??/????" como padr√£o.
    data_entrada = doc_r.get("data_entrada", "??/??/????")

    # Obt√©m a hora de entrada da reserva, se n√£o houver
    #       valor, exibe "00:00" como padr√£o.
    hora_entrada = doc_r.get("hora_entrada", "00:00")

    # Cria um r√≥tulo (`Label`) dentro do `frame_main` para exibir a
    #       data e hora de entrada da reserva.
    # O r√≥tulo exibe a mensagem "Entrada: " seguida pela data e hora da reserva.
    # `f"Entrada: {data_entrada} {hora_entrada}"` insere dinamicamente os
    #       valores obtidos anteriormente.
    # `font=("Arial",12,"bold")` define a fonte como Arial, tamanho 12 e
    #       em negrito para destacar o texto.
    # `pady=5` adiciona um pequeno espa√ßamento vertical para melhorar a
    #       organiza√ß√£o da interface.
    ttk.Label(frame_main,
              text=f"Entrada: {data_entrada} {hora_entrada}",
              font=("Arial", 12, "bold")).pack(pady=5)

    # Cria um frame (`frame_saida`) dentro do `frame_main` para
    #       organizar os campos de sa√≠da.
    # Isso mant√©m a estrutura da interface organizada e agrupada.
    frame_saida = ttk.Frame(frame_main)
    frame_saida.pack()  # Exibe o frame na tela.

    # Chama a fun√ß√£o `criar_campos_data`, que gera os campos de
    #       entrada para sele√ß√£o da data de sa√≠da.
    # Os valores retornados s√£o armazenados em `combo_sd_d`, `combo_sd_m`,
    #       `combo_sd_y`, e um valor extra descartado `_`.
    # O r√≥tulo "Data Sa√≠da:" ser√° exibido ao lado dos campos.
    combo_sd_d, combo_sd_m, combo_sd_y, _ = criar_campos_data(frame_saida, "Data Sa√≠da:")

    # Obt√©m a data atual usando `datetime.now()`, que retorna a
    #       data e hora do sistema no momento da execu√ß√£o.
    hoje = datetime.now()

    # Define os valores iniciais dos campos de sele√ß√£o de data com a data atual do sistema.
    # `strftime("%d")` retorna o dia atual no formato de dois d√≠gitos.
    # `strftime("%m")` retorna o m√™s atual no formato de dois d√≠gitos.
    # `strftime("%Y")` retorna o ano atual com quatro d√≠gitos.
    combo_sd_d.set(hoje.strftime("%d"))
    combo_sd_m.set(hoje.strftime("%m"))
    combo_sd_y.set(hoje.strftime("%Y"))

    # Cria um r√≥tulo (`Label`) dentro do `frame_saida` para
    #       indicar o campo de entrada da hora de sa√≠da.
    # O texto exibido ser√° "Hora Sa√≠da (HH:MM):".
    # `side="left"` mant√©m o r√≥tulo alinhado √† esquerda dentro do frame.
    # `padx=5` adiciona um pequeno espa√ßamento horizontal para n√£o colar em outros elementos.
    ttk.Label(frame_saida, text="Hora Sa√≠da (HH:MM):").pack(side="left", padx=5)

    # Cria um campo de entrada (`Entry`) dentro do `frame_saida`
    #       para permitir que o usu√°rio insira a hora de sa√≠da.
    # `width=8` define a largura do campo para caber uma hora no formato HH:MM.
    entry_hora = ttk.Entry(frame_saida, width=8)

    # Exibe o campo de entrada na tela, alinhado √† esquerda do frame.
    # `padx=5` adiciona espa√ßamento horizontal para melhor separa√ß√£o dos elementos.
    entry_hora.pack(side="left", padx=5)

    # Insere a hora atual automaticamente no campo de entrada ao carregar a interface.
    # `datetime.now().strftime("%H:%M")` formata a hora no padr√£o HH:MM (exemplo: 14:30).
    entry_hora.insert(0, datetime.now().strftime("%H:%M"))

    # Cria um r√≥tulo (`Label`) dentro do `frame_main` para
    #       exibir o valor calculado da reserva.
    # O texto inicial ser√° "Valor Calculado: R$ 0,00", indicando que
    #       ainda n√£o h√° um valor definido.
    # `font=("Arial",12,"bold")` define a fonte como Arial, tamanho 12, e
    #       em negrito para melhor visibilidade.
    lbl_valor = ttk.Label(frame_main,
                          text="Valor Calculado: R$ 0,00",
                          font=("Arial", 12, "bold"))

    # Exibe o r√≥tulo na interface, adicionando um espa√ßamento
    #       vertical (`pady=10`) para n√£o ficar colado nos outros elementos.
    lbl_valor.pack(pady=10)


    # Cria a fun√ß√£o `calcular` para calcular o valor total da
    #       reserva com base no tempo de perman√™ncia.
    # O c√°lculo √© feito comparando a diferen√ßa entre a
    #       data/hora de entrada e sa√≠da.
    def calcular():

        # `str_para_datetime(data_entrada, hora_entrada)` converte a
        #       string da data e hora de entrada para um objeto datetime.
        # Isso permite realizar opera√ß√µes matem√°ticas entre datas.
        dt_ent = str_para_datetime(data_entrada, hora_entrada)

        # Obt√©m a data de sa√≠da formatada corretamente a partir dos comboboxes.
        # O usu√°rio seleciona o dia, m√™s e ano separadamente e essa
        #       fun√ß√£o junta esses valores em uma string de data.
        data_saida_str = obter_data_de_combobox(combo_sd_d, combo_sd_m, combo_sd_y)

        # `entry_hora.get().strip()` pega o valor digitado no
        #       campo de entrada referente √† hora de sa√≠da.
        # O m√©todo `.strip()` remove quaisquer espa√ßos extras
        #       antes ou depois do texto.
        hr_sai = entry_hora.get().strip()

        # `str_para_datetime(data_saida_str, hr_sai)` converte a data e
        #       hora de sa√≠da para um objeto datetime.
        # Isso √© necess√°rio para calcular a diferen√ßa de tempo
        #       entre a entrada e sa√≠da.
        dt_sai = str_para_datetime(data_saida_str, hr_sai)

        # Se `dt_ent` ou `dt_sai` n√£o forem v√°lidos, significa que
        #       houve erro ao obter ou converter as datas/horas.
        if not dt_ent or not dt_sai:

            # `lbl_valor.config(text="Datas/hora inv√°lidas!")` atualiza o r√≥tulo na
            #       interface para informar o usu√°rio sobre o erro.
            lbl_valor.config(text="Datas/hora inv√°lidas!")

            # Retorna 0.0 para indicar que o c√°lculo n√£o p√¥de ser
            #       realizado devido a erro nas datas.
            return 0.0

        # `(dt_sai - dt_ent).total_seconds() / 3600` calcula a
        #       diferen√ßa de tempo entre a entrada e a sa√≠da em horas.
        # `.total_seconds()` retorna a diferen√ßa em segundos, e a
        #       divis√£o por 3600 converte para horas.
        dif_horas = (dt_sai - dt_ent).total_seconds() / 3600

        # Se a diferen√ßa de horas (`dif_horas`) for negativa, significa
        #       que a data/hora de sa√≠da √© anterior √† entrada.
        # Isso n√£o faz sentido e indica um erro de entrada do usu√°rio.
        if dif_horas < 0:

            # Atualiza o r√≥tulo na interface para exibir um aviso ao
            #       usu√°rio de que a sa√≠da n√£o pode ser menor que a entrada.
            lbl_valor.config(text="Sa√≠da < Entrada!")

            # Retorna 0.0 para indicar que o c√°lculo n√£o
            #       foi realizado corretamente.
            return 0.0

        # Multiplica a diferen√ßa de horas pelo valor fixo da
        #       tarifa por hora (R$ 8,00).
        # Isso determina o valor total a ser cobrado pelo
        #       tempo de perman√™ncia.
        valor = dif_horas * 8.0

        # Atualiza o r√≥tulo na interface gr√°fica para exibir o
        #       valor calculado ao usu√°rio.
        # `f"Valor Calculado: R$ {valor:,.2f}"` formata o valor para
        #       exibi√ß√£o com duas casas decimais e separa√ß√£o correta de milhares.
        lbl_valor.config(text=f"Valor Calculado: R$ {valor:,.2f}")

        # Retorna o valor calculado para ser utilizado em outras
        #       partes do programa, se necess√°rio.
        return valor


    # Define a fun√ß√£o para o bot√£o "Calcular".
    # Esta fun√ß√£o chama a fun√ß√£o `calcular()` que calcula o valor da estadia.
    def btn_calcular():
        calcular()


    # Define a fun√ß√£o para o bot√£o "Finalizar".
    def btn_finalizar():

        # Primeiro, chama a fun√ß√£o `calcular()` para obter o valor da estadia.
        valor = calcular()

        # Verifica se o valor calculado √© menor ou igual a zero.
        # Se for, a fun√ß√£o retorna sem executar as pr√≥ximas etapas,
        #       impedindo a finaliza√ß√£o sem um valor v√°lido.
        if valor <= 0.0:
            return

        # Vaga volta a ficar Livre
        # Atualiza a cole√ß√£o de vagas no banco de dados.
        # Define o status da vaga como "Livre", permitindo novas
        #       reservas ap√≥s a finaliza√ß√£o.
        colecao_vagas.update_one(
            {"bloco": doc_r["bloco"], "numero_vaga": doc_r["numero_vaga"]},
            {"$set": {"status": "Livre"}}
        )

        # Obt√©m a data de sa√≠da a partir dos campos da interface gr√°fica.
        # `combo_sd_d`, `combo_sd_m`, `combo_sd_y` representam os
        #       campos de dia, m√™s e ano da sa√≠da.
        data_saida_str = obter_data_de_combobox(combo_sd_d, combo_sd_m, combo_sd_y)

        # Obt√©m a hora de sa√≠da digitada pelo usu√°rio no campo de entrada de texto.
        # `strip()` √© usado para remover espa√ßos extras no in√≠cio e no final.
        hr_sai = entry_hora.get().strip()

        # Atualiza a reserva para "Finalizado"
        # Atualiza a reserva no banco de dados, marcando-a como finalizada.
        # O documento identificado pelo `reserva_id` receber√° os
        #       novos valores de data e hora de sa√≠da, al√©m do valor total
        #       calculado e o status atualizado para "Finalizado".
        colecao_reservas.update_one(
            {"_id": ObjectId(reserva_id)},
            {
                "$set": {
                    "data_saida": data_saida_str,  # Define a data de sa√≠da fornecida pelo usu√°rio.
                    "hora_saida": hr_sai,  # Define a hora de sa√≠da fornecida pelo usu√°rio.
                    "valor_total": valor,  # Registra o valor total calculado para a estadia.
                    "status": "Finalizado"  # Marca a reserva como finalizada.
                }
            }
        )

        # Chama a fun√ß√£o `gerar_comprovante(valor)` para exibir um
        #       comprovante de pagamento ao usu√°rio.
        gerar_comprovante(valor)

        # Fecha a janela atual, pois a finaliza√ß√£o j√° foi processada.
        # top.destroy()

        # Recarrega os dados para atualizar a interface gr√°fica e refletir as mudan√ßas.
        callback_recarregar()


    # Cria a fun√ß√£o `gerar_comprovante`, que ser√° respons√°vel por
    #       exibir um comprovante de pagamento.
    def gerar_comprovante(valor):

        # Cria uma nova janela (`Toplevel`) que servir√° como o
        #       comprovante de pagamento.
        pop = Toplevel(top)

        # Define o t√≠tulo da janela como "Comprovante de Pagamento".
        pop.title("Comprovante de Pagamento")

        # Centraliza a janela do comprovante na tela, definindo
        #       largura e altura (400x200).
        centralizar_janela(pop, 400, 200)

        # Aplica o estilo geral da interface √† janela do comprovante
        #       para manter a identidade visual do sistema.
        criar_estilo_geral(pop)

        # Cria um container (`Frame`) dentro da janela para
        #       organizar os elementos do comprovante.
        frame_cp = ttk.Frame(pop)

        # Posiciona o frame dentro da janela, permitindo que ele se
        #       expanda tanto horizontal quanto verticalmente.
        # `padx=10` e `pady=10` adicionam espa√ßamento ao redor do
        #       frame para melhor est√©tica.
        frame_cp.pack(fill="both", expand=True, padx=10, pady=10)

        # Cria um r√≥tulo para exibir o t√≠tulo do comprovante.
        # `text="Comprovante - Reserva Finalizada"` define o texto exibido no r√≥tulo.
        # `font=("Arial",14,"bold")` define a fonte Arial, tamanho 14, com negrito.
        # `foreground="#3F51B5"` define a cor do texto como azul escuro.
        # `pady=10` adiciona 10 pixels de espa√ßamento vertical para separar dos outros elementos.
        ttk.Label(frame_cp,
                  text="Comprovante - Reserva Finalizada",
                  font=("Arial", 14, "bold"),
                  foreground="#3F51B5").pack(pady=10)

        # Cria um r√≥tulo para exibir o valor pago no comprovante.
        # `text=f"Valor Pago: R$ {valor:,.2f}"` formata o valor como
        #       moeda brasileira, com duas casas decimais.
        # `pady=5` adiciona um espa√ßamento vertical de 5 pixels
        #       abaixo do texto para melhor legibilidade.
        ttk.Label(frame_cp, text=f"Valor Pago: R$ {valor:,.2f}").pack(pady=5)

        # Cria um r√≥tulo para exibir uma mensagem de agradecimento ao cliente.
        # `text="Obrigado pela prefer√™ncia!"` define o texto exibido no r√≥tulo.
        # `pady=5` adiciona um espa√ßamento vertical de 5 pixels
        #       abaixo do texto para melhor apresenta√ß√£o.
        ttk.Label(frame_cp, text="Obrigado pela prefer√™ncia!").pack(pady=5)

        # Cria um bot√£o para fechar a janela do comprovante.
        # `text="Fechar"` define o texto exibido no bot√£o.
        # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
        # `command=pop.destroy` associa a a√ß√£o de fechar a janela ao clicar no bot√£o.
        # `pady=10` adiciona 10 pixels de espa√ßamento vertical ao redor do bot√£o.
        ttk.Button(frame_cp,
                   text="Fechar",
                   style="MyButton.TButton",
                   command=pop.destroy).pack(pady=10)


        # Abre a Janela na tela
        pop.mainloop()


    # Cria um frame (container) para os bot√µes, dentro do frame principal.
    # Isso organiza os bot√µes em um local espec√≠fico da interface.
    frame_btn = ttk.Frame(frame_main)

    # Adiciona um espa√ßamento vertical de 10 pixels.
    frame_btn.pack(pady=10)

    # Cria um bot√£o para calcular o valor da estadia.
    # `text="Calcular Valor"` define o texto exibido no bot√£o.
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=btn_calcular` associa a fun√ß√£o `btn_calcular` ao clique do bot√£o.
    # `pack(side="left", padx=10)` posiciona o bot√£o √† esquerda e
    #       adiciona um espa√ßamento horizontal de 10 pixels.
    ttk.Button(frame_btn,
               text="Calcular Valor",
               style="MyButton.TButton",
               command=btn_calcular).pack(side="left", padx=10)

    # Cria um bot√£o para finalizar a reserva e processar o pagamento.
    # `text="Finalizar/Pagar"` define o texto exibido no bot√£o.
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=btn_finalizar` associa a fun√ß√£o `btn_finalizar` ao clique do bot√£o.
    # `pack(side="left", padx=10)` posiciona o bot√£o √† esquerda e
    #       adiciona um espa√ßamento horizontal de 10 pixels.
    ttk.Button(frame_btn,
               text="Finalizar/Pagar",
               style="MyButton.TButton",
               command=btn_finalizar).pack(side="left", padx=10)



# Define a fun√ß√£o `criar_campos_data` para criar um conjunto de
#       campos de data (dia, m√™s e ano).
# `parent` define o widget pai onde os campos ser√£o posicionados.
# `label_text` define o texto do r√≥tulo acima dos campos de data.
def criar_campos_data(parent, label_text):

    # Cria um frame (`frame_data`) dentro do widget pai (`parent`)
    #       para organizar os elementos da data.
    frame_data = ttk.Frame(parent)

    # Exibe o frame dentro do widget pai.
    # `side="left"` posiciona o frame √† esquerda do layout.
    # `padx=5, pady=5` adiciona espa√ßamento horizontal e vertical
    #       para organiza√ß√£o visual.
    frame_data.pack(side="left", padx=5, pady=5)

    # Cria um r√≥tulo (`Label`) com o texto especificado em `label_text`.
    # Este r√≥tulo ser√° exibido acima dos campos de sele√ß√£o de data.
    lbl = ttk.Label(frame_data, text=label_text)

    # Exibe o r√≥tulo dentro do frame de data.
    lbl.pack()

    # Chama a fun√ß√£o `gerar_listas_data()`, que retorna tr√™s
    #       listas: dias, meses e anos.
    dias, meses, anos = gerar_listas_data()

    # Cria um combobox (`combo_dia`) para selecionar o dia.
    # `frame_data` √© o widget pai onde o combobox ser√° posicionado.
    # `values=dias` define a lista de op√ß√µes para os dias (01 a 31).
    # `width=3` define a largura do campo para acomodar dois d√≠gitos.
    # `state="readonly"` impede que o usu√°rio digite valores
    #       manualmente, permitindo apenas a sele√ß√£o.
    combo_dia = ttk.Combobox(frame_data,
                             values=dias,
                             width=3,
                             state="readonly")

    # Exibe o combobox do dia dentro do `frame_data`.
    # `side="left"` posiciona o elemento √† esquerda dentro do frame.
    # `padx=2` adiciona um pequeno espa√ßamento horizontal entre os elementos.
    combo_dia.pack(side="left", padx=2)

    # Cria um combobox (`combo_mes`) para selecionar o m√™s.
    # `values=meses` define a lista de op√ß√µes para os meses (01 a 12).
    # `width=3` define a largura do campo para acomodar dois d√≠gitos.
    # `state="readonly"` impede que o usu√°rio digite
    #       valores, permitindo apenas a sele√ß√£o.
    combo_mes = ttk.Combobox(frame_data,
                             values=meses,
                             width=3,
                             state="readonly")

    # Exibe o combobox do m√™s dentro do `frame_data`.
    # `side="left"` posiciona o elemento √† esquerda do pr√≥ximo elemento.
    # `padx=2` adiciona um pequeno espa√ßamento horizontal entre os elementos.
    combo_mes.pack(side="left", padx=2)

    # Cria um combobox (`combo_ano`) para selecionar o ano.
    # `values=anos` define a lista de op√ß√µes de anos (de um
    #       intervalo de 5 anos para tr√°s at√© 5 anos para frente).
    # `width=5` define a largura do campo para acomodar quatro d√≠gitos.
    # `state="readonly"` impede que o usu√°rio digite valores
    #       manualmente, permitindo apenas a sele√ß√£o.
    combo_ano = ttk.Combobox(frame_data,
                             values=anos,
                             width=5,
                             state="readonly")

    # Exibe o combobox do ano dentro do `frame_data`.
    # `side="left"` posiciona o elemento √† esquerda do pr√≥ximo elemento.
    # `padx=2` adiciona um pequeno espa√ßamento horizontal entre os elementos.
    combo_ano.pack(side="left", padx=2)

    # Retorna os tr√™s comboboxes (`combo_dia`, `combo_mes`, `combo_ano`) e o frame (`frame_data`).
    # Isso permite que esses elementos sejam acessados e
    #       manipulados posteriormente.
    return combo_dia, combo_mes, combo_ano, frame_data



# Define a fun√ß√£o `gerar_listas_data`, que gera listas de dias,
#       meses e anos para serem usadas em seletores de data.
# Retorno:
# - `dias`: lista contendo os dias do m√™s, de "01" a "31".
# - `meses`: lista contendo os meses do ano, de "01" a "12".
# - `anos`: lista contendo anos desde cinco anos atr√°s at√©
#       cinco anos √† frente do ano atual.

def gerar_listas_data():

    # Gera uma lista de dias formatados com dois d√≠gitos (01 a 31).
    # Utiliza list comprehension para criar a lista, garantindo
    #       que os n√∫meros tenham sempre dois d√≠gitos.
    dias = [f"{d:02d}" for d in range(1, 32)]  # "01".."31"

    # Gera uma lista de meses formatados com dois d√≠gitos (01 a 12).
    # Tamb√©m utiliza list comprehension para manter o formato de dois d√≠gitos.
    meses = [f"{m:02d}" for m in range(1, 13)]  # "01".."12"

    # Obt√©m o ano atual utilizando `datetime.now().year`.
    ano_atual = datetime.now().year

    # Gera uma lista de anos em formato de string, indo de 5 anos
    #       antes at√© 5 anos depois do ano atual.
    anos = [str(y) for y in range(ano_atual - 5, ano_atual + 6)]

    # Retorna as tr√™s listas: `dias`, `meses` e `anos`.
    return dias, meses, anos


# Define a fun√ß√£o `str_para_datetime`, que converte strings de
#       data e hora para um objeto `datetime`.
# Par√¢metros:
# - `data_str`: uma string representando a data no formato "dd/mm/aaaa".
# - `hora_str`: uma string representando a hora no formato "HH:MM".
# Retorno:
# - Um objeto `datetime` combinando a data e hora fornecidas, ou
#       `None` se houver erro na convers√£o.
def str_para_datetime(data_str, hora_str):

    # Utiliza um bloco `try-except` para evitar que o programa
    #       quebre caso os valores fornecidos sejam inv√°lidos.
    try:

        # Converte a string `data_str` em um objeto `datetime`
        #       usando o formato "dd/mm/yyyy".
        dt = datetime.strptime(data_str, "%d/%m/%Y")

        # Converte a string `hora_str` em um objeto `time` usando o formato "HH:MM".
        tm = datetime.strptime(hora_str, "%H:%M").time()

        # Combina a data (`dt`) e a hora (`tm`) em um
        #       √∫nico objeto `datetime`.
        return datetime.combine(dt, tm)

    # Se houver erro na convers√£o (por exemplo, se a string
    #       estiver no formato errado), retorna `None`.
    except:
        return None



# Obt√©m a data selecionada pelos comboboxes e a retorna formatada.
def obter_data_de_combobox(combo_dia, combo_mes, combo_ano):

    # Obt√©m o valor selecionado no combobox do dia.
    # `.get()` recupera o valor atual do combobox.
    # `.strip()` remove espa√ßos em branco no in√≠cio e
    #       no final, caso existam.
    d = combo_dia.get().strip()

    # Obt√©m o valor selecionado no combobox do m√™s.
    # `.get()` recupera o valor atual do combobox.
    # `.strip()` remove espa√ßos em branco no in√≠cio e no final, caso existam.
    m = combo_mes.get().strip()

    # Obt√©m o valor selecionado no combobox do ano.
    # `.get()` recupera o valor atual do combobox.
    # `.strip()` remove espa√ßos em branco no in√≠cio e
    #       no final, caso existam.
    a = combo_ano.get().strip()

    # Verifica se algum dos campos est√° vazio.
    # Se um dos valores n√£o foi selecionado, retorna uma string vazia.
    if not d or not m or not a:
        return ""

    # Retorna a data formatada no padr√£o brasileiro (DD/MM/AAAA).
    return f"{d}/{m}/{a}"


# Define a fun√ß√£o popup_reservar que cria uma janela pop-up para reservar uma vaga.
# `parent` define a janela principal que abrir√° o pop-up.
# `bloco` √© o nome do bloco onde a vaga se encontra.
# `num_vaga` √© o n√∫mero da vaga que est√° sendo reservada.
# `data_sel` √© a data selecionada para a reserva.
# `callback_recarregar` √© a fun√ß√£o a ser chamada para
#       recarregar a interface ap√≥s a reserva.
def popup_reservar(parent, bloco, num_vaga, data_sel, callback_recarregar):

    # Cria uma nova janela pop-up utilizando Toplevel, que √©
    #       uma janela filha da janela principal.
    # `Toplevel(parent)` cria a nova janela associada ao widget pai `parent`.
    top = Toplevel(parent)

    # Define o t√≠tulo da janela pop-up.
    # `top.title(f"Reservar - {bloco}-{num_vaga}")` define o t√≠tulo
    #       com a palavra "Reservar" seguida pelo bloco e n√∫mero da vaga.
    top.title(f"Reservar - {bloco}-{num_vaga}")

    # Centraliza a janela pop-up na tela e define seu tamanho.
    # `centralizar_janela(top, 400, 400)` centraliza a janela e
    #       define sua largura e altura como 400 pixels cada.
    centralizar_janela(top, 400, 400)

    # Aplica o estilo visual geral √† janela pop-up.
    # `criar_estilo_geral(top)` configura a apar√™ncia da janela, como
    #       cores, fontes e outros par√¢metros visuais, de acordo com o padr√£o da aplica√ß√£o.
    criar_estilo_geral(top)

    # Cria um frame principal dentro da janela pop-up.
    # `ttk.Frame(top)` cria um cont√™iner que agrupa os elementos da
    #       interface dentro da janela `top`.
    frame_main = ttk.Frame(top)

    # Ajusta o frame para ocupar todo o espa√ßo dispon√≠vel dentro da janela.
    # `fill="both"` permite que o frame expanda tanto na horizontal quanto na vertical.
    # `expand=True` permite que o frame cres√ßa junto com a janela
    #       caso ela seja redimensionada.
    # `padx=10, pady=10` adiciona espa√ßamento interno de 10 pixels nas
    #       bordas do frame, para melhor est√©tica.
    frame_main.pack(fill="both", expand=True, padx=10, pady=10)

    # Cria um r√≥tulo (label) que exibe as informa√ß√µes da reserva.
    # `frame_main` define o cont√™iner pai onde o r√≥tulo ser√° inserido.
    # `text=f"Reserva para {bloco}-{num_vaga}\nData: {data_sel}"`
    #       define o texto do r√≥tulo, onde `{bloco}` e `{num_vaga}` s√£o
    #       substitu√≠dos pelo bloco e n√∫mero da vaga escolhidos.
    #  `{data_sel}` exibe a data da reserva no formato correto.
    # `font=("Arial", 14, "bold")` define a fonte como Arial,
    #       tamanho 14, e estilo negrito para dar destaque.
    # `foreground="#3F51B5"` define a cor do texto como azul escuro (#3F51B5)
    #       para manter o padr√£o visual do sistema.
    lbl_info = ttk.Label(frame_main,
                         text=f"Reserva para {bloco}-{num_vaga}\nData: {data_sel}",
                         font=("Arial", 14, "bold"),
                         foreground="#3F51B5")

    # Posiciona o r√≥tulo na interface gr√°fica.
    # `pady=10` adiciona 10 pixels de espa√ßamento vertical para
    #       separar o r√≥tulo dos outros elementos.
    # Isso melhora a organiza√ß√£o visual e torna o texto mais leg√≠vel.
    lbl_info.pack(pady=10)

    # Escolher Cliente
    # Cria um r√≥tulo (label) para indicar ao usu√°rio que ele deve selecionar um cliente.
    # `frame_main` √© o cont√™iner pai onde o r√≥tulo ser√° inserido.
    # `text="Selecione o Cliente:"` define o texto do r√≥tulo para orientar o usu√°rio.
    # `font=("Arial", 12, "bold")` define a fonte como Arial,
    #       tamanho 12, e em negrito para dar destaque.
    ttk.Label(frame_main,
              text="Selecione o Cliente:",
              font=("Arial", 12, "bold")).pack(pady=5)

    # Cria uma vari√°vel `StringVar()` para armazenar a
    #       sele√ß√£o do cliente no combobox.
    # Isso permite que o valor selecionado possa ser
    #       recuperado facilmente no c√≥digo.
    combo_cvar = StringVar()

    # Cria um combobox (caixa de sele√ß√£o) para escolher um cliente.
    # `frame_main` define que este widget ser√° inserido dentro do
    #       cont√™iner principal da interface.
    # `textvariable=combo_cvar` associa o combobox √† vari√°vel `combo_cvar`,
    #       permitindo recuperar o valor selecionado.
    # `state="readonly"` impede que o usu√°rio digite no combobox,
    #       garantindo que apenas sele√ß√µes v√°lidas sejam feitas.
    # `width=35` define a largura do combobox, garantindo espa√ßo
    #       suficiente para exibir os nomes dos clientes.
    combo_c = ttk.Combobox(frame_main,
                           textvariable=combo_cvar,
                           state="readonly",
                           width=35)

    # Posiciona o combobox na interface gr√°fica.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels entre o
    #       combobox e os outros elementos para melhorar a organiza√ß√£o visual.
    combo_c.pack(pady=5)

    # Carregar clientes
    # Recupera todos os documentos da cole√ß√£o `colecao_clientes` e
    #       os armazena em uma lista.
    # `list(colecao_clientes.find())` busca todos os registros de
    #       clientes do banco de dados.
    docs_c = list(colecao_clientes.find())

    # Cria uma lista formatada contendo CPF e Nome de cada cliente.
    # Para cada cliente (`d`) encontrado em `docs_c`, √© gerada uma
    #       string no formato "CPF - Nome".
    # Isso facilita a visualiza√ß√£o e a escolha do cliente no combobox.
    lst_c = [f"{d['cpf']} - {d['nome']}" for d in docs_c]

    # Define os valores dispon√≠veis no combobox como a
    #       lista formatada de clientes (`lst_c`).
    # Isso permite que o usu√°rio selecione um cliente na
    #       interface gr√°fica.
    combo_c["values"] = lst_c

    # Escolher Ve√≠culo do Cliente
    # Cria um r√≥tulo (label) para informar ao usu√°rio que deve
    #       selecionar um ve√≠culo do cliente.
    # O texto √© "Selecione o Ve√≠culo (do Cliente):".
    # A fonte usada √© Arial, tamanho 12, e em negrito.
    # O espa√ßamento vertical (pady) √© de 5 pixels para melhor separa√ß√£o visual.
    ttk.Label(frame_main,
              text="Selecione o Ve√≠culo (do Cliente):",
              font=("Arial", 12, "bold")).pack(pady=5)

    # Cria uma vari√°vel de controle (`StringVar`) para armazenar o
    #       valor selecionado no combobox.
    # Essa vari√°vel manter√° a sele√ß√£o do usu√°rio para posterior uso.
    combo_vvar = StringVar()

    # Cria um combobox (`ttk.Combobox`) dentro do `frame_main`,
    #       associado √† vari√°vel `combo_vvar`.
    # O estado `readonly` impede que o usu√°rio digite manualmente,
    #       permitindo apenas sele√ß√µes da lista.
    # A largura do combobox √© definida como 35 caracteres para
    #       melhor visualiza√ß√£o das op√ß√µes.
    combo_v = ttk.Combobox(frame_main,
                           textvariable=combo_vvar,
                           state="readonly",
                           width=35)

    # Adiciona um espa√ßamento vertical (`pady=5`) e exibe o
    #       combobox na interface gr√°fica.
    combo_v.pack(pady=5)

    # Define a fun√ß√£o que ser√° chamada ao selecionar um cliente no combobox.
    # Essa fun√ß√£o atualiza a lista de ve√≠culos do cliente selecionado.
    def ao_escolher_cliente(event):

        # Obt√©m o valor selecionado no combobox de clientes e
        #       remove espa√ßos em branco extras.
        sel_c = combo_cvar.get().strip()

        # Se nenhum cliente for selecionado, a lista de ve√≠culos ser√° limpa.
        if not sel_c:

            # Remove todas as op√ß√µes do combobox de ve√≠culos.
            combo_v["values"] = []

            # Define o valor do combobox de ve√≠culos como vazio.
            combo_v.set("")

            # Desativa o combobox de ve√≠culos, impedindo a sele√ß√£o
            #       de um ve√≠culo sem cliente.
            combo_v.config(state="disabled")

            # Sai da fun√ß√£o, pois n√£o h√° mais nada a ser feito.
            return

        # Agora buscamos diretamente pelo campo 'proprietario'
        proprietario = sel_c

        # Buscar TODOS os ve√≠culos do cliente (sem filtrar por status)
        docs_v = list(colecao_veiculos.find({"proprietario": proprietario}))

        # Verificar e preencher a combobox
        # Verifica se h√° ve√≠culos cadastrados para o cliente selecionado.
        if docs_v:

            # Cria uma lista vazia para armazenar as op√ß√µes do combobox de ve√≠culos.
            lst_v = []

            # Percorre todos os ve√≠culos encontrados no banco de dados.
            for dv in docs_v:

                # Exibe no console os detalhes do ve√≠culo encontrado para depura√ß√£o.
                print(f"üîç Ve√≠culo encontrado: {dv}")

                # Obt√©m a placa do ve√≠culo, se n√£o existir, define como string vazia.
                placa = dv.get("placa", "")

                # Obt√©m o modelo do ve√≠culo, se n√£o existir, define como string vazia.
                modelo = dv.get("modelo", "")

                # Obt√©m a cor do ve√≠culo, se n√£o existir, define como string vazia.
                cor = dv.get("cor", "")

                # Formata a string com os dados do ve√≠culo e adiciona √† lista.
                # Exemplo: "XYZ-1234 - Fiesta - Prata"
                lst_v.append(f"{placa} - {modelo} - {cor}")

            # Atualiza os valores do combobox de ve√≠culos com a lista formatada.
            combo_v["values"] = lst_v

            # Define um texto padr√£o no combobox indicando que o
            #       usu√°rio deve selecionar um ve√≠culo.
            combo_v.set("Selecione um ve√≠culo")

            # Ativa o combobox, permitindo a sele√ß√£o de ve√≠culos.
            combo_v.config(state="readonly")

        # Habilita a combo
        # Caso o cliente selecionado n√£o tenha ve√≠culos cadastrados:
        else:

            # Define a lista de valores do combobox de ve√≠culos com
            #       uma mensagem informativa.
            combo_v["values"] = ["Nenhum ve√≠culo encontrado"]

            # Define o valor exibido na combo box para "Nenhum
            #       ve√≠culo encontrado".
            combo_v.set("Nenhum ve√≠culo encontrado")

            # Desativa o combobox para impedir sele√ß√£o, pois
            #       n√£o h√° ve√≠culos dispon√≠veis.
            combo_v.config(state="disabled")

    # Vincular evento de mudan√ßa de cliente
    # Associa a fun√ß√£o `ao_escolher_cliente` ao evento de
    #       sele√ß√£o da combobox de clientes.
    # Quando o usu√°rio selecionar um cliente, a fun√ß√£o `ao_escolher_cliente`
    #       ser√° chamada automaticamente.
    combo_c.bind("<<ComboboxSelected>>", ao_escolher_cliente)

    # Cria um r√≥tulo (Label) para indicar ao usu√°rio que ele
    #       deve inserir a hora de entrada da reserva.
    # O texto do r√≥tulo ser√° "Hora de Entrada (HH:MM)".
    # A fonte utilizada ser√° Arial, tamanho 12, e em negrito
    #       para destacar a informa√ß√£o.
    ttk.Label(frame_main,
              text="Hora de Entrada (HH:MM):",
              font=("Arial", 12, "bold")).pack(pady=5)

    # Cria um campo de entrada (Entry) para que o usu√°rio
    #       digite a hora de entrada da reserva.
    # O `width=10` define que o campo de entrada ter√° largura
    #       suficiente para exibir 10 caracteres.
    entry_hora = ttk.Entry(frame_main, width=10)
    entry_hora.pack(pady=5)

    # Insere automaticamente a hora atual dentro do campo de
    #       entrada assim que a janela for aberta.
    # A hora ser√° formatada no padr√£o "HH:MM" (horas e minutos).
    entry_hora.insert(0, datetime.now().strftime("%H:%M"))

    # Cria um frame (container) para organizar os
    #       bot√µes dentro da janela.
    # Esse frame mant√©m os bot√µes alinhados e com um
    #       espa√ßamento adequado.
    frame_btn = ttk.Frame(frame_main)
    frame_btn.pack(pady=10)

    # Fun√ß√£o `salvar` respons√°vel por validar e
    #       registrar uma reserva de vaga.
    def salvar():

        # Obt√©m o valor selecionado na combobox de clientes e
        #       remove espa√ßos extras do in√≠cio e fim.
        sc = combo_cvar.get().strip()

        # Obt√©m o valor selecionado na combobox de ve√≠culos e remove
        #       espa√ßos extras do in√≠cio e fim.
        sv = combo_vvar.get().strip()

        # Obt√©m a hora de entrada digitada pelo usu√°rio e
        #       remove espa√ßos extras do in√≠cio e fim.
        hr_ = entry_hora.get().strip()

        # Verifica se um cliente foi selecionado corretamente.
        # A string deve conter " - " para separar CPF e nome.
        if not sc or " - " not in sc:
            messagebox.showerror("Erro", "Selecione um cliente!", parent=top)
            return

        # Verifica se um ve√≠culo foi selecionado corretamente.
        # A string deve conter " - " para separar placa e modelo do ve√≠culo.
        # Al√©m disso, impede a sele√ß√£o de "Nenhum ve√≠culo encontrado".
        if not sv or " - " not in sv or sv == "Nenhum ve√≠culo encontrado":
            messagebox.showerror("Erro", "Selecione um ve√≠culo v√°lido!", parent=top)
            return

        # Separa o CPF e o nome do cliente a partir do valor selecionado na combobox.
        cpf_, nm_ = sc.split(" - ", 1)

        # Separa a placa e o modelo do ve√≠culo a partir do valor selecionado na combobox.
        placa_, mod_ = sv.split(" - ", 1)

        # Criar documento de reserva
        # O dicion√°rio `doc_res` cont√©m todas as informa√ß√µes
        #       necess√°rias para registrar uma reserva.
        doc_res = {

            # Armazena o CPF do cliente que fez a reserva.
            "cliente_cpf": cpf_,

            # Armazena o nome do cliente que fez a reserva.
            "cliente_nome": nm_,

            # Armazena a placa do ve√≠culo associado √† reserva.
            "veiculo_placa": placa_,

            # Armazena o modelo do ve√≠culo associado √† reserva.
            "veiculo_modelo": mod_,

            # Armazena a data de entrada selecionada no calend√°rio.
            "data_entrada": data_sel,

            # Armazena a hora de entrada informada pelo usu√°rio.
            "hora_entrada": hr_,

            # Define a data de sa√≠da como "-" (indica que
            #       ainda n√£o foi definida).
            "data_saida": "-",

            # Define a hora de sa√≠da como "-" (indica que ainda n√£o foi definida).
            "hora_saida": "-",

            # Armazena o nome do bloco onde a vaga est√° localizada.
            "bloco": bloco,

            # Armazena o n√∫mero da vaga reservada.
            "numero_vaga": num_vaga,

            # Define o valor total da reserva como 0, pois
            #       ainda n√£o foi calculado.
            "valor_total": 0,

            # Define o status da reserva como "Reservado" (aguardando ocupa√ß√£o).
            "status": "Reservado"

        }

        # Insere o documento `doc_res` na cole√ß√£o `colecao_reservas`
        #       do banco de dados.
        colecao_reservas.insert_one(doc_res)

        # Atualiza o status da vaga para "Reservada".
        # Isso garante que a vaga n√£o seja ocupada por outro cliente no mesmo per√≠odo.
        colecao_vagas.update_one(

            # Filtra a vaga pelo bloco e n√∫mero da vaga.
            {"bloco": bloco, "numero_vaga": num_vaga},

            # Define o status da vaga como "Reservada".
            {"$set": {"status": "Reservada"}}

        )

        # Exibe um alerta informando que a reserva foi realizada com sucesso.
        # `title="Sucesso"` define o t√≠tulo da mensagem.
        # `message=f"Reserva efetuada para {bloco}-{num_vaga}!"` exibe a
        #       confirma√ß√£o com os detalhes da vaga.
        # `parent=top` garante que a mensagem apare√ßa vinculada √† janela de reserva.
        messagebox.showinfo(title="Sucesso",
                            message=f"Reserva efetuada para {bloco}-{num_vaga}!",
                            parent=top)

        # Fecha a janela de reserva ap√≥s a confirma√ß√£o da opera√ß√£o.
        # Isso evita que o usu√°rio fa√ßa m√∫ltiplas reservas sem necessidade.
        top.destroy()

        # Recarrega a interface do mapa para exibir a vaga como "Reservada".
        # Isso mant√©m a interface atualizada com os dados mais recentes.
        callback_recarregar()

    # Cria um bot√£o para salvar a reserva.
    # `text="Salvar Reserva"` define o texto exibido no bot√£o.
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=salvar` associa a a√ß√£o de salvar a reserva ao clicar no bot√£o.
    # `side="left"` posiciona o bot√£o √† esquerda dentro do frame.
    # `padx=10` adiciona um espa√ßamento horizontal de 10 pixels entre os bot√µes.
    ttk.Button(frame_btn,
               text="Salvar Reserva",
               style="MyButton.TButton",
               command=salvar).pack(side="left", padx=10)

    # Cria um bot√£o para fechar a janela de reserva.
    # `text="Fechar"` define o texto exibido no bot√£o.
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=top.destroy` associa a a√ß√£o de fechar a janela ao clicar no bot√£o.
    # `side="left"` posiciona o bot√£o √† esquerda dentro do
    #       frame, ao lado do bot√£o de salvar.
    # `padx=10` adiciona um espa√ßamento horizontal de
    #       10 pixels entre os bot√µes.
    ttk.Button(frame_btn,
               text="Fechar",
               style="MyButton.TButton",
               command=top.destroy).pack(side="left", padx=10)



# -------------------------------------------------------------------------
# CRUD de Blocos (gera Vagas)
# -------------------------------------------------------------------------

# Define uma fun√ß√£o chamada `tela_blocos_crud` que recebe `janela_pai` como par√¢metro.
# Esta fun√ß√£o cria uma nova janela para gerenciar blocos.
def tela_blocos_crud(janela_pai):

    # Cria uma nova janela secund√°ria (`Toplevel`) a partir da `janela_pai`.
    janela = tk.Toplevel(janela_pai)

    # Define o t√≠tulo da janela como "Gerenciamento de Blocos".
    janela.title("Gerenciamento de Blocos")

    # Define a largura e a altura da janela, com valores de 900x500 pixels.
    largura, altura = 900, 500

    # Chama a fun√ß√£o `centralizar_janela` para posicionar a
    #       janela no centro da tela.
    # A fun√ß√£o `centralizar_janela` precisa estar definida no
    #       c√≥digo e recebe a `janela`,
    #       largura e altura como par√¢metros.
    centralizar_janela(janela, largura, altura)

    # Define a cor de fundo da janela para um tom de
    #       cinza claro (`#F5F5F5`).
    janela.configure(bg="#F5F5F5")

    # Cria um container principal dentro da `janela`, onde
    #       todos os elementos da interface ser√£o organizados.
    # Define a cor de fundo como `#F5F5F5`, um tom de cinza claro.
    container_principal = tk.Frame(janela, bg="#F5F5F5")

    # Empacota (`pack()`) o container para ocupar todo o
    #       espa√ßo dispon√≠vel.
    # `expand=True` permite que o container se expanda para
    #       preencher o espa√ßo dispon√≠vel.
    # `fill="both"` faz com que ele preencha tanto a
    #       largura quanto a altura da janela.
    container_principal.pack(expand=True, fill="both")

    # Cria um r√≥tulo (`Label`) dentro do `container_principal`
    #       para exibir o t√≠tulo da janela.
    # O t√≠tulo informa que esta tela gerencia blocos e
    #       vagas de estacionamento.
    rotulo_titulo = ttk.Label(container_principal,  # Define o container onde o r√≥tulo ser√° inserido.
                              text="üè¢ Gerenciar Blocos e Vagas",  # Define o texto exibido no r√≥tulo.
                              font=("Arial", 22, "bold"),  # Define a fonte do texto como Arial, tamanho 22, em negrito.
                              foreground="#2E86C1",  # Define a cor do texto para um tom de azul (`#2E86C1`).
                              background="#F5F5F5")  # Define a cor de fundo do r√≥tulo para o mesmo tom de cinza claro do container.

    # Adiciona um espa√ßamento vertical (`pady=10`) ao
    #       redor do r√≥tulo para melhor organiza√ß√£o visual.
    rotulo_titulo.pack(pady=10)

    # Cria um frame (`Frame`) dentro do `container_principal`
    #       para organizar os campos do formul√°rio.
    # Esse frame servir√° como um agrupador para os
    #       campos de entrada do usu√°rio.
    container_formulario = ttk.Frame(container_principal)

    # Empacota (`pack()`) o frame dentro do container principal.
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels ao
    #       redor do frame, garantindo melhor organiza√ß√£o visual.
    container_formulario.pack(pady=10)

    # Cria um r√≥tulo (`Label`) para identificar o campo de entrada
    #       onde o usu√°rio informar√° o nome do bloco.
    # `text="Nome do Bloco:"` define o texto que ser√° exibido ao
    #       lado do campo de entrada.
    # `font=("Arial", 12)` especifica a fonte do texto no r√≥tulo,
    #       utilizando a fonte Arial no tamanho 12.
    # `.grid(row=0, column=0, padx=5, pady=5, sticky="e")`
    #       posiciona o r√≥tulo na linha 0, coluna 0,
    #       adicionando um espa√ßamento de 5 pixels nas margens
    #       horizontal (`padx`) e vertical (`pady`).
    # O argumento `sticky="e"` alinha o texto √† direita
    #       dentro da c√©lula do grid.
    ttk.Label(container_formulario,
              text="Nome do Bloco:",
              font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (`Entry`) onde o usu√°rio
    #       poder√° digitar o nome do bloco.
    # `width=30` define a largura do campo, permitindo a
    #       entrada de at√© 30 caracteres vis√≠veis.
    # `font=("Arial", 12)` define que o texto digitado no
    #       campo usar√° a fonte Arial no tamanho 12.
    campo_nome = ttk.Entry(container_formulario,
                           width=30,
                           font=("Arial", 12))

    # Posiciona o campo de entrada na interface gr√°fica.
    # `row=0, column=1` coloca o campo na mesma linha que o
    #       r√≥tulo, mas na segunda coluna.
    # `padx=5, pady=5` adiciona espa√ßamento de 5 pixels ao
    #       redor do campo, melhorando a legibilidade.
    # Como o r√≥tulo est√° alinhado √† direita, o campo ser√°
    #       alinhado corretamente ao lado do r√≥tulo.
    campo_nome.grid(row=0, column=1, padx=5, pady=5)

    # Cria um r√≥tulo de texto para exibir "Quantidade de Vagas:" na interface gr√°fica.
    # `text="Quantidade de Vagas:"` define o texto vis√≠vel ao usu√°rio.
    # `font=("Arial", 12)` define a fonte como Arial no
    #       tamanho 12 para melhor legibilidade.
    # `grid(row=1, column=0, padx=5, pady=5, sticky="e")`
    #       posiciona o r√≥tulo na linha 1, coluna 0.
    # `padx=5, pady=5` adiciona espa√ßamento horizontal e
    #       vertical para evitar elementos colados.
    # `sticky="e"` alinha o texto √† direita dentro da c√©lula,
    #       garantindo alinhamento com o campo de entrada.
    ttk.Label(container_formulario,
              text="Quantidade de Vagas:",
              font=("Arial", 12)).grid(row=1, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada para que o usu√°rio informe a
    #       quantidade de vagas do bloco.
    # `ttk.Entry(container_formulario)` cria um campo de
    #       entrada dentro do `container_formulario`.
    # `width=10` define a largura do campo, permitindo inserir
    #       at√© 10 caracteres de forma vis√≠vel.
    # `font=("Arial", 12)` define a fonte como Arial, tamanho 12,
    #       garantindo melhor leitura e consist√™ncia com os outros elementos da interface.
    campo_qtd_vagas = ttk.Entry(container_formulario,
                                width=10,
                                font=("Arial", 12))

    # Posiciona o campo de entrada na interface usando o m√©todo `grid()`.
    # `row=1` indica que o campo ser√° posicionado na segunda linha da
    #       grade, abaixo do r√≥tulo "Quantidade de Vagas".
    # `column=1` posiciona o campo na segunda coluna, ao lado do r√≥tulo.
    # `padx=5, pady=5` adiciona um espa√ßamento de 5 pixels horizontal e
    #       verticalmente, evitando que os elementos fiquem colados.
    campo_qtd_vagas.grid(row=1, column=1, padx=5, pady=5)

    # Cria um container (Frame) para agrupar os bot√µes de a√ß√£o.
    # `ttk.Frame(container_principal)` cria um novo frame dentro do
    #       `container_principal`, onde os bot√µes ser√£o adicionados.
    container_botoes = ttk.Frame(container_principal)

    # Posiciona o container de bot√µes na interface usando o m√©todo `pack()`.
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels,
    #       separando o container de bot√µes dos outros elementos.
    container_botoes.pack(pady=10)


    # Define a fun√ß√£o `carregar_lista` para carregar os
    #       blocos cadastrados na tabela.
    def carregar_lista():

        # Remove todos os itens da tabela antes de carregar os novos dados.
        # `delete(*tabela_blocos.get_children())`: Garante que a
        #       tabela seja limpa antes de adicionar novos registros.
        tabela_blocos.delete(*tabela_blocos.get_children())

        # Obt√©m todos os blocos cadastrados na cole√ß√£o do banco de dados.
        # `colecao_blocos.find()`: Retorna todos os
        #       documentos (blocos) cadastrados na cole√ß√£o.
        blocos = colecao_blocos.find()

        # Itera sobre cada bloco encontrado na base de dados.
        for bloco in blocos:

            # Insere um novo bloco na tabela com os valores extra√≠dos do banco de dados.
            # `"values=(str(bloco["_id"]), bloco["nome"], bloco["quantidade"])"`
            # - `bloco["_id"]`: Converte o identificador √∫nico do bloco em string.
            # - `bloco["nome"]`: Exibe o nome do bloco.
            # - `bloco["quantidade"]`: Exibe a quantidade de vagas dispon√≠veis.
            tabela_blocos.insert("",
                                 "end",
                                 values=(str(bloco["_id"]), bloco["nome"], bloco["quantidade"]))


    # Define a fun√ß√£o `cadastrar()` para adicionar um
    #       novo bloco de estacionamento.
    def cadastrar():

        # Obt√©m o valor do campo `campo_nome`, removendo
        #       espa√ßos extras no in√≠cio e no final.
        nome = campo_nome.get().strip()

        # Obt√©m o valor do campo `campo_qtd_vagas`, removendo
        #       espa√ßos extras no in√≠cio e no final.
        quantidade = campo_qtd_vagas.get().strip()

        # Verifica se os campos `nome` ou `quantidade` est√£o vazios.
        # Se estiverem vazios, exibe uma mensagem de erro e
        #       interrompe a execu√ß√£o da fun√ß√£o.
        if not nome or not quantidade:
            messagebox.showerror("Erro",
                                 "Nome e quantidade s√£o obrigat√≥rios!",
                                 parent=janela)
            return

        # Tenta converter o valor da vari√°vel `quantidade`
        #       para um n√∫mero inteiro
        try:

            # Converte a string `quantidade` para inteiro e armazena em `qtd_int`
            qtd_int = int(quantidade)

            # Verifica se o n√∫mero convertido √© menor que 1
            if qtd_int < 1:

                # Exibe uma mensagem de erro informando que a quantidade de
                #       vagas deve ser maior que 0
                messagebox.showerror("Erro",
                                     "A quantidade de vagas deve ser maior que 0!",
                                     parent=janela)

                # Encerra a fun√ß√£o, impedindo a continua√ß√£o do cadastro
                return

        # Caso ocorra um erro na convers√£o (quando o usu√°rio
        #       digitar um valor n√£o num√©rico)
        except ValueError:

            # Exibe uma mensagem de erro informando que a quantidade
            #       precisa ser um n√∫mero inteiro v√°lido
            messagebox.showerror("Erro",
                                 "Quantidade inv√°lida! Digite um n√∫mero inteiro.",
                                 parent=janela)

            # Encerra a fun√ß√£o, impedindo a continua√ß√£o do cadastro
            return

        # Verifica se o nome do bloco j√° existe no banco de dados antes de cadastr√°-lo
        # Procura um documento com o mesmo nome na cole√ß√£o `colecao_blocos`
        if colecao_blocos.find_one({"nome": nome}):

            # Se encontrar um bloco j√° cadastrado com o mesmo nome,
            #       exibe uma mensagem de erro
            messagebox.showerror("Erro",
                                 "Este bloco j√° est√° cadastrado!",
                                 parent=janela)

            # Encerra a fun√ß√£o, impedindo a duplica√ß√£o de
            #       blocos no banco de dados
            return

        # Insere um novo documento na cole√ß√£o `colecao_blocos`
        #       com os dados do bloco.
        # O documento cont√©m o nome do bloco e a quantidade de vagas.
        colecao_blocos.insert_one({"nome": nome, "quantidade": qtd_int})

        # Chama a fun√ß√£o `criar_vagas` para gerar as vagas
        #       associadas a esse bloco
        # A fun√ß√£o recebe como par√¢metros o nome do bloco e a
        #       quantidade de vagas a serem criadas
        criar_vagas(nome, qtd_int)

        # Exibe uma mensagem informando que o bloco foi cadastrado
        #       com sucesso e que as vagas foram geradas
        messagebox.showinfo("Sucesso",
                            "Bloco cadastrado e vagas geradas!",
                            parent=janela)

        # Atualiza a lista de blocos na interface, chamando a
        #       fun√ß√£o respons√°vel por recarregar os dados
        carregar_lista()

        # Limpa os campos do formul√°rio para permitir um novo
        #       cadastro sem interfer√™ncia de dados anteriores
        limpar_campos()


    # Define a fun√ß√£o `criar_vagas` para criar vagas de
    #       estacionamento associadas a um bloco espec√≠fico.
    # `bloco`: Nome do bloco onde as vagas ser√£o criadas.
    # `qtd`: N√∫mero total de vagas a serem criadas.
    def criar_vagas(bloco, qtd):

        # Remove todas as vagas existentes associadas ao bloco
        #       informado antes de criar novas.
        # `delete_many({"bloco": bloco})` apaga todas as vagas que
        #       pertencem ao bloco para evitar duplica√ß√£o.
        colecao_vagas.delete_many({"bloco": bloco})

        # Loop para criar a quantidade de vagas especificada.
        # `range(1, qtd + 1)`: Gera n√∫meros de 1 at√© `qtd`,
        #       garantindo a sequ√™ncia das vagas.
        for i in range(1, qtd + 1):

            # Insere uma nova vaga no banco de dados.
            # `insert_one()` adiciona um novo documento contendo as informa√ß√µes da vaga.
            # `"bloco": bloco` associa a vaga ao bloco correspondente.
            # `"numero_vaga": str(i)` define um n√∫mero sequencial para
            #       cada vaga (convertido para string).
            # `"status": "Livre"` indica que a vaga est√° dispon√≠vel para uso imediato.
            colecao_vagas.insert_one({
                "bloco": bloco,
                "numero_vaga": str(i),
                "status": "Livre"
            })


    # Define a fun√ß√£o para alterar um bloco existente
    # `def alterar():` indica que essa fun√ß√£o ser√° chamada ao
    #       alterar um bloco selecionado na tabela.
    def alterar():

        # Obt√©m a linha selecionada na tabela de blocos
        # `selecionado = tabela_blocos.selection()` armazena a sele√ß√£o do usu√°rio.
        selecionado = tabela_blocos.selection()

        # Verifica se algum bloco foi selecionado
        # `if not selecionado:` impede que a altera√ß√£o
        #       prossiga se nada for selecionado.
        if not selecionado:

            # Exibe uma mensagem de erro caso nenhum bloco tenha sido selecionado.
            # `messagebox.showerror("Erro", "Selecione um bloco para
            #       alterar!", parent=janela)` informa o usu√°rio sobre a necessidade de sele√ß√£o.
            messagebox.showerror("Erro",
                                 "Selecione um bloco para alterar!",
                                 parent=janela)

            # Encerra a fun√ß√£o sem continuar a execu√ß√£o.
            return

        # Obt√©m os valores da linha selecionada na tabela
        # `valores = tabela_blocos.item(selecionado[0], "values")` coleta os
        #       dados do bloco escolhido.
        valores = tabela_blocos.item(selecionado[0], "values")

        # Extrai o ID do bloco selecionado
        # `_id = valores[0]` armazena o ID para realizar a
        #       altera√ß√£o correta no banco de dados.
        _id = valores[0]

        # Obt√©m o nome do bloco digitado no campo de entrada
        # `nome = campo_nome.get().strip()` captura o nome, removendo espa√ßos extras.
        nome = campo_nome.get().strip()

        # Obt√©m a quantidade de vagas digitada no campo de entrada
        # `quantidade = campo_qtd_vagas.get().strip()` captura a quantidade,
        #       tamb√©m removendo espa√ßos extras.
        quantidade = campo_qtd_vagas.get().strip()

        # Verifica se os campos Nome e Quantidade est√£o preenchidos.
        # `if not nome or not quantidade:` impede que a fun√ß√£o
        #       continue caso um dos campos esteja vazio.
        if not nome or not quantidade:

            # Exibe uma mensagem de erro informando que Nome e
            #       Quantidade s√£o obrigat√≥rios.
            # `messagebox.showerror("Erro", "Nome e quantidade s√£o
            #       obrigat√≥rios!", parent=janela)` exibe o alerta dentro da janela correta.
            messagebox.showerror("Erro",
                                 "Nome e quantidade s√£o obrigat√≥rios!",
                                 parent=janela)

            # `return` interrompe a execu√ß√£o da fun√ß√£o
            #       para evitar erros futuros.
            return

        # Tenta converter a quantidade digitada para um n√∫mero inteiro.
        # Usa `try-except` para capturar erros caso o
        #       usu√°rio insira um valor inv√°lido.
        try:

            # Converte a entrada `quantidade` para um n√∫mero inteiro.
            # `qtd_int = int(quantidade)` assegura que o valor seja num√©rico.
            qtd_int = int(quantidade)

            # Verifica se a quantidade de vagas √© menor que 1.
            # `if qtd_int < 1:` impede que o usu√°rio cadastre um bloco sem vagas.
            if qtd_int < 1:

                # Exibe uma mensagem de erro informando que a
                #       quantidade deve ser maior que 0.
                # `messagebox.showerror("Erro", "A quantidade de vagas
                #       deve ser maior que 0!", parent=janela)` exibe um alerta apropriado.
                messagebox.showerror("Erro",
                                     "A quantidade de vagas deve ser maior que 0!",
                                     parent=janela)

                # `return` interrompe a execu√ß√£o da fun√ß√£o
                #       se a quantidade for inv√°lida.
                return

        # Captura erro caso o usu√°rio digite um valor
        #       que n√£o seja um n√∫mero inteiro.
        # `except ValueError:` ser√° acionado quando a
        #       convers√£o para inteiro falhar.
        except ValueError:

            # Exibe uma mensagem de erro informando que a quantidade
            #       precisa ser um n√∫mero inteiro.
            # `messagebox.showerror("Erro", "Quantidade inv√°lida! Digite um
            #       n√∫mero inteiro.", parent=janela)` informa ao usu√°rio que o valor digitado n√£o √© v√°lido.
            messagebox.showerror("Erro",
                                 "Quantidade inv√°lida! Digite um n√∫mero inteiro.",
                                 parent=janela)

            # `return` interrompe a fun√ß√£o para evitar
            #       problemas com valores inv√°lidos.
            return

        # Atualiza o bloco existente no banco de dados.
        # `{"_id": ObjectId(_id)}` filtra o bloco pelo seu
        #       identificador √∫nico.
        # `{"$set": {"nome": nome, "quantidade": qtd_int}}` define os
        #       novos valores para Nome e Quantidade.
        colecao_blocos.update_one({"_id": ObjectId(_id)},
                                  {"$set": {"nome": nome,
                                            "quantidade": qtd_int}})

        # Chama a fun√ß√£o `criar_vagas(nome, qtd_int)` para
        #       garantir que a quantidade de vagas do bloco esteja correta.
        criar_vagas(nome, qtd_int)

        # Exibe uma mensagem informando que o bloco foi atualizado com sucesso.
        # `title="Sucesso"` define o t√≠tulo da caixa de mensagem.
        # `message="Bloco alterado e vagas atualizadas!"` exibe o
        #       texto informativo ao usu√°rio.
        # `parent=janela` garante que a mensagem apare√ßa na janela correta.
        messagebox.showinfo("Sucesso",
                            "Bloco alterado e vagas atualizadas!",
                            parent=janela)

        # Atualiza a interface carregando novamente a
        #       lista de blocos na tabela.
        carregar_lista()

        # Limpa os campos de entrada para evitar que os
        #       dados do √∫ltimo bloco editado fiquem na tela.
        limpar_campos()


    # Define a fun√ß√£o `excluir`, respons√°vel por
    #       remover um bloco selecionado na tabela.
    def excluir():

        # Obt√©m o bloco selecionado na tabela.
        # `tabela_blocos.selection()` retorna a lista de itens selecionados.
        # Se nenhum item estiver selecionado, exibe uma mensagem de
        #       erro e interrompe a execu√ß√£o.
        selecionado = tabela_blocos.selection()
        if not selecionado:

            # Exibe uma mensagem de erro informando que √©
            #       necess√°rio selecionar um bloco antes de excluir.
            # `title="Erro"` define o t√≠tulo da mensagem.
            # `message="Selecione um bloco para excluir!"` informa o motivo da falha.
            # `parent=janela` define que a mensagem pertence √† janela principal.
            messagebox.showerror("Erro",
                                 "Selecione um bloco para excluir!",
                                 parent=janela)
            return

        # Obt√©m os valores do item selecionado na tabela.
        # `tabela_blocos.item(selecionado[0], "values")` retorna os
        #       dados do primeiro item selecionado.
        valores = tabela_blocos.item(selecionado[0], "values")

        # Armazena o identificador √∫nico do bloco, necess√°rio para
        #       realizar a exclus√£o no banco de dados.
        _id = valores[0]

        # Exclui o bloco selecionado no banco de dados.
        # `delete_one({"_id": ObjectId(_id)})` remove o documento
        #       cujo `_id` corresponde ao bloco selecionado.
        colecao_blocos.delete_one({"_id": ObjectId(_id)})

        # Exibe uma mensagem informando que o bloco foi exclu√≠do com sucesso.
        # `title="Sucesso"` define o t√≠tulo da mensagem.
        # `message="Bloco exclu√≠do!"` informa o usu√°rio sobre a exclus√£o.
        # `parent=janela` associa a mensagem √† janela principal.
        messagebox.showinfo("Sucesso",
                            "Bloco exclu√≠do!",
                            parent=janela)

        # Atualiza a tabela para refletir a remo√ß√£o do bloco.
        # `carregar_lista()` recarrega os dados na interface.
        carregar_lista()

        # Limpa os campos de entrada para evitar inconsist√™ncias na interface.
        # `limpar_campos()` remove qualquer dado que ainda esteja
        #       preenchido nos campos do formul√°rio.
        limpar_campos()


    # Define a fun√ß√£o `limpar_campos` para limpar os campos do
    #       formul√°rio e remover a sele√ß√£o na tabela.
    def limpar_campos():

        # Apaga o conte√∫do do campo de entrada do nome do bloco.
        # `delete(0, tk.END)`: Remove qualquer texto existente no campo.
        campo_nome.delete(0, tk.END)

        # Apaga o conte√∫do do campo de entrada da quantidade de vagas.
        # `delete(0, tk.END)`: Garante que o campo fique vazio para nova entrada.
        campo_qtd_vagas.delete(0, tk.END)

        # Remove a sele√ß√£o na tabela de blocos.
        # `selection_remove(*tabela_blocos.selection())`: Desmarca
        #       qualquer item selecionado na tabela.
        tabela_blocos.selection_remove(*tabela_blocos.selection())


    # Define a fun√ß√£o `preencher_campos` que ser√° acionada ao
    #       clicar em um bloco da tabela.
    # `event`: Par√¢metro que representa o evento de clique na tabela.
    def preencher_campos(event):

        # Obt√©m a linha selecionada na tabela de blocos.
        # `tabela_blocos.selection()`: Retorna a sele√ß√£o atual da tabela.
        selecionado = tabela_blocos.selection()

        # Verifica se alguma linha foi selecionada.
        # Se nenhuma linha foi selecionada, a fun√ß√£o encerra sem executar nada.
        if not selecionado:
            return

        # Obt√©m os valores da linha selecionada.
        # `tabela_blocos.item(selecionado[0], "values")`: Obt√©m os
        #       valores armazenados na linha selecionada.
        valores = tabela_blocos.item(selecionado[0], "values")

        # Preenche o campo de nome do bloco com o valor
        #       correspondente da linha selecionada.
        # `delete(0, tk.END)`: Remove qualquer valor existente no campo.
        # `insert(0, valores[1])`: Insere o novo valor do nome do bloco.
        campo_nome.delete(0, tk.END)
        campo_nome.insert(0, valores[1])

        # Preenche o campo de quantidade de vagas com o valor
        #       correspondente da linha selecionada.
        # `delete(0, tk.END)`: Remove qualquer valor existente no campo.
        # `insert(0, valores[2])`: Insere o novo valor da quantidade de vagas.
        campo_qtd_vagas.delete(0, tk.END)
        campo_qtd_vagas.insert(0, valores[2])


    # Cria uma lista contendo os bot√µes e suas respectivas fun√ß√µes.
    # Cada tupla cont√©m o texto a ser exibido no bot√£o e a fun√ß√£o correspondente.
    botoes = [

        ("‚úÖ Cadastrar", cadastrar),  # Bot√£o para cadastrar um novo bloco.
        ("‚úèÔ∏è Alterar", alterar),  # Bot√£o para alterar um bloco existente.
        ("‚ùå Excluir", excluir),  # Bot√£o para excluir um bloco.
        ("üßπ Limpar", limpar_campos)  # Bot√£o para limpar os campos do formul√°rio.

    ]

    # Loop para criar e posicionar os bot√µes na interface gr√°fica.
    # `enumerate(botoes)`: Retorna o √≠ndice `i` e os
    #       valores `texto` e `comando` da tupla.
    for i, (texto, comando) in enumerate(botoes):

        # Cria um bot√£o usando a biblioteca `ttk`.
        # `container_botoes`: Define o cont√™iner onde o bot√£o ser√° inserido.
        # `text=texto`: Define o texto do bot√£o.
        # `command=comando`: Associa a fun√ß√£o correspondente ao bot√£o.
        # `width=15`: Define a largura do bot√£o.
        # `.grid(row=0, column=i, padx=8, pady=5)`: Posiciona o bot√£o na
        #       linha 0, coluna `i`, com espa√ßamento horizontal (`padx=8`) e vertical (`pady=5`).
        ttk.Button(container_botoes,
                   text=texto,
                   command=comando,
                   width=15).grid(row=0, column=i, padx=8, pady=5)

    # Define as colunas da tabela de blocos.
    # "ID" -> Identificador √∫nico do bloco.
    # "Nome" -> Nome do bloco cadastrado.
    # "Quantidade" -> Quantidade de vagas dispon√≠veis no bloco.
    colunas = ("ID", "Nome", "Quantidade")

    # Cria um widget `Treeview` para exibir a lista de blocos na interface.
    # `container_principal`: Define o cont√™iner onde a tabela ser√° inserida.
    # `columns=colunas`: Define as colunas que a tabela ter√°.
    # `show="headings"`: Oculta a primeira coluna padr√£o e exibe
    #       apenas os cabe√ßalhos das colunas definidas.
    # `height=10`: Define o n√∫mero de linhas vis√≠veis na tabela.
    tabela_blocos = ttk.Treeview(container_principal,
                                 columns=colunas,
                                 show="headings",
                                 height=10)

    # Expande a tabela para preencher todo o espa√ßo dispon√≠vel no cont√™iner.
    # `fill="both"`: Faz com que a tabela preencha tanto
    #       horizontal quanto verticalmente o espa√ßo dispon√≠vel.
    # `expand=True`: Permite que a tabela se expanda dentro do cont√™iner.
    # `padx=10, pady=10`: Adiciona um espa√ßamento interno
    #       de 10 pixels nas laterais e na parte superior/inferior.
    tabela_blocos.pack(fill="both", expand=True, padx=10, pady=10)

    # Associa um evento de duplo clique √† fun√ß√£o `preencher_campos`.
    # Sempre que um item for duplamente clicado na tabela, os
    #       dados desse item ser√£o carregados nos campos do formul√°rio.
    tabela_blocos.bind("<Double-1>", preencher_campos)

    # Chama a fun√ß√£o `carregar_lista()` para preencher a tabela
    #       com os blocos armazenados no banco de dados.
    carregar_lista()

    # Inicia o loop principal da interface gr√°fica,
    #       garantindo que a janela permane√ßa aberta e interativa.
    janela.mainloop()


# -------------------------------------------------------------------------
# CRUD de Ve√≠culos (com bot√£o HIST√ìRICO)
# -------------------------------------------------------------------------

# Define a fun√ß√£o 'tela_veiculos_crud' para gerenciar ve√≠culos na janela.
# O par√¢metro 'janela_pai' recebe a janela que abrir√° a
#       nova janela de gerenciamento de ve√≠culos.
def tela_veiculos_crud(janela_pai):

    # Cria uma nova janela de n√≠vel superior (Toplevel) a partir da janela pai.
    # A janela pai √© passada como argumento e a nova
    #       janela ser√° aberta como uma janela independente.
    janela = tk.Toplevel(janela_pai)

    # Define o t√≠tulo da janela como "Gerenciamento de Ve√≠culos".
    # Este t√≠tulo aparece na barra superior da janela, permitindo ao
    #       usu√°rio identificar facilmente a janela.
    janela.title("Gerenciamento de Ve√≠culos")

    # Define o estado da janela como "zoomed", o que faz a janela ser
    #       maximizada automaticamente ao ser aberta.
    # A janela ocupar√° toda a √°rea da tela dispon√≠vel. "zoomed" √©
    #       uma forma de maximizar a janela.
    janela.state("zoomed")

    # Configura o fundo da janela com uma cor cinza claro (#F5F5F5).
    # O c√≥digo hexadecimal "#F5F5F5" define a cor de fundo da
    #       janela, que √© um tom suave de cinza claro.
    # O cinza claro √© uma cor neutra que promove uma interface limpa e f√°cil de usar.
    # Al√©m disso, ele √© suave nos olhos e n√£o causa distra√ß√£o ao usu√°rio.
    janela.configure(bg="#F5F5F5")  # Cor de fundo cinza claro (hex: #F5F5F5)

    # Container principal
    # Cria um container principal dentro da janela. O container vai
    #       armazenar todos os outros widgets dentro dele.
    # O par√¢metro 'bg="#F5F5F5"' define a cor de fundo do container,
    #       utilizando a cor cinza claro.
    # O 'expand=True' faz com que o container se expanda para
    #       ocupar o m√°ximo de espa√ßo dispon√≠vel.
    # 'fill="both"' garante que o container se estique tanto
    #       horizontal quanto verticalmente.
    container_principal = tk.Frame(janela, bg="#F5F5F5")
    container_principal.pack(expand=True, fill="both")

    # Cria um r√≥tulo (label) para exibir o t√≠tulo "üöó Gerenciar Ve√≠culos".
    # O 'text' define o texto exibido, neste caso o emoji de carro seguido do t√≠tulo.
    # A fonte √© definida como "Arial", tamanho 22 e negrito ("bold")
    #       para tornar o t√≠tulo destacado.
    # 'foreground="#2E86C1"' define a cor do texto, neste caso um tom
    #       de azul claro (c√≥digo hexadecimal #2E86C1).
    # 'background="#F5F5F5"' define a cor de fundo do r√≥tulo, que √© a
    #       mesma cor do fundo do container, criando uma harmonia visual.
    rotulo_titulo = ttk.Label(
        container_principal,
        text="üöó Gerenciar Ve√≠culos",  # Define o texto do t√≠tulo, incluindo um emoji de carro.
        font=("Arial", 22, "bold"),  # Define a fonte do t√≠tulo como Arial, tamanho 22, negrito.
        foreground="#2E86C1",  # Define a cor do texto como azul claro.
        background="#F5F5F5"  # Define a cor de fundo como o mesmo cinza claro do container.
    )

    # Exibe o r√≥tulo na tela.
    # `pady=10` adiciona 10 pixels de espa√ßamento vertical ao redor do r√≥tulo,
    # garantindo que o t√≠tulo tenha uma boa separa√ß√£o dos outros elementos.
    rotulo_titulo.pack(pady=10)

    # Cria um container para o formul√°rio dentro do container principal.
    # O container do formul√°rio vai abrigar os campos de entrada,
    #       bot√µes e outros elementos de intera√ß√£o.
    container_formulario = ttk.Frame(container_principal)

    # Exibe o container do formul√°rio na tela.
    # `pady=10` adiciona 10 pixels de espa√ßamento vertical ao redor do container,
    # garantindo que o formul√°rio n√£o fique colado ao t√≠tulo ou a outros elementos.
    container_formulario.pack(pady=10)

    # Campos: Placa
    # Cria um r√≥tulo (label) para o campo de "Placa".
    # `text="Placa:"` define o texto que ser√° exibido no r√≥tulo,
    #       indicando o campo para inserir a placa do ve√≠culo.
    # `font=("Arial", 12)` define a fonte como Arial com
    #       tamanho 12 para garantir boa legibilidade.
    # `row=0, column=0` posiciona o r√≥tulo na linha 0, coluna 0 da grid.
    # `padx=5` adiciona 5 pixels de espa√ßamento horizontal ao redor do r√≥tulo.
    # `pady=5` adiciona 5 pixels de espa√ßamento vertical ao redor do r√≥tulo.
    # `sticky="e"` alinha o texto √† direita (East) dentro da c√©lula da grid.
    ttk.Label(container_formulario,
              text="Placa:",
              font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (Entry) para que o usu√°rio insira a placa do ve√≠culo.
    # `width=20` define a largura do campo de entrada para 20 caracteres.
    # `font=("Arial", 12)` define a fonte do texto dentro do campo de
    #       entrada como Arial, tamanho 12.
    # `row=0, column=1` posiciona o campo de entrada na linha 0, coluna 1
    #       da grid, ao lado do r√≥tulo "Placa".
    # `padx=5` adiciona 5 pixels de espa√ßamento horizontal ao redor do campo de entrada.
    # `pady=5` adiciona 5 pixels de espa√ßamento vertical ao redor do campo de entrada.
    campo_placa = ttk.Entry(container_formulario, width=20, font=("Arial", 12))
    campo_placa.grid(row=0, column=1, padx=5, pady=5)

    # Campos: Modelo
    # Cria um r√≥tulo (label) para o campo de "Modelo".
    # `text="Modelo:"` define o texto que ser√° exibido no r√≥tulo,
    #       indicando o campo para inserir o modelo do ve√≠culo.
    # `font=("Arial", 12)` define a fonte como Arial com tamanho 12,
    #       garantindo boa legibilidade.
    # `row=1, column=0` posiciona o r√≥tulo na linha 1, coluna 0 da grid.
    # `padx=5` adiciona 5 pixels de espa√ßamento horizontal ao redor do r√≥tulo.
    # `pady=5` adiciona 5 pixels de espa√ßamento vertical ao redor do r√≥tulo.
    # `sticky="e"` alinha o texto √† direita (East) dentro da c√©lula da grid.
    ttk.Label(container_formulario,
              text="Modelo:",
              font=("Arial", 12)).grid(row=1, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (Entry) para que o usu√°rio insira o modelo do ve√≠culo.
    # `width=30` define a largura do campo de entrada para 30 caracteres,
    #       proporcionando um espa√ßo adequado para modelos mais longos.
    # `font=("Arial", 12)` define a fonte do texto dentro do campo de entrada
    #       como Arial, tamanho 12, para manter a consist√™ncia.
    # `row=1, column=1` posiciona o campo de entrada na linha 1, coluna 1 da
    #       grid, ao lado do r√≥tulo "Modelo".
    # `padx=5` adiciona 5 pixels de espa√ßamento horizontal ao redor do campo de entrada.
    # `pady=5` adiciona 5 pixels de espa√ßamento vertical ao redor do campo de entrada.
    campo_modelo = ttk.Entry(container_formulario, width=30, font=("Arial", 12))
    campo_modelo.grid(row=1, column=1, padx=5, pady=5)

    # Campos: Cor
    # Cria um r√≥tulo (label) para o campo de "Cor".
    # `text="Cor:"` define o texto exibido no r√≥tulo, indicando o
    #       campo para inserir a cor do ve√≠culo.
    # `font=("Arial", 12)` define a fonte do r√≥tulo como Arial,
    #       tamanho 12, para boa legibilidade.
    # `row=2, column=0` posiciona o r√≥tulo na linha 2, coluna 0 da
    #       grid, abaixo dos outros campos.
    # `padx=5` adiciona 5 pixels de espa√ßamento horizontal ao redor do r√≥tulo.
    # `pady=5` adiciona 5 pixels de espa√ßamento vertical ao redor do r√≥tulo.
    # `sticky="e"` alinha o texto √† direita (East) dentro da c√©lula da grid.
    ttk.Label(container_formulario,
              text="Cor:",
              font=("Arial", 12)).grid(row=2, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (Entry) para que o usu√°rio insira a cor do ve√≠culo.
    # `width=20` define a largura do campo de entrada para 20 caracteres, o
    #       que √© suficiente para a cor do ve√≠culo.
    # `font=("Arial", 12)` define a fonte do texto dentro do campo de
    #       entrada como Arial, tamanho 12, para manter a consist√™ncia
    #       com os outros campos.
    # `row=2, column=1` posiciona o campo de entrada na linha 2,
    #       coluna 1 da grid, ao lado do r√≥tulo "Cor".
    # `padx=5` adiciona 5 pixels de espa√ßamento horizontal ao redor do campo de entrada.
    # `pady=5` adiciona 5 pixels de espa√ßamento vertical ao redor do campo de entrada.
    campo_cor = ttk.Entry(container_formulario, width=20, font=("Arial", 12))
    campo_cor.grid(row=2, column=1, padx=5, pady=5)

    # Campos: Categoria
    # Cria um r√≥tulo (label) para o campo de "Categoria".
    # `text="Categoria:"` define o texto exibido no r√≥tulo, indicando o
    #       campo para inserir a categoria do ve√≠culo.
    # `font=("Arial", 12)` define a fonte do r√≥tulo como Arial,
    #       tamanho 12, para garantir boa legibilidade.
    # `row=3, column=0` posiciona o r√≥tulo na linha 3, coluna 0 da grid,
    #       abaixo dos outros campos.
    # `padx=5` adiciona 5 pixels de espa√ßamento horizontal ao redor do r√≥tulo.
    # `pady=5` adiciona 5 pixels de espa√ßamento vertical ao redor do r√≥tulo.
    # `sticky="e"` alinha o texto √† direita (East) dentro da c√©lula da grid.
    ttk.Label(container_formulario,
              text="Categoria:",
              font=("Arial", 12)).grid(row=3, column=0, padx=5, pady=5, sticky="e")

    # Cria uma Combobox para selecionar a categoria do ve√≠culo.
    # `container_formulario` especifica o cont√™iner onde a combobox ser√° exibida.
    # `values=["Carro", "Moto", "Caminh√£o"]` define as op√ß√µes dispon√≠veis
    #       para o usu√°rio escolher. As op√ß√µes s√£o "Carro", "Moto" e "Caminh√£o".
    # `state="readonly"` garante que o usu√°rio s√≥ pode selecionar uma
    #       op√ß√£o da lista, e n√£o digitar livremente.
    # `width=28` define a largura da Combobox para 28 caracteres,
    #       ajustando o tamanho do campo de acordo com o conte√∫do.
    combo_categoria = ttk.Combobox(container_formulario,
                                    values=["Carro", "Moto", "Caminh√£o"],
                                    state="readonly",
                                    width=28)

    # Posiciona a Combobox na grid, na linha 3 e coluna 1,
    #       logo ao lado do r√≥tulo "Categoria".
    # `padx=5` e `pady=5` adicionam 5 pixels de espa√ßamento horizontal e
    #       vertical, garantindo alinhamento com os outros campos.
    combo_categoria.grid(row=3, column=1, padx=5, pady=5)

    # Define o valor inicial da Combobox como "Carro",
    #       que √© a primeira op√ß√£o da lista.
    # Isso assegura que, ao abrir o formul√°rio, a
    #       categoria "Carro" j√° estar√° selecionada.
    combo_categoria.set("Carro")

    # Campos: Propriet√°rio (Cliente)
    # Cria um r√≥tulo (label) para o campo "Propriet√°rio (Cliente)".
    # `container_formulario` especifica o cont√™iner onde o r√≥tulo ser√° exibido.
    # `text="Propriet√°rio (Cliente):"` define o texto que ser√°
    #       exibido no r√≥tulo, informando que este campo ser√° para
    #       inserir o nome do propriet√°rio (cliente).
    # `font=("Arial", 12)` define a fonte do texto, utilizando a
    #       fonte "Arial" no tamanho 12.
    # `padx=5` e `pady=5` adicionam 5 pixels de espa√ßamento horizontal e
    #       vertical ao redor do r√≥tulo, garantindo que ele fique bem posicionado.
    # `sticky="e"` alinha o r√≥tulo √† direita (este alinhamento √© √∫til
    #       quando o texto √© mais longo ou voc√™ quer garantir que o texto
    #       seja bem alinhado com os outros campos).
    ttk.Label(container_formulario,
              text="Propriet√°rio (Cliente):",
              font=("Arial", 12)).grid(row=4, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de sele√ß√£o (Combobox) para o "Propriet√°rio (Cliente)".
    # `container_formulario` define o cont√™iner onde o Combobox ser√°
    #       colocado, que √© a √°rea do formul√°rio.
    # `state="readonly"` significa que o campo ser√° somente para leitura, ou
    #       seja, o usu√°rio n√£o poder√° digitar, apenas selecionar uma op√ß√£o.
    # `width=28` define a largura do Combobox, fazendo com que ele seja
    #       suficientemente largo para exibir o nome do propriet√°rio ou cliente de forma leg√≠vel.
    combo_proprietario = ttk.Combobox(container_formulario,
                                      state="readonly",
                                      width=28)

    # Adiciona o Combobox ao layout do formul√°rio, no qual a posi√ß√£o √©
    #       determinada pela grade (grid).
    # `row=4, column=1` posiciona o Combobox na linha 4 e coluna 1, ou
    #       seja, ele ficar√° ao lado do r√≥tulo "Propriet√°rio (Cliente)".
    # `padx=5, pady=5` adiciona um pequeno espa√ßo (5 pixels) de
    #       preenchimento (margem) ao redor do Combobox, tornando o layout mais agrad√°vel e espa√ßado.
    combo_proprietario.grid(row=4, column=1, padx=5, pady=5)

    # Fun√ß√£o para carregar a lista de clientes no Combobox "Propriet√°rio (Cliente)"
    # `carregar_clientes_no_combo()` √© respons√°vel por buscar todos os
    #       clientes da cole√ß√£o e preencher o Combobox com o nome e CPF de cada cliente.
    def carregar_clientes_no_combo():

        # Realiza a busca de todos os documentos na cole√ß√£o "colecao_clientes"
        # `colecao_clientes.find()` retorna todos os clientes cadastrados no banco de dados.
        clientes = colecao_clientes.find()

        # Cria uma lista de strings formatadas no formato "CPF - Nome",
        #       para facilitar a visualiza√ß√£o no Combobox.
        # A list comprehension percorre todos os clientes e cria
        #       uma string no formato "cpf - nome" para cada um.
        lista_clientes = [f"{cliente['cpf']} - {cliente['nome']}" for cliente in clientes]

        # Preenche o Combobox com a lista de clientes formatada.
        # `combo_proprietario["values"]` √© onde a lista de
        #       op√ß√µes (clientes) ser√° atribu√≠da ao Combobox.
        combo_proprietario["values"] = lista_clientes

    # Chama a fun√ß√£o para carregar os clientes no Combobox
    #       assim que a tela for carregada.
    carregar_clientes_no_combo()

    # Cria√ß√£o do cont√™iner (frame) onde os bot√µes de CRUD (Criar,
    #       Ler, Atualizar, Excluir) ser√£o colocados.
    # O `container_botoes` serve como um "cont√™iner" para
    #       organizar os bot√µes na interface gr√°fica.
    container_botoes = ttk.Frame(container_principal)

    # Empacota o cont√™iner (frame) dos bot√µes na interface, e
    #       define um preenchimento vertical de 10 pixels.
    # `pady=10` adiciona um espa√ßamento de 10 pixels ao redor do
    #       cont√™iner dos bot√µes, criando um espa√ßo visual
    #       agrad√°vel entre os elementos.
    container_botoes.pack(pady=10)


    # Fun√ß√£o para cadastrar um novo ve√≠culo no banco de dados.
    # `cadastrar()` coleta os dados do formul√°rio e insere um
    #       novo registro na cole√ß√£o de ve√≠culos.
    def cadastrar():

        # Obt√©m e formata a entrada do campo "Placa".
        # `campo_placa.get()` captura o valor digitado pelo usu√°rio.
        # `.strip()` remove espa√ßos em branco no in√≠cio e no final da string.
        # `.upper()` converte todos os caracteres para mai√∫sculas,
        #       garantindo que as placas fiquem padronizadas.
        placa = campo_placa.get().strip().upper()

        # Obt√©m e formata a entrada do campo "Modelo".
        # `.strip()` garante que espa√ßos extras sejam removidos
        #       antes e depois do texto.
        modelo = campo_modelo.get().strip()

        # Obt√©m e formata a entrada do campo "Cor".
        # `.strip()` remove espa√ßos desnecess√°rios.
        cor = campo_cor.get().strip()

        # Obt√©m o valor selecionado no Combobox "Categoria".
        # `.strip()` assegura que n√£o haja espa√ßos em branco adicionais.
        categoria = combo_categoria.get().strip()

        # Obt√©m o valor selecionado no Combobox "Propriet√°rio (Cliente)".
        # `.strip()` evita espa√ßos desnecess√°rios.
        proprietario = combo_proprietario.get().strip()

        # Valida se os campos obrigat√≥rios "Placa" e "Modelo"
        #       foram preenchidos.
        # Se um desses campos estiver vazio, exibe uma
        #       mensagem de erro e interrompe o cadastro.
        if not placa or not modelo:
            messagebox.showerror("Erro",
                                 "Placa e Modelo s√£o obrigat√≥rios!",
                                 parent=janela)
            return

        # Insere um novo ve√≠culo na cole√ß√£o do banco de dados.
        # `insert_one()` adiciona um documento com os dados informados.
        # Cada chave representa um campo armazenado no banco.
        colecao_veiculos.insert_one({
            "placa": placa,  # Armazena a placa do ve√≠culo em mai√∫sculas.
            "modelo": modelo,  # Armazena o modelo do ve√≠culo.
            "cor": cor,  # Armazena a cor do ve√≠culo.
            "categoria": categoria,  # Armazena a categoria do ve√≠culo (Carro, Moto, Caminh√£o).
            "proprietario": proprietario,  # Armazena o propriet√°rio do ve√≠culo.
            "status": "Ativo"  # Define o status inicial do ve√≠culo como "Ativo".
        })

        # Exibe uma mensagem informando que o ve√≠culo foi cadastrado com sucesso.
        # `messagebox.showinfo()` cria uma janela de alerta com a mensagem de sucesso.
        # `parent=janela` define a janela principal como pai da mensagem.
        messagebox.showinfo("Sucesso",
                            "Ve√≠culo cadastrado com sucesso!",
                            parent=janela)

        # Atualiza a lista de ve√≠culos exibida na interface.
        # `carregar_lista()` recarrega os dados do banco e os exibe na tabela.
        carregar_lista()

        # Limpa os campos do formul√°rio ap√≥s o cadastro bem-sucedido.
        # `limpar_campos()` redefine todos os campos para seus valores padr√£o.
        limpar_campos()


    # Define a fun√ß√£o para alterar um ve√≠culo cadastrado.
    def alterar():

        # Obt√©m o item selecionado na tabela de ve√≠culos.
        # `selection()` retorna uma lista com os
        #       identificadores dos itens selecionados.
        selecionado = tabela_veiculos.selection()

        # Verifica se algum item foi selecionado.
        # Se a lista estiver vazia, exibe uma mensagem de erro e interrompe a fun√ß√£o.
        if not selecionado:
            messagebox.showerror("Erro",
                                 "Selecione um ve√≠culo!",
                                 parent=janela)
            return

        # Obt√©m os valores do item selecionado na tabela.
        # `item(selecionado[0], "values")` retorna uma tupla com os dados do ve√≠culo.
        valores = tabela_veiculos.item(selecionado[0], "values")

        # O primeiro valor da tupla corresponde ao ID do ve√≠culo no banco de dados.
        _id = valores[0]

        # Atualiza um ve√≠culo no banco de dados usando o ID selecionado
        colecao_veiculos.update_one(

            # Filtra pelo ID do ve√≠culo, convertendo a string para ObjectId
            {"_id": ObjectId(_id)},

            # Define os novos valores para os campos do ve√≠culo
            {"$set": {

                # Obt√©m o valor do campo de placa, remove espa√ßos
                #       extras e converte para mai√∫sculas
                "placa": campo_placa.get().strip().upper(),

                # Obt√©m o modelo do ve√≠culo removendo espa√ßos desnecess√°rios
                "modelo": campo_modelo.get().strip(),

                # Obt√©m a cor do ve√≠culo sem espa√ßos extras
                "cor": campo_cor.get().strip(),

                # Obt√©m a categoria do ve√≠culo removendo espa√ßos extras
                "categoria": combo_categoria.get().strip(),

                # Obt√©m o nome do propriet√°rio do ve√≠culo, garantindo que
                #       n√£o haja espa√ßos indesejados
                "proprietario": combo_proprietario.get().strip()

            }}
        )

        # Exibe uma mensagem informando que a altera√ß√£o foi realizada com sucesso
        messagebox.showinfo("Sucesso", "Ve√≠culo alterado!", parent=janela)

        # Recarrega a lista de ve√≠culos para refletir as altera√ß√µes na interface
        carregar_lista()

        # Limpa os campos do formul√°rio para evitar erros em novas inser√ß√µes
        limpar_campos()


    # Define uma fun√ß√£o para excluir um ve√≠culo do banco de dados.
    def excluir():

        # Obt√©m a sele√ß√£o do usu√°rio na tabela de ve√≠culos.
        selecionado = tabela_veiculos.selection()

        # Verifica se algum ve√≠culo foi selecionado antes de continuar.
        if not selecionado:
            messagebox.showerror("Erro", "Selecione um ve√≠culo!", parent=janela)
            return

        # Obt√©m os valores da linha selecionada na tabela de ve√≠culos.
        valores = tabela_veiculos.item(selecionado[0], "values")

        # O primeiro valor representa o ID do ve√≠culo no banco de dados.
        _id = valores[0]

        # Exibe uma caixa de di√°logo de confirma√ß√£o antes de excluir.
        confirmacao = messagebox.askyesno(
            "Confirma√ß√£o", "Tem certeza que deseja excluir este ve√≠culo?", parent=janela
        )

        # Se o usu√°rio clicar em "N√£o", interrompe a execu√ß√£o da fun√ß√£o.
        if not confirmacao:
            return

        # Remove o ve√≠culo permanentemente do banco de dados.
        colecao_veiculos.delete_one({"_id": ObjectId(_id)})

        # Exibe uma mensagem informando que o ve√≠culo foi removido com sucesso.
        messagebox.showinfo("Sucesso", "Ve√≠culo exclu√≠do do banco de dados!", parent=janela)

        # Atualiza a lista de ve√≠culos na interface gr√°fica para refletir as altera√ß√µes.
        carregar_lista()

        # Limpa os campos do formul√°rio ap√≥s a exclus√£o para evitar confus√£o.
        limpar_campos()


    # Define uma fun√ß√£o para limpar os campos do
    #       formul√°rio de entrada de dados.
    def limpar_campos():

        # Remove qualquer texto digitado no campo de entrada da placa do ve√≠culo.
        # `campo_placa.delete(0, tk.END)` apaga todos os caracteres do campo.
        campo_placa.delete(0, tk.END)

        # Remove qualquer texto digitado no campo de entrada do modelo do ve√≠culo.
        # `campo_modelo.delete(0, tk.END)` apaga o conte√∫do do campo.
        campo_modelo.delete(0, tk.END)

        # Remove qualquer texto digitado no campo de entrada da cor do ve√≠culo.
        # `campo_cor.delete(0, tk.END)` limpa o campo de entrada.
        campo_cor.delete(0, tk.END)

        # Redefine a sele√ß√£o do campo de categoria para "Carro" como padr√£o.
        # `combo_categoria.set("Carro")` define o valor padr√£o no combobox.
        combo_categoria.set("Carro")

        # Limpa a sele√ß√£o do propriet√°rio do ve√≠culo.
        # `combo_proprietario.set("")` define o campo como vazio.
        combo_proprietario.set("")

        # Remove qualquer sele√ß√£o feita na tabela de ve√≠culos.
        # `tabela_veiculos.selection()` retorna os itens selecionados.
        # `selection_remove(*tabela_veiculos.selection())` desmarca os itens selecionados.
        tabela_veiculos.selection_remove(*tabela_veiculos.selection())


    def historico():

        # Obt√©m a linha selecionada na `Treeview` chamada `tabela_veiculos`.
        # `selection()` retorna uma tupla contendo os identificadores das linhas selecionadas.
        selecionado = tabela_veiculos.selection()

        # Verifica se a sele√ß√£o est√° vazia, ou seja, se nenhum ve√≠culo
        #       foi selecionado na tabela.
        # Se nada estiver selecionado, exibe uma mensagem de erro
        #       para o usu√°rio e interrompe a execu√ß√£o da fun√ß√£o.
        if not selecionado:
            messagebox.showerror("Erro",
                                 "Selecione um ve√≠culo!",
                                 parent=janela)

            # Sai da fun√ß√£o sem executar mais nada.
            return

        # Obt√©m os valores do ve√≠culo selecionado na tabela.
        # `item(selecionado[0], "values")` retorna uma tupla com
        #       os valores da linha correspondente.
        valores = tabela_veiculos.item(selecionado[0], "values")

        # Extrai o **ID** do ve√≠culo da tupla de valores.
        # O **ID** √© a chave prim√°ria no banco de dados.
        # O √≠ndice `0` representa o identificador √∫nico do ve√≠culo.
        _id = valores[0]

        # Extrai a **Placa** do ve√≠culo da tupla de valores.
        # A placa √© um identificador importante para pesquisas e exibi√ß√£o.
        placa = valores[1]  # O √≠ndice `1` cont√©m a placa do ve√≠culo.

        # Extrai o **Modelo** do ve√≠culo da tupla de valores.
        # O modelo ajuda a diferenciar ve√≠culos da mesma categoria.
        modelo = valores[2]  # O √≠ndice `2` cont√©m o modelo do ve√≠culo.

        # Chama a fun√ß√£o respons√°vel por abrir a tela de hist√≥rico do ve√≠culo.
        # `tela_historico_veiculo_com_filtro` √© uma fun√ß√£o que
        #       exibe o hist√≥rico do ve√≠culo selecionado.
        # Essa fun√ß√£o recebe como par√¢metros:
        #  - `janela`: A janela principal, usada como janela m√£e da nova tela.
        #  - `placa`: A placa do ve√≠culo selecionado.
        #  - `modelo`: O modelo do ve√≠culo selecionado.
        tela_historico_veiculo_com_filtro(janela, placa, modelo)



    # Define uma fun√ß√£o chamada `preencher_campos` que ser√° chamada
    #       quando o usu√°rio selecionar um item na tabela de ve√≠culos.
    # Essa fun√ß√£o tem o objetivo de preencher os campos do formul√°rio
    #       com os dados do ve√≠culo selecionado.
    def preencher_campos(event):

        # Obt√©m a linha selecionada na `Treeview` chamada `tabela_veiculos`.
        # `selection()` retorna uma tupla com os identificadores dos itens selecionados.
        selecionado = tabela_veiculos.selection()

        # Verifica se a sele√ß√£o est√° vazia, ou seja, se nenhum
        #       ve√≠culo foi selecionado.
        # Caso n√£o tenha sido feita nenhuma sele√ß√£o, a fun√ß√£o
        #       simplesmente retorna e n√£o executa nenhuma a√ß√£o.
        if not selecionado:
            return

        # Obt√©m os valores do item selecionado na tabela.
        # `item(selecionado[0], "values")` retorna uma tupla com
        #       todos os valores da linha correspondente.
        # Os valores est√£o ordenados de acordo com as colunas da tabela.
        valores = tabela_veiculos.item(selecionado[0], "values")

        # Atualiza o campo de entrada da **Placa** do ve√≠culo:
        # Primeiro, apaga qualquer conte√∫do existente no campo `campo_placa`
        #       para garantir que o novo valor n√£o seja adicionado ao antigo.
        campo_placa.delete(0, tk.END)

        # Depois, insere a nova informa√ß√£o obtida da tabela,
        #       correspondente √† **Placa** do ve√≠culo selecionado.
        # O √≠ndice `1` da tupla `valores` representa a placa do ve√≠culo.
        campo_placa.insert(0, valores[1])

        # Atualiza o campo de entrada do **Modelo** do ve√≠culo:
        # Primeiro, limpa qualquer valor antigo no campo `campo_modelo`.
        campo_modelo.delete(0, tk.END)

        # Depois, insere o novo valor correspondente ao **Modelo**
        #       do ve√≠culo selecionado.
        # O √≠ndice `2` da tupla `valores` representa o modelo do ve√≠culo.
        campo_modelo.insert(0, valores[2])

        # Atualiza o campo de entrada da **Cor** do ve√≠culo:
        # Primeiro, apaga qualquer valor antigo que esteja no campo `campo_cor`.
        campo_cor.delete(0, tk.END)

        # Depois, insere o novo valor correspondente √† **Cor** do ve√≠culo selecionado.
        # O √≠ndice `3` da tupla `valores` representa a cor do ve√≠culo.
        campo_cor.insert(0, valores[3])

        # Atualiza o campo **Categoria** do ve√≠culo:
        # Define o valor do `Combobox` `combo_categoria` com a categoria
        #       do ve√≠culo selecionado na tabela.
        # O √≠ndice `4` da tupla `valores` representa a categoria do ve√≠culo.
        combo_categoria.set(valores[4])

        # Atualiza o campo **Propriet√°rio (Cliente)** do ve√≠culo:
        # Define o valor do `Combobox` `combo_proprietario` com o nome do
        #       cliente associado ao ve√≠culo selecionado.
        # O √≠ndice `5` da tupla `valores` representa o propriet√°rio do ve√≠culo.
        combo_proprietario.set(valores[5])


    # Define uma fun√ß√£o para carregar a lista de ve√≠culos na tabela.
    def carregar_lista():

        # Remove todos os itens da tabela de ve√≠culos antes de recarregar os dados.
        # `tabela_veiculos.get_children()` retorna todos os itens presentes na tabela.
        # `tabela_veiculos.delete(*tabela_veiculos.get_children())` apaga todos os itens.
        tabela_veiculos.delete(*tabela_veiculos.get_children())

        # Busca todos os ve√≠culos no banco de dados que n√£o est√£o marcados como "Removido".
        # `colecao_veiculos.find({"status": {"$ne": "Removido"}})` retorna apenas ve√≠culos ativos.
        veiculos = colecao_veiculos.find({"status": {"$ne": "Removido"}})

        # Percorre todos os ve√≠culos encontrados no banco de dados.
        for veiculo in veiculos:

            # Insere um novo ve√≠culo na tabela.
            # `tabela_veiculos.insert("", "end", values=(...))` adiciona
            #       uma nova linha com os dados do ve√≠culo.
            tabela_veiculos.insert(

                # Par√¢metro indicando que o item ser√° inserido na raiz da √°rvore (sem pai).
                "",

                # Adiciona o item ao final da lista.
                "end",
                values=(
                    str(veiculo["_id"]),  # Converte o ID do ve√≠culo para string para exibi√ß√£o na tabela.
                    veiculo["placa"],  # Exibe a placa do ve√≠culo.
                    veiculo["modelo"],  # Exibe o modelo do ve√≠culo.
                    veiculo.get("cor", ""),  # Obt√©m a cor do ve√≠culo, ou usa uma string vazia caso n√£o exista.
                    veiculo.get("categoria", "Carro"),
                    # Obt√©m a categoria do ve√≠culo, padr√£o "Carro" se n√£o estiver presente.
                    veiculo.get("proprietario", "")  # Obt√©m o propriet√°rio do ve√≠culo, se houver.
                )
            )


    # Bot√µes CRUD + Bot√£o Hist√≥rico
    # Lista de bot√µes com seus respectivos textos e fun√ß√µes associadas
    botoes = [
        ("‚úÖ Cadastrar", cadastrar),  # Bot√£o para cadastrar um novo ve√≠culo
        ("‚úèÔ∏è Alterar", alterar),  # Bot√£o para alterar as informa√ß√µes de um ve√≠culo existente
        ("‚ùå Excluir", excluir),  # Bot√£o para marcar um ve√≠culo como removido
        ("üßπ Limpar", limpar_campos),  # Bot√£o para limpar os campos de entrada
        ("üìú Hist√≥rico", historico)  # Bot√£o para exibir o hist√≥rico do ve√≠culo selecionado
    ]

    # Percorre a lista de bot√µes, criando cada um deles e posicionando na tela
    for i, (texto, comando) in enumerate(botoes):

        # Cria um bot√£o usando `ttk.Button`
        # `container_botoes` -> Frame onde os bot√µes ser√£o inseridos
        # `text=texto` -> Define o texto do bot√£o (exemplo: "‚úÖ Cadastrar")
        # `command=comando` -> Define a fun√ß√£o que ser√° executada ao clicar no bot√£o
        # `width=15` -> Define a largura do bot√£o para manter um tamanho padronizado
        botao = ttk.Button(container_botoes, text=texto, command=comando, width=15)

        # Posiciona o bot√£o dentro do `container_botoes` usando `grid()`
        # `row=0` -> Todos os bot√µes ficar√£o na mesma linha
        # `column=i` -> Cada bot√£o ser√° colocado em uma coluna
        #       diferente (√≠ndice `i` da lista)
        # `padx=8` -> Adiciona 8 pixels de espa√ßamento horizontal entre os bot√µes
        # `pady=5` -> Adiciona 5 pixels de espa√ßamento vertical para melhor alinhamento
        botao.grid(row=0, column=i, padx=8, pady=5)

    # Tabela de Ve√≠culos
    # Defini√ß√£o das colunas da tabela (Treeview)
    # A tabela ter√° seis colunas: "ID", "Placa", "Modelo", "Cor", "Categoria" e "Propriet√°rio"
    colunas = ("ID", "Placa", "Modelo", "Cor", "Categoria", "Propriet√°rio")

    # Cria√ß√£o da tabela (Treeview) dentro do container principal
    # `container_principal` -> Frame onde a tabela ser√° inserida
    # `columns=colunas` -> Define as colunas da tabela com base na tupla `colunas`
    # `show="headings"` -> Oculta a primeira coluna (√≠ndice) e exibe apenas os cabe√ßalhos definidos
    # `height=10` -> Define a altura da tabela para exibir
    #       at√© 10 linhas vis√≠veis por vez
    tabela_veiculos = ttk.Treeview(container_principal,
                                   columns=colunas,
                                   show="headings",
                                   height=10)

    # Posicionamento da tabela na tela
    # `fill="both"` -> Faz com que a tabela se expanda para ocupar
    #       toda a largura e altura do container
    # `expand=True` -> Permite que a tabela aumente de tamanho
    #       quando a janela for redimensionada
    # `padx=10, pady=10` -> Adiciona um espa√ßamento de 10 pixels ao redor da tabela
    tabela_veiculos.pack(fill="both", expand=True, padx=10, pady=10)

    # Cabe√ßalhos da tabela
    # Percorre todas as colunas definidas na tabela
    for col in colunas:

        # Define o cabe√ßalho de cada coluna na Treeview
        # `tabela_veiculos.heading(col, text=col, anchor="center")`
        # `col` -> Nome da coluna atual no loop
        # `text=col` -> Define o texto do cabe√ßalho com o nome da coluna
        # `anchor="center"` -> Alinha o texto do cabe√ßalho ao centro
        tabela_veiculos.heading(col, text=col, anchor="center")

        # Define a largura e o alinhamento do conte√∫do dentro de cada coluna
        # `tabela_veiculos.column(col, width=150, anchor="center")`
        # `width=150` -> Define a largura da coluna como 150 pixels
        # `anchor="center"` -> Alinha o conte√∫do da c√©lula ao centro
        tabela_veiculos.column(col, width=150, anchor="center")

    # Define a largura espec√≠fica para a coluna "ID"
    # `tabela_veiculos.column("ID", width=50)`
    # "ID" -> Nome da coluna que ser√° configurada
    # `width=50` -> Define a largura da coluna "ID" como 50 pixels (menor que as outras)
    # Isso √© feito porque o ID √© curto e n√£o precisa de muito espa√ßo
    tabela_veiculos.column("ID", width=50)

    # Associa um evento de duplo clique na tabela
    # `tabela_veiculos.bind("<Double-1>", preencher_campos)`
    # "<Double-1>" -> Representa o evento de **duplo clique** do mouse
    # `preencher_campos` -> Fun√ß√£o que ser√° chamada quando o usu√°rio der duplo clique
    # Esse evento permite que, ao clicar duas vezes em um item da tabela,
    # os campos do formul√°rio sejam preenchidos automaticamente
    #       com os dados do ve√≠culo selecionado
    tabela_veiculos.bind("<Double-1>", preencher_campos)

    # Carrega a lista de ve√≠culos ao abrir a tela
    # `carregar_lista()` √© chamada para preencher a tabela
    #       assim que a janela for aberta
    # Essa fun√ß√£o busca os ve√≠culos no banco de dados e os exibe na tabela
    carregar_lista()

    # Mant√©m a janela aberta em um loop cont√≠nuo
    # `janela.mainloop()`
    # `mainloop()` √© um m√©todo do tkinter que mant√©m a interface gr√°fica ativa,
    # permitindo intera√ß√£o com os bot√µes, campos e tabelas at√© que o usu√°rio a feche
    janela.mainloop()



# Define a fun√ß√£o `tela_historico_veiculo_com_filtro` para exibir o
#       hist√≥rico de um ve√≠culo espec√≠fico
# `parent` -> Janela principal (janela pai) de onde essa tela ser√° aberta
# `placa` -> N√∫mero da placa do ve√≠culo selecionado
# `modelo` -> Nome do modelo do ve√≠culo selecionado
def tela_historico_veiculo_com_filtro(parent, placa, modelo):

    # Cria uma nova janela secund√°ria (janela filha) que ser√°
    #       exibida sobre a janela principal
    # `Toplevel(parent)` cria uma nova janela vinculada √† principal
    janela = Toplevel(parent)

    # Define o t√≠tulo da janela com base na placa do ve√≠culo
    # `title(f"Hist√≥rico do Ve√≠culo {placa}")`
    # O `f""` permite formatar a string, inserindo dinamicamente a
    #       placa do ve√≠culo no t√≠tulo da janela
    janela.title(f"Hist√≥rico do Ve√≠culo {placa}")

    # Centraliza a janela na tela e define seu tamanho (900x600 pixels)
    # `centralizar_janela(janela, 900, 600)`
    # A fun√ß√£o `centralizar_janela` (deve existir no c√≥digo)
    #       posiciona a janela no centro da tela
    # A largura √© de 900 pixels e a altura √© de 600 pixels para
    #       permitir exibi√ß√£o confort√°vel do hist√≥rico
    centralizar_janela(janela, 900, 600)  # Janela mais larga

    # Aplica um estilo visual padronizado √† janela
    # `criar_estilo_geral(janela)` (deve estar definida em
    #       outro trecho do c√≥digo)
    # Essa fun√ß√£o pode configurar cores, fontes e estilos visuais
    #       para tornar a interface mais agrad√°vel
    criar_estilo_geral(janela)

    # Cria um container (`frame_main`) que organiza os
    #       elementos dentro da janela
    # `ttk.Frame(janela)` -> Cria um quadro dentro da janela
    #       onde os componentes ser√£o organizados
    frame_main = ttk.Frame(janela)

    # Empacota (`pack`) o frame principal para preencher
    #       toda a √°rea dispon√≠vel na janela
    # `fill="both"` -> Expande o frame tanto na largura quanto na altura
    # `expand=True` -> Permite que o frame cres√ßa conforme o
    #       usu√°rio redimensiona a janela
    # `padx=10, pady=10` -> Adiciona 10 pixels de espa√ßamento
    #       nas bordas para n√£o deixar tudo grudado
    frame_main.pack(fill="both", expand=True, padx=10, pady=10)

    # Cria um r√≥tulo (`Label`) para exibir o t√≠tulo da
    #       tela de hist√≥rico do ve√≠culo
    lbl_title = ttk.Label(

        # Define o `frame_main` como o container onde o r√≥tulo ser√° inserido
        frame_main,

        # Define o texto do r√≥tulo com o t√≠tulo personalizado do hist√≥rico do ve√≠culo
        # `f"Hist√≥rico de Reservas do Ve√≠culo {placa} ({modelo})"`
        # O `f""` permite formatar dinamicamente a string, inserindo a
        #       placa e o modelo do ve√≠culo
        text=f"Hist√≥rico de Reservas do Ve√≠culo {placa} ({modelo})",

        # Define a fonte do texto do r√≥tulo
        # `("Arial", 16, "bold")` -> Usa a fonte Arial, tamanho 16, e texto em negrito
        font=("Arial", 16, "bold"),

        # Define a cor do texto do r√≥tulo (`foreground`)
        # `"#3F51B5"` -> Azul escuro para destacar o t√≠tulo
        foreground="#3F51B5"

    )

    # Exibe o r√≥tulo na interface
    # `pack(pady=10)` -> Usa o gerenciador de layout `pack`
    # `pady=10` -> Adiciona 10 pixels de espa√ßamento vertical
    #       entre o r√≥tulo e os elementos acima/abaixo
    lbl_title.pack(pady=10)

    # ---------------------------------------------------------------------
    # Frame de Filtros Principais (Data In√≠cio, Data Fim, Status)
    # ---------------------------------------------------------------------

    # Cria um `Frame` (cont√™iner) para os filtros de pesquisa
    frame_filtros = ttk.Frame(frame_main)

    # Exibe o `Frame` na interface usando o gerenciador de layout `pack`
    # `pady=5` adiciona um espa√ßamento de 5 pixels na
    #       parte superior e inferior
    frame_filtros.pack(pady=5)

    # Data In√≠cio
    # Cria um r√≥tulo para identificar o campo de data de in√≠cio.
    # `frame_filtros` define o cont√™iner onde o r√≥tulo ser√° posicionado.
    # `text="Data In√≠cio:"` especifica o texto exibido no r√≥tulo.
    # `grid(row=0, column=0, padx=5, pady=5, sticky="e")` posiciona o r√≥tulo na grade.
    # `row=0, column=0` coloca o r√≥tulo na primeira linha e primeira coluna.
    # `padx=5, pady=5` adiciona espa√ßamento horizontal e vertical para melhor est√©tica.
    # `sticky="e"` alinha o texto √† direita para melhor alinhamento com o campo de entrada.
    ttk.Label(frame_filtros,
              text="Data In√≠cio:").grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada do tipo DateEntry para selecionar a data de in√≠cio.
    # `frame_filtros` define o cont√™iner onde o campo ser√° posicionado.
    # `date_pattern="dd/MM/yyyy"` define o formato da data no padr√£o brasileiro (dia/m√™s/ano).
    # `width=12` define a largura do campo, garantindo espa√ßo suficiente para exibir a data.
    date_ini = DateEntry(frame_filtros, date_pattern="dd/MM/yyyy", width=12)

    # Posiciona o campo de data de in√≠cio na grade da interface.
    # `row=0, column=1` coloca o campo na primeira linha e segunda coluna.
    # `padx=5, pady=5` adiciona espa√ßamento para separar os elementos visualmente.
    date_ini.grid(row=0, column=1, padx=5, pady=5)

    # Data Fim
    # Cria um r√≥tulo para identificar o campo de data de fim.
    # `frame_filtros` define o cont√™iner onde o r√≥tulo ser√° posicionado.
    # `text="Data Fim:"` especifica o texto exibido no r√≥tulo.
    # `grid(row=0, column=2, padx=5, pady=5, sticky="e")` posiciona o r√≥tulo na grade.
    # `row=0, column=2` coloca o r√≥tulo na primeira linha e terceira coluna.
    # `padx=5, pady=5` adiciona espa√ßamento horizontal e vertical para melhor est√©tica.
    # `sticky="e"` alinha o texto √† direita para melhor alinhamento com o campo de entrada.
    ttk.Label(frame_filtros,
              text="Data Fim:").grid(row=0, column=2, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada do tipo DateEntry para selecionar a data de fim.
    # `frame_filtros` define o cont√™iner onde o campo ser√° posicionado.
    # `date_pattern="dd/MM/yyyy"` define o formato da data no padr√£o brasileiro (dia/m√™s/ano).
    # `width=12` define a largura do campo, garantindo espa√ßo
    #       suficiente para exibir a data.
    date_fim = DateEntry(frame_filtros, date_pattern="dd/MM/yyyy", width=12)

    # Posiciona o campo de data de fim na grade da interface.
    # `row=0, column=3` coloca o campo na primeira linha e quarta coluna.
    # `padx=5, pady=5` adiciona espa√ßamento para separar os elementos visualmente.
    date_fim.grid(row=0, column=3, padx=5, pady=5)

    # Status
    # Cria um r√≥tulo para identificar o campo de status.
    # `frame_filtros` define o cont√™iner onde o r√≥tulo ser√° posicionado.
    # `text="Status:"` especifica o texto exibido no r√≥tulo.
    # `grid(row=0, column=4, padx=5, pady=5, sticky="e")` posiciona o r√≥tulo na grade.
    # `row=0, column=4` coloca o r√≥tulo na primeira linha e quinta coluna.
    # `padx=5, pady=5` adiciona espa√ßamento horizontal e vertical para uma melhor organiza√ß√£o.
    # `sticky="e"` alinha o texto √† direita para manter alinhamento com os campos de entrada.
    ttk.Label(frame_filtros,
              text="Status:").grid(row=0, column=4, padx=5, pady=5, sticky="e")

    # Cria um campo de sele√ß√£o (Combobox) para escolher o status do ve√≠culo.
    # `frame_filtros` define o cont√™iner onde o combobox ser√° posicionado.
    # `values=["", "Reservado", "Finalizado", "Cancelado", "Ocupada"]`
    #       define as op√ß√µes dispon√≠veis no dropdown.
    # `""` como primeira op√ß√£o permite que o campo fique vazio inicialmente.
    # `"Reservado", "Finalizado", "Cancelado", "Ocupada"` s√£o os poss√≠veis status de um ve√≠culo.
    # `state="readonly"` impede que o usu√°rio digite valores personalizados, permitindo apenas sele√ß√£o.
    # `width=12` define a largura do campo para garantir que os
    #       valores sejam exibidos corretamente.
    combo_st = ttk.Combobox(frame_filtros,
                            values=["", "Reservado", "Finalizado", "Cancelado", "Ocupada"],
                            state="readonly",
                            width=12)

    # Posiciona o combobox de status na grade da interface.
    # `row=0, column=5` coloca o campo na primeira linha e sexta coluna.
    # `padx=5, pady=5` adiciona espa√ßamento para melhorar a organiza√ß√£o visual.
    combo_st.grid(row=0, column=5, padx=5, pady=5)

    # Define o valor padr√£o do combobox como vazio
    #       para evitar sele√ß√£o autom√°tica.
    combo_st.set("")

    # ---------------------------------------------------------------------
    # Frame de filtros apenas para "bloco" e "vaga"
    # ---------------------------------------------------------------------

    # Cria um cont√™iner para os campos de filtro adicionais.
    # `ttk.Frame(frame_main)` cria um frame dentro do cont√™iner principal da janela.
    # Esse frame ser√° usado para agrupar os campos de
    #       filtro, como bloco, vaga, carro e placa.
    frame_col_filtros = ttk.Frame(frame_main)

    # Posiciona o cont√™iner dos filtros na interface.
    # `pady=5` adiciona espa√ßamento vertical para separar
    #       visualmente os filtros de outros elementos.
    frame_col_filtros.pack(pady=5)

    # Cria um r√≥tulo (label) para o campo de filtro de bloco.
    # `text="Filtrar Bloco:"` define o texto exibido no r√≥tulo.
    # `ttk.Label(frame_col_filtros, text="Filtrar Bloco:")` cria o r√≥tulo dentro do frame de filtros.
    # `.grid(row=0, column=0, padx=5, pady=5, sticky="e")` posiciona o r√≥tulo na grade.
    # `row=0` define a linha na grade.
    # `column=0` define a coluna na grade.
    # `padx=5` adiciona um espa√ßamento horizontal de 5 pixels ao redor do r√≥tulo.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels ao redor do r√≥tulo.
    # `sticky="e"` alinha o r√≥tulo √† direita dentro da c√©lula da grade.
    ttk.Label(frame_col_filtros,
              text="Filtrar Bloco:").grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (entry) para permitir que o
    #       usu√°rio insira um filtro para o bloco.
    # `ttk.Entry(frame_col_filtros, width=12)` cria um campo
    #       de entrada dentro do frame de filtros.
    # `width=12` define a largura do campo em caracteres,
    #       permitindo at√© 12 caracteres vis√≠veis.
    entry_filtro_bloco = ttk.Entry(frame_col_filtros, width=12)

    # Posiciona o campo de entrada dentro do frame de filtros usando a grade.
    # `row=0` posiciona o campo na mesma linha que o r√≥tulo correspondente.
    # `column=1` posiciona o campo na coluna seguinte ao r√≥tulo.
    # `padx=5` adiciona um espa√ßamento horizontal de 5 pixels ao redor do campo.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels ao redor do campo.
    entry_filtro_bloco.grid(row=0, column=1, padx=5, pady=5)

    # Cria um r√≥tulo (label) para o campo de filtro da vaga.
    # `text="Filtrar Vaga:"` define o texto exibido no r√≥tulo.
    # `ttk.Label(frame_col_filtros, text="Filtrar Vaga:")` cria o
    #       r√≥tulo dentro do frame de filtros.
    # `.grid(row=0, column=2, padx=5, pady=5, sticky="e")` posiciona o r√≥tulo na grade.
    # `row=0` define a linha na grade.
    # `column=2` define a coluna na grade, para que o r√≥tulo
    #       fique ao lado do r√≥tulo anterior.
    # `padx=5` adiciona um espa√ßamento horizontal de 5 pixels ao redor do r√≥tulo.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels ao redor do r√≥tulo.
    # `sticky="e"` alinha o r√≥tulo √† direita dentro da c√©lula da grade.
    ttk.Label(frame_col_filtros,
              text="Filtrar Vaga:").grid(row=0, column=2, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (entry) para permitir que o
    #       usu√°rio insira um filtro para a vaga.
    # `ttk.Entry(frame_col_filtros, width=12)` cria um campo de
    #       entrada dentro do frame de filtros.
    # `width=12` define a largura do campo em caracteres,
    #       permitindo at√© 12 caracteres vis√≠veis.
    entry_filtro_vaga = ttk.Entry(frame_col_filtros, width=12)

    # Posiciona o campo de entrada dentro do frame de filtros usando a grade.
    # `row=0` posiciona o campo na mesma linha que o r√≥tulo correspondente.
    # `column=3` posiciona o campo na coluna seguinte ao r√≥tulo.
    # `padx=5` adiciona um espa√ßamento horizontal de 5 pixels ao redor do campo.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels ao redor do campo.
    entry_filtro_vaga.grid(row=0, column=3, padx=5, pady=5)

    # ---------------------------------------------------------------------
    # Treeview
    # ---------------------------------------------------------------------

    # Cria um frame para conter a tabela (Treeview).
    # `ttk.Frame(frame_main)` cria um frame dentro do
    #       frame principal da janela.
    frame_tv = ttk.Frame(frame_main)

    # Posiciona o frame na janela e o expande para preencher o espa√ßo dispon√≠vel.
    # `fill="both"` faz com que o frame se expanda tanto
    #       horizontal quanto verticalmente.
    # `expand=True` permite que o frame ocupe todo o espa√ßo
    #       dispon√≠vel dentro do frame principal.
    frame_tv.pack(fill="both", expand=True)

    # Define as colunas da tabela, incluindo o valor total.
    # Cada string representa o identificador de uma coluna na Treeview.
    # "id" - Identifica√ß√£o √∫nica do registro.
    # "data_entrada" - Data em que o ve√≠culo entrou.
    # "hora_entrada" - Hora exata da entrada.
    # "data_saida" - Data em que o ve√≠culo saiu.
    # "hora_saida" - Hora exata da sa√≠da.
    # "bloco" - Bloco onde a vaga est√° localizada.
    # "vaga" - N√∫mero da vaga onde o ve√≠culo foi estacionado.
    # "status" - Status atual da reserva (ex: Reservado,
    #       Finalizado, Cancelado, Ocupada).
    # "valor_total" - Valor total cobrado pela reserva do estacionamento.
    tv_colunas = (
        "id", "data_entrada", "hora_entrada", "data_saida", "hora_saida",
        "bloco", "vaga", "status", "valor_total"
    )

    # Cria uma tabela (Treeview) para exibir os dados do hist√≥rico de reservas do ve√≠culo.
    # `ttk.Treeview(frame_tv)` cria a tabela dentro do frame criado anteriormente.
    # `columns=tv_colunas` define as colunas que a tabela ter√°,
    #       usando a lista previamente definida.
    # `show="headings"` remove a primeira coluna padr√£o do Treeview e
    #       exibe apenas os cabe√ßalhos personalizados.
    # `height=15` define o n√∫mero de linhas vis√≠veis antes de precisar de rolagem.
    tv = ttk.Treeview(frame_tv,
                      columns=tv_colunas,
                      show="headings",
                      height=15)

    # Posiciona a tabela dentro do frame.
    # `fill="both"` permite que a tabela ocupe todo o espa√ßo dispon√≠vel no frame.
    # `expand=True` faz com que a tabela cres√ßa quando a janela for redimensionada.
    tv.pack(fill="both", expand=True)

    # Percorre cada coluna definida na tabela para
    #       configurar os cabe√ßalhos e larguras.
    for c in tv_colunas:

        # Define o nome do cabe√ßalho da coluna, capitalizando a
        #       primeira letra do nome da coluna.
        # `tv.heading(c, text=c.capitalize())` configura o t√≠tulo da
        #       coluna para ser exibido no cabe√ßalho da tabela.
        tv.heading(c, text=c.capitalize())

        # Define a largura de cada coluna para 110 pixels.
        # `tv.column(c, width=110)` ajusta o espa√ßo ocupado por cada coluna na tabela.
        tv.column(c, width=110)

    # Label para mostrar total de itens e soma
    # Cria um r√≥tulo (Label) para exibir um resumo do total de itens e soma dos valores.
    # `ttk.Label(frame_main)` cria o r√≥tulo dentro do frame principal da janela.
    # `text="Total de itens: 0   |   Soma Valor: R$ 0,00"`
    #       define o texto inicial exibido no r√≥tulo.
    lbl_resumo = ttk.Label(frame_main,
                           text="Total de itens: 0   |   Soma Valor: R$ 0,00")

    # Posiciona o r√≥tulo dentro do frame principal com um
    #       espa√ßamento vertical de 5 pixels.
    # `pady=5` adiciona um pequeno espa√ßo acima e abaixo do
    #       r√≥tulo para melhor organiza√ß√£o visual.
    lbl_resumo.pack(pady=5)


    # ---------------------------------------------------------------------
    # Fun√ß√£o filtrar
    # ---------------------------------------------------------------------

    # Define a fun√ß√£o `filtrar()` que ser√° respons√°vel por
    #       buscar e exibir os dados filtrados na tabela.
    def filtrar():

        # Remove todos os itens da Treeview antes de exibir os novos resultados.
        # `tv.delete(*tv.get_children())` garante que a tabela
        #       seja limpa antes de inserir novos dados.
        tv.delete(*tv.get_children())

        # Obt√©m a data de in√≠cio selecionada pelo usu√°rio no DateEntry.
        # `date_ini.get_date()` retorna um objeto do tipo `datetime.date`,
        #       que representa a data escolhida.
        di_ = date_ini.get_date()

        # Obt√©m a data de fim selecionada pelo usu√°rio no DateEntry.
        # `date_fim.get_date()` retorna um objeto `datetime.date`
        #       representando a data final para o filtro.
        df_ = date_fim.get_date()

        # Obt√©m o status selecionado no ComboBox de status, removendo espa√ßos extras.
        # Se o usu√°rio n√£o selecionar um status, a string retornada ser√° vazia ("").
        st_ = combo_st.get().strip()

        # Cria um dicion√°rio `query` contendo os crit√©rios para
        #       buscar os dados no banco de dados.
        # Aqui, o crit√©rio inicial √© que o campo `veiculo_placa`
        #       deve ser igual √† placa do ve√≠culo selecionado.
        query = {"veiculo_placa": placa}

        # Se o usu√°rio selecionou um status, adiciona a condi√ß√£o de
        #       filtro pelo status na consulta.
        if st_:
            query["status"] = st_

        # Executa a consulta no banco de dados e armazena os
        #       resultados em uma lista `docs`.
        # `colecao_reservas.find(query)` busca os registros que
        #       atendem aos crit√©rios definidos em `query`.
        # `list(colecao_reservas.find(query))` converte os resultados da
        #       consulta em uma lista para manipula√ß√£o posterior.
        docs = list(colecao_reservas.find(query))

        # Cria uma lista vazia `final_results`, que armazenar√° os
        #       dados formatados para exibi√ß√£o na tabela.
        final_results = []

        # Percorre cada documento retornado na consulta ao banco de dados.
        for r in docs:

            # Obt√©m a string da data de entrada do documento.
            # Se o campo "data_entrada" n√£o existir, retorna uma string vazia ("").
            dtent_str = r.get("data_entrada", "")

            # Tenta converter a string da data de entrada para um
            #       objeto do tipo `datetime.date`.
            try:

                # Usa `datetime.strptime(dtent_str, "%d/%m/%Y")` para interpretar a
                #       string como uma data no formato "dd/mm/yyyy".
                # O m√©todo `.date()` extrai apenas a parte da data,
                #       ignorando a informa√ß√£o de hor√°rio.
                dtent = datetime.strptime(dtent_str, "%d/%m/%Y").date()

            except:

                # Se houver erro na convers√£o (por exemplo, se a
                #       string estiver vazia ou em formato incorreto),
                # define `dtent` como `None`, indicando que a data
                #       n√£o p√¥de ser processada.
                dtent = None

            # Define `ok = True` para indicar que, por padr√£o, o
            #       registro ser√° inclu√≠do na lista final.
            ok = True

            # Se a data de entrada foi extra√≠da corretamente (n√£o √© `None`),
            #       verifica se ela est√° dentro do intervalo desejado.
            if dtent:

                # Se a data de entrada for anterior √† data de in√≠cio do
                #       filtro, o registro ser√° exclu√≠do (`ok = False`).
                if dtent < di_:
                    ok = False

                # Se a data de entrada for posterior √† data de fim do filtro, o
                #       registro tamb√©m ser√° exclu√≠do (`ok = False`).
                if dtent > df_:
                    ok = False

            # Se a vari√°vel `ok` ainda for `True`, o registro ser√°
            #       considerado v√°lido e passar√° por mais verifica√ß√µes.
            if ok:

                # Obt√©m o valor do campo "bloco" do documento, ou uma string vazia se n√£o existir.
                bloco_doc = r.get("bloco", "")

                # Obt√©m o valor do campo "numero_vaga" do documento, ou uma string vazia se n√£o existir.
                vaga_doc = r.get("numero_vaga", "")

                # Captura o texto digitado no campo de filtro de bloco e converte
                #       para min√∫sculas para facilitar a compara√ß√£o.
                filtro_bloco = entry_filtro_bloco.get().strip().lower()

                # Captura o texto digitado no campo de filtro de vaga e
                #       tamb√©m converte para min√∫sculas.
                filtro_vaga = entry_filtro_vaga.get().strip().lower()

                # Se o usu√°rio digitou algum valor no campo de filtro de bloco:
                if filtro_bloco:

                    # Verifica se o valor digitado n√£o est√° presente no bloco do
                    #       documento (caso insensitivo).
                    # Se o bloco do documento n√£o cont√©m o valor digitado, ent√£o o
                    #       registro n√£o ser√° considerado (`ok = False`).
                    if filtro_bloco not in bloco_doc.lower():
                        ok = False

                # Se o usu√°rio digitou algum valor no campo de filtro de vaga:
                if filtro_vaga:

                    # Verifica se o valor digitado n√£o est√° presente na vaga
                    #       do documento (caso insensitivo).
                    # Se a vaga do documento n√£o cont√©m o valor digitado, ent√£o o
                    #       registro n√£o ser√° considerado (`ok = False`).
                    if filtro_vaga not in vaga_doc.lower():
                        ok = False

                # Ap√≥s todas as verifica√ß√µes, se `ok` ainda for `True`, o
                #       registro ser√° adicionado √† lista final de resultados.
                if ok:
                    final_results.append(r)

        # Insere e soma
        # Inicializa a vari√°vel `soma_valor` com 0.0 para armazenar a
        #       soma total dos valores das reservas.
        soma_valor = 0.0

        # Percorre todos os documentos filtrados armazenados na
        #       lista `final_results`.
        for d in final_results:

            # Obt√©m o identificador √∫nico `_id` do documento e
            #       converte para string.
            val_id = str(d["_id"])

            # Obt√©m a data de entrada do documento, se n√£o existir, retorna uma string vazia.
            val_de = d.get("data_entrada", "")

            # Obt√©m a hora de entrada do documento, se n√£o existir, retorna uma string vazia.
            val_he = d.get("hora_entrada", "")

            # Obt√©m a data de sa√≠da do documento, se n√£o existir, retorna uma string vazia.
            val_ds = d.get("data_saida", "")

            # Obt√©m a hora de sa√≠da do documento, se n√£o existir, retorna uma string vazia.
            val_hs = d.get("hora_saida", "")

            # Obt√©m o bloco onde a vaga est√° localizada, se n√£o existir, retorna uma string vazia.
            val_bl = d.get("bloco", "")

            # Obt√©m o n√∫mero da vaga reservada, se n√£o existir, retorna uma string vazia.
            val_vg = d.get("numero_vaga", "")

            # Obt√©m o status da reserva (ex.: "Reservado", "Finalizado"), se
            #       n√£o existir, retorna uma string vazia.
            val_st = d.get("status", "")

            # Obt√©m o valor total da reserva, se n√£o existir, retorna 0.
            val_vt = d.get("valor_total", 0)

            # Verifica se `val_vt` (valor total) √© um n√∫mero (int ou float).
            if isinstance(val_vt, (int, float)):

                # Formata o valor total para o padr√£o brasileiro (milhares
                #       com ponto e decimal com v√≠rgula).
                # Primeiro, transforma o n√∫mero no formato 1.234,56.
                # Depois, substitui as v√≠rgulas por um marcador tempor√°rio "X".
                # Em seguida, troca os pontos por v√≠rgulas.
                # Finalmente, troca os marcadores tempor√°rios "X" por pontos.
                valor_formatado = f"{val_vt:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

                # Adiciona o valor total ao somat√≥rio geral das reservas.
                soma_valor += val_vt

            else:

                # Se `val_vt` n√£o for um n√∫mero v√°lido, define o
                #       valor formatado como "0,00".
                valor_formatado = "0,00"

            # Insere uma nova linha na tabela `tv` com os dados formatados da reserva.
            # O primeiro argumento `""` indica que o item n√£o tem um pai (entrada na raiz).
            # `END` indica que a nova linha ser√° adicionada no final da tabela.
            # `values=` recebe uma tupla com os valores de cada coluna da tabela.
            tv.insert("",
                      END, values=(val_id,  # ID da reserva
                                   val_de,  # Data de entrada
                                   val_he,  # Hora de entrada
                                   val_ds,  # Data de sa√≠da
                                   val_hs,  # Hora de sa√≠da
                                   val_bl,  # Bloco da vaga
                                   val_vg,  # N√∫mero da vaga
                                   val_st,  # Status da reserva
                                   valor_formatado))  # Valor total formatado em reais

        # Obt√©m a quantidade total de registros
        #       filtrados na lista `final_results`
        qtd = len(final_results)

        # Formata a soma total dos valores para o padr√£o
        #       brasileiro (milhares com ponto e decimal com v√≠rgula).
        # Primeiro, transforma o n√∫mero no formato 1.234,56.
        # Depois, substitui as v√≠rgulas por um marcador tempor√°rio "X".
        # Em seguida, troca os pontos por v√≠rgulas.
        # Finalmente, troca os marcadores tempor√°rios "X" por pontos.
        soma_formatada = f"{soma_valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

        # Atualiza o r√≥tulo `lbl_resumo` com o n√∫mero total de
        #       registros e a soma total formatada.
        lbl_resumo.config(text=f"Total de itens: {qtd}   |   Soma Valor: R$ {soma_formatada}")


    # Define a fun√ß√£o `limpar_`, respons√°vel por resetar os
    #       campos de filtro e limpar a tabela.
    def limpar_():

        # Importa a classe `datetime` do m√≥dulo `datetime` para obter a data atual.
        from datetime import datetime

        # Define o campo de data inicial (`date_ini`) para a data atual.
        date_ini.set_date(datetime.now())

        # Define o campo de data final (`date_fim`) para a data atual.
        date_fim.set_date(datetime.now())

        # Limpa a sele√ß√£o do campo de status, deixando-o vazio.
        combo_st.set("")

        # Apaga qualquer texto digitado no campo de filtro do bloco.
        entry_filtro_bloco.delete(0, END)

        # Apaga qualquer texto digitado no campo de filtro da vaga.
        entry_filtro_vaga.delete(0, END)

        # Remove todos os itens exibidos na tabela (`tv`), deixando-a vazia.
        tv.delete(*tv.get_children())

        # Atualiza o r√≥tulo `lbl_resumo` para exibir zero
        #       itens e um valor total de R$ 0,00.
        lbl_resumo.config(text="Total de itens: 0   |   Soma Valor: R$ 0,00")


    # ---------------------------------------------------------------------
    # Bot√µes
    # ---------------------------------------------------------------------

    # Cria um frame (`frame_btn`) dentro de `frame_main` para
    #       organizar os bot√µes na interface.
    frame_btn = ttk.Frame(frame_main)

    # Define o preenchimento vertical (`pady=5`) para espa√ßamento
    #       entre o frame de bot√µes e outros elementos.
    frame_btn.pack(pady=5)

    # Cria um bot√£o para filtrar os resultados na tabela.
    # `text="Filtrar"` define o texto exibido no bot√£o.
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=filtrar` associa a fun√ß√£o `filtrar` ao clique do bot√£o.
    # `pack(side="left", padx=10)` posiciona o bot√£o no lado
    #       esquerdo do `frame_btn` com espa√ßamento horizontal de 10 pixels.
    ttk.Button(frame_btn,
               text="Filtrar",
               style="MyButton.TButton",
               command=filtrar).pack(side="left", padx=10)

    # Cria um bot√£o para limpar os filtros e redefinir os campos da tabela.
    # `text="Limpar"` define o texto exibido no bot√£o.
    # `style="MyButton.TButton"` aplica um estilo personalizado ao bot√£o.
    # `command=limpar_` associa a fun√ß√£o `limpar_` ao clique do bot√£o.
    # `pack(side="left", padx=10)` posiciona o bot√£o no lado
    #       esquerdo do `frame_btn` com espa√ßamento horizontal de 10 pixels.
    ttk.Button(frame_btn,
               text="Limpar",
               style="MyButton.TButton",
               command=limpar_).pack(side="left", padx=10)

    # Executa a fun√ß√£o `filtrar()` imediatamente ap√≥s a
    #       cria√ß√£o dos elementos, carregando os dados iniciais da tabela.
    filtrar()


# -------------------------------------------------------------------------
# CRUD de Clientes (com bot√£o HIST√ìRICO + FILTROS)
# -------------------------------------------------------------------------

# Define a fun√ß√£o `tela_clientes_crud(janela_pai)` que cria a
#       tela de gerenciamento de clientes.
def tela_clientes_crud(janela_pai):

    # `janela = tk.Toplevel(janela_pai)` cria uma nova janela
    #       secund√°ria dentro da janela principal.
    # `Toplevel` √© usado para criar uma nova janela sobre a existente.
    janela = tk.Toplevel(janela_pai)

    # `janela.title("Gerenciamento de Clientes")` define o t√≠tulo da
    #       janela como "Gerenciamento de Clientes".
    # O t√≠tulo aparece na barra superior da janela.
    janela.title("Gerenciamento de Clientes")

    # `janela.state("zoomed")` faz com que a janela
    #       abra em tela cheia.
    # Isso melhora a visualiza√ß√£o dos dados.
    janela.state("zoomed")

    # `janela.configure(bg="#F5F5F5")` define a cor
    #       de fundo da janela como cinza claro.
    # Isso d√° um aspecto visual mais limpo e agrad√°vel.
    janela.configure(bg="#F5F5F5")

    # Criar o container principal que armazenar√° todos os
    #       componentes da interface.
    # `container_principal = tk.Frame(janela, bg="#F5F5F5")` cria
    #       um frame dentro da janela.
    # `bg="#F5F5F5"` define a cor de fundo do frame, como cinza claro.
    container_principal = tk.Frame(janela, bg="#F5F5F5")

    # `container_principal.pack(expand=True, fill="both")` faz com
    #       que o frame ocupe todo o espa√ßo dispon√≠vel.
    # `expand=True` permite que o frame cres√ßa se a janela for redimensionada.
    # `fill="both"` garante que o frame ocupe toda a largura e altura poss√≠veis.
    container_principal.pack(expand=True, fill="both")

    # Cria um r√≥tulo (Label) que ser√° o t√≠tulo da tela de gerenciamento de clientes.
    # `Cria o r√≥tulo dentro do frame principal.
    # `text="üìã Gerenciar Clientes"` define o texto exibido no
    # ``t√≠tulo, incluindo um √≠cone para melhor visualiza√ß√£o.
    # `font=("Arial", 22, "bold")` define a fonte do t√≠tulo com tamanho 22 e em negrito.
    # `foreground="#2E86C1"` define a cor do texto como **AZUL VIVO**.
    # `background="#F5F5F5"` define a cor de fundo como **CINZA CLARO**.
    rotulo_titulo = ttk.Label(container_principal,
                              text="üìã Gerenciar Clientes",
                              font=("Arial", 22, "bold"),
                              foreground="#2E86C1",
                              background="#F5F5F5")

    # Posiciona o r√≥tulo na interface gr√°fica.
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels
    #       acima e abaixo do t√≠tulo para melhor legibilidade.
    rotulo_titulo.pack(pady=10)

    # Criar formul√°rio de entrada
    # Cria um container (Frame) para agrupar os campos do formul√°rio.
    # Cria um frame dentro do container principal.
    container_formulario = ttk.Frame(container_principal)

    # Posiciona o container na interface gr√°fica.
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels
    #       acima e abaixo do formul√°rio para melhor organiza√ß√£o visual.
    container_formulario.pack(pady=10)

    # Cria um r√≥tulo para o campo "Nome".
    # `text="Nome:"` define o texto exibido no r√≥tulo.
    # `font=("Arial", 12)` define a fonte usada no
    #       r√≥tulo como Arial, tamanho 12.
    # `grid(row=0, column=0, padx=5, pady=5, sticky="e")` posiciona o
    #       r√≥tulo na linha 0, coluna 0 com 5 pixels de espa√ßamento
    #       horizontal e vertical, alinhado √† direita.
    ttk.Label(container_formulario,
              text="Nome:",
              font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada para o nome.
    # `width=35` define a largura do campo de entrada para 35 caracteres.
    # `font=("Arial", 12)` define a fonte usada no campo de
    #       entrada como Arial, tamanho 12.
    # `grid(row=0, column=1, padx=5, pady=5)` posiciona o campo de
    #       entrada na linha 0, coluna 1 com 5 pixels de
    #       espa√ßamento horizontal e vertical.
    campo_nome = ttk.Entry(container_formulario, width=35, font=("Arial", 12))
    campo_nome.grid(row=0, column=1, padx=5, pady=5)

    # Cria um r√≥tulo para o campo "CPF".
    # `text="CPF:"` define o texto exibido no r√≥tulo.
    # `font=("Arial", 12)` define a fonte do r√≥tulo como Arial, tamanho 12.
    # `grid(row=1, column=0, padx=5, pady=5, sticky="e")` posiciona o
    #       r√≥tulo na linha 1, coluna 0 com 5 pixels de espa√ßamento
    #       horizontal e vertical, alinhado √† direita.
    ttk.Label(container_formulario,
              text="CPF:",
              font=("Arial", 12)).grid(row=1, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada para o CPF.
    # `width=25` define a largura do campo de entrada para 25 caracteres.
    # `font=("Arial", 12)` define a fonte do campo de
    #       entrada como Arial, tamanho 12.
    # `grid(row=1, column=1, padx=5, pady=5)` posiciona o campo de
    #       entrada na linha 1, coluna 1 com 5 pixels de espa√ßamento horizontal e vertical.
    campo_cpf = ttk.Entry(container_formulario, width=25, font=("Arial", 12))
    campo_cpf.grid(row=1, column=1, padx=5, pady=5)

    # Cria um r√≥tulo para o campo "Telefone:".
    # `text="Telefone:"` define o texto exibido no r√≥tulo.
    # `font=("Arial", 12)` define a fonte do r√≥tulo como Arial, tamanho 12.
    # `grid(row=2, column=0, padx=5, pady=5, sticky="e")` posiciona o
    #       r√≥tulo na linha 2, coluna 0 com 5 pixels de espa√ßamento
    #       horizontal e vertical, alinhado √† direita.
    ttk.Label(container_formulario,
              text="Telefone:",
              font=("Arial", 12)).grid(row=2, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada para o telefone.
    # `width=25` define a largura do campo de entrada para 25 caracteres.
    # `font=("Arial", 12)` define a fonte usada no campo de
    #       entrada como Arial, tamanho 12.
    # `grid(row=2, column=1, padx=5, pady=5)` posiciona o campo de
    #       entrada na linha 2, coluna 1 com 5 pixels de
    #       espa√ßamento horizontal e vertical.
    campo_telefone = ttk.Entry(container_formulario, width=25, font=("Arial", 12))
    campo_telefone.grid(row=2, column=1, padx=5, pady=5)

    # Criar bot√µes
    # Cria um container para os bot√µes.
    # `ttk.Frame(container_principal)` cria um frame
    #       dentro do container principal.
    container_botoes = ttk.Frame(container_principal)

    # Exibe o container dos bot√µes na interface.
    # `pack(pady=10)` posiciona o container e adiciona 10
    #       pixels de espa√ßamento vertical ao redor.
    container_botoes.pack(pady=10)

    # Define uma lista de bot√µes com seus respectivos textos e comandos.
    # Cada tupla cont√©m:
    # - O texto do bot√£o, incluindo um √≠cone para facilitar a identifica√ß√£o.
    # - Uma fun√ß√£o lambda que chama a fun√ß√£o associada ao bot√£o quando clicado.
    botoes = [
        ("‚úÖ Cadastrar", lambda: cadastrar()),
        ("‚úèÔ∏è Alterar", lambda: alterar()),
        ("‚ùå Excluir", lambda: excluir()),
        ("üßπ Limpar", lambda: limpar_campos()),
        ("üìú Hist√≥rico", lambda: abrir_historico())
    ]

    # Itera sobre a lista de bot√µes para criar cada bot√£o dinamicamente.
    # `enumerate(botoes)` retorna o √≠ndice e a tupla (texto, comando) de cada bot√£o.
    for i, (texto, comando) in enumerate(botoes):

        # Cria um bot√£o dentro do container de bot√µes.
        # `text=texto` define o texto exibido no bot√£o.
        # `style="TButton"` aplica o estilo previamente configurado para os bot√µes.
        # `command=comando` associa a fun√ß√£o que ser√° executada ao clicar no bot√£o.
        # `width=15` define a largura do bot√£o.
        btn = ttk.Button(container_botoes,
                         text=texto,
                         style="TButton",
                         command=comando,
                         width=15)

        # Posiciona o bot√£o na grade do container.
        # `row=0` posiciona o bot√£o na linha 0.
        # `column=i` posiciona o bot√£o na coluna correspondente ao seu √≠ndice.
        # `padx=8` adiciona 8 pixels de espa√ßamento horizontal ao redor do bot√£o.
        # `pady=5` adiciona 5 pixels de espa√ßamento vertical ao redor do bot√£o.
        btn.grid(row=0, column=i, padx=8, pady=5)

    # Criar um container para a tabela dentro da janela principal
    # `ttk.Frame(container_principal)` cria um novo
    #       container (ou 'frame') que ficar√° dentro do container principal.
    # O 'container_principal' √© o container maior onde
    #       todos os outros elementos ser√£o posicionados.
    # `fill="both"` faz com que o frame ocupe tanto a largura
    #       quanto a altura do espa√ßo dispon√≠vel.
    # `expand=True` faz com que o frame se expanda para
    #       preencher qualquer espa√ßo restante no layout.
    # `padx=10` e `pady=10` adicionam um espa√ßamento de 10 pixels
    #       nas dire√ß√µes horizontal e vertical, respectivamente, para
    #       evitar que o conte√∫do fique muito colado nas bordas da janela.
    container_tabela = ttk.Frame(container_principal)
    container_tabela.pack(fill="both", expand=True, padx=10, pady=10)

    # Define as colunas da tabela que ser√° exibida
    # A vari√°vel `colunas` √© uma tupla que define os t√≠tulos das colunas na tabela.
    # Cada elemento da tupla ser√° uma coluna na tabela.
    # Neste caso, temos quatro colunas: "ID", "Nome", "CPF" e "Telefone".
    colunas = ("ID", "Nome", "CPF", "Telefone")

    # Cria a tabela para exibi√ß√£o dos dados dos clientes
    # `ttk.Treeview(container_tabela)` cria um widget Treeview
    #       dentro do `container_tabela`.
    # `columns=colunas` especifica quais colunas ser√£o exibidas na
    #       tabela, utilizando os nomes definidos na vari√°vel `colunas`.
    # `show="headings"` faz com que a tabela mostre apenas os
    #       cabe√ßalhos das colunas, sem a coluna de √≠ndice (como
    #       uma numera√ß√£o autom√°tica de linhas).
    # `height=10` define que a tabela exibir√° at√© 10 linhas
    #       vis√≠veis de uma vez (sem contar com a rolagem).
    tabela_clientes = ttk.Treeview(container_tabela,
                                   columns=colunas,
                                   show="headings", height=10)

    # Exibe a tabela no layout, ocupando o espa√ßo dispon√≠vel no container
    # `fill="both"` faz com que a tabela ocupe tanto a largura
    #       quanto a altura do espa√ßo dispon√≠vel.
    # `expand=True` faz com que a tabela se expanda para
    #       preencher o espa√ßo restante dentro do `container_tabela`.
    tabela_clientes.pack(fill="both", expand=True)

    # Loop que percorre cada coluna definida na vari√°vel `colunas`
    # A vari√°vel `colunas` cont√©m os t√≠tulos das colunas e, com o loop `for`,
    # ser√° aplicada uma configura√ß√£o em cada uma das colunas da tabela.
    for coluna in colunas:

        # Define o texto exibido no cabe√ßalho de cada coluna
        # `tabela_clientes.heading(coluna, text=coluna, anchor="center")`
        # configura o t√≠tulo de cada coluna. A vari√°vel `coluna` (que √©
        #       cada um dos itens em `colunas`)
        #       ser√° usada como t√≠tulo da coluna.
        # `text=coluna` define que o t√≠tulo ser√° o nome da
        #       coluna, e `anchor="center"`
        #       alinha o texto do cabe√ßalho no centro.
        tabela_clientes.heading(coluna, text=coluna, anchor="center")

        # Define a largura e o alinhamento das colunas
        # Configura a largura das colunas.
        # `width=150` define a largura da coluna em pixels, e `anchor="center"`
        #       alinha o conte√∫do da coluna ao centro.
        tabela_clientes.column(coluna, width=150, anchor="center")

    # Ajusta a largura da coluna "ID" para 50 pixels
    # `tabela_clientes.column("ID", width=50)` define
    #       especificamente a largura da coluna "ID".
    # A largura da coluna "ID" √© configurada para 50 pixels, o
    #       que √© uma largura mais estreita.
    tabela_clientes.column("ID", width=50)

    # Vincula um evento de duplo clique para chamar a
    #       fun√ß√£o `ao_clicar` quando uma c√©lula for clicada
    # `tabela_clientes.bind("<Double-1>", lambda event: ao_clicar(event))`
    # associa o evento de duplo clique em qualquer c√©lula da tabela √† fun√ß√£o `ao_clicar`.
    # O par√¢metro `<Double-1>` representa o evento de duplo
    #       clique com o bot√£o esquerdo do mouse.
    # Quando o usu√°rio faz um duplo clique, a fun√ß√£o `ao_clicar(event)` ser√° chamada.
    tabela_clientes.bind("<Double-1>", lambda event: ao_clicar(event))


    def carregar_lista():

        # Limpa todos os itens existentes na tabela antes de carregar novos dados
        # `tabela_clientes.delete(*tabela_clientes.get_children())` remove todos os itens
        # (linhas) que j√° est√£o na tabela. Isso √© feito para garantir que a tabela
        # esteja vazia antes de inserir novos dados.
        tabela_clientes.delete(*tabela_clientes.get_children())

        # Obt√©m todos os clientes da cole√ß√£o `colecao_clientes`
        # `colecao_clientes.find()` busca todos os documentos da cole√ß√£o de clientes
        # no banco de dados. Isso retorna um cursor que pode ser iterado para acessar
        # os dados de cada cliente.
        clientes = colecao_clientes.find()

        # Itera sobre todos os clientes retornados pela consulta
        # A vari√°vel `cliente` armazena os dados de cada cliente no loop
        for cliente in clientes:

            # Insere os dados do cliente na tabela
            # `tabela_clientes.insert("", "end", values=(...))` adiciona uma nova linha
            # na tabela. O primeiro par√¢metro √© a chave do item (usando `""` indica que
            # √© uma linha principal), o segundo `"end"` coloca a linha no final da tabela.
            # O par√¢metro `values` define o conte√∫do das colunas na nova linha.
            # Aqui, estamos inserindo:
            # - o ID do cliente como `str(cliente["_id"])` (convertido para string)
            # - o nome do cliente, acessado com `cliente["nome"]`
            # - o CPF do cliente, acessado com `cliente["cpf"]`
            # - o telefone, com `cliente.get("telefone", "")` (usando `get` para garantir que
            #   caso o telefone n√£o exista, seja inserido uma string vazia ao inv√©s de um erro)
            tabela_clientes.insert("",
                                   "end",
                                   values=(str(cliente["_id"]),
                                           cliente["nome"],
                                           cliente["cpf"],
                                           cliente.get("telefone", "")))


    # Defini√ß√£o da fun√ß√£o que ser√° chamada ao clicar em um item na tabela
    # O par√¢metro `evento` √© passado automaticamente pelo
    #       evento de clique na tabela,
    #       mas n√£o √© utilizado diretamente nesta fun√ß√£o.
    def ao_clicar(evento):

        # Obt√©m o item selecionado na tabela
        # `tabela_clientes.selection()` retorna uma lista
        #       com a chave do item selecionado.
        # Se nenhum item for selecionado, essa lista estar√° vazia.
        selecionado = tabela_clientes.selection()

        # Verifica se algum item foi selecionado
        # Se a lista estiver vazia (nenhum item selecionado), a
        #       fun√ß√£o retorna e n√£o faz nada.
        if not selecionado:
            return

        # Obt√©m os valores da linha selecionada
        # `tabela_clientes.item(selecionado[0], "values")` retorna os
        #       valores da linha selecionada.
        # O `selecionado[0]` √© a chave do item selecionado. A fun√ß√£o `item`
        #       retorna os valores das colunas.
        valores = tabela_clientes.item(selecionado[0], "values")

        # Desempacota os valores da linha selecionada para as
        #       vari√°veis `_id`, `nome`, `cpf`, e `telefone`
        # Cada valor corresponde a uma coluna da tabela (ID, Nome, CPF, Telefone).
        _id, nome, cpf, telefone = valores

        # Preenche o campo de nome com o valor selecionado
        # `campo_nome.delete(0, tk.END)` limpa o conte√∫do do
        #       campo de texto `campo_nome`.
        # `campo_nome.insert(0, nome)` insere o nome do cliente no
        #       campo de texto `campo_nome`.
        campo_nome.delete(0, tk.END)
        campo_nome.insert(0, nome)

        # Preenche o campo de CPF com o valor selecionado
        campo_cpf.delete(0, tk.END)
        campo_cpf.insert(0, cpf)

        # Preenche o campo de telefone com o valor selecionado
        campo_telefone.delete(0, tk.END)
        campo_telefone.insert(0, telefone)


    # Defini√ß√£o da fun√ß√£o `cadastrar` que ser√° respons√°vel
    #       por cadastrar um novo cliente
    def cadastrar():

        # Obt√©m o nome do cliente a partir do campo de entrada de texto `campo_nome`
        # O m√©todo `get()` recupera o valor inserido no campo e `strip()`
        #       remove espa√ßos extras no in√≠cio e no final.
        nome = campo_nome.get().strip()

        # Obt√©m o CPF do cliente a partir do campo de entrada de texto `campo_cpf`
        cpf = campo_cpf.get().strip()

        # Obt√©m o telefone do cliente a partir do campo de
        #       entrada de texto `campo_telefone`
        telefone = campo_telefone.get().strip()

        # Verifica se o nome ou o CPF est√£o vazios
        # Caso algum dos dois esteja vazio, exibe uma mensagem de
        #       erro e a fun√ß√£o √© interrompida com `return`
        if not nome or not cpf:

            # `messagebox.showerror` exibe uma janela de erro com
            #       t√≠tulo "Erro" e a mensagem "Nome e CPF s√£o obrigat√≥rios!"
            # `parent=janela` faz com que a janela de erro seja modal, ou
            #       seja, ficar√° sobre a janela principal (`janela`)
            messagebox.showerror("Erro",
                                 "Nome e CPF s√£o obrigat√≥rios!",
                                 parent=janela)

            # A fun√ß√£o retorna sem fazer mais nada, impedindo o
            #       cadastro de clientes com campos obrigat√≥rios vazios
            return

        # Verifica se j√° existe um cliente com o CPF fornecido na cole√ß√£o de clientes
        if colecao_clientes.find_one({"cpf": cpf}):

            # Se um cliente com o CPF j√° estiver cadastrado, exibe uma mensagem de erro
            # `messagebox.showerror` exibe uma janela com t√≠tulo "Erro" e
            #       a mensagem "CPF j√° cadastrado!"
            # `parent=janela` garante que a janela de erro ser√° exibida
            #       sobre a janela principal (`janela`)
            messagebox.showerror("Erro",
                                 "CPF j√° cadastrado!",
                                 parent=janela)

            # A fun√ß√£o retorna, impedindo o cadastro de um
            #       cliente com CPF j√° existente
            return

        # Se o CPF n√£o estiver cadastrado, o c√≥digo prossegue com o cadastro do cliente
        # `colecao_clientes.insert_one()` insere o novo cliente na cole√ß√£o de clientes
        # O dicion√°rio cont√©m os dados do cliente: nome, CPF e telefone
        colecao_clientes.insert_one({"nome": nome, "cpf": cpf, "telefone": telefone})

        # Exibe uma janela de informa√ß√£o com t√≠tulo "Sucesso" e a
        #       mensagem "Cliente cadastrado com sucesso!"
        # `parent=janela` garante que a janela de sucesso ser√°
        #       exibida sobre a janela principal (`janela`)
        messagebox.showinfo("Sucesso",
                            "Cliente cadastrado com sucesso!",
                            parent=janela)

        # Atualiza a tabela para refletir o cadastro do novo cliente
        carregar_lista()

        # Limpa os campos de entrada para preparar para
        #       um novo cadastro ou edi√ß√£o
        limpar_campos()


    # Fun√ß√£o para alterar os dados de um cliente existente
    def alterar():

        # Verifica se algum cliente foi selecionado na tabela
        selecionado = tabela_clientes.selection()

        # Se nenhum cliente foi selecionado, exibe uma mensagem de erro
        # `messagebox.showerror` exibe uma janela de erro com
        #       t√≠tulo "Erro" e a mensagem "Selecione um cliente!"
        # `parent=janela` garante que a janela de erro ser√°
        #       exibida sobre a janela principal (`janela`)
        if not selecionado:
            messagebox.showerror("Erro",
                                 "Selecione um cliente!",
                                 parent=janela)

            # Retorna para interromper a execu√ß√£o da fun√ß√£o
            return

        # Se um cliente foi selecionado, obt√©m os dados do cliente da tabela
        valores = tabela_clientes.item(selecionado[0], "values")

        # O primeiro valor (ID do cliente) √© armazenado na vari√°vel `_id`
        _id = valores[0]

        # Obt√©m os dados fornecidos nos campos de
        #       entrada (nome, CPF e telefone) e os limpa
        # `strip()` remove espa√ßos em branco no in√≠cio e no final dos valores
        nome = campo_nome.get().strip()
        cpf = campo_cpf.get().strip()
        telefone = campo_telefone.get().strip()

        # Verifica se o nome ou o CPF est√£o vazios.
        # `if not nome or not cpf:` retorna True se qualquer um
        #       dos campos obrigat√≥rios estiver vazio.
        if not nome or not cpf:

            # Exibe uma janela de erro informando que nome e CPF s√£o obrigat√≥rios.
            # `messagebox.showerror("Erro", "Nome e CPF s√£o
            #       obrigat√≥rios!")` exibe a janela de erro.
            # `parent=janela` define que a janela de erro ser√°
            #       exibida sobre a janela principal.
            messagebox.showerror("Erro",
                                 "Nome e CPF s√£o obrigat√≥rios!",
                                 parent=janela)

            # Interrompe a execu√ß√£o da fun√ß√£o e n√£o realiza o
            #       cadastro se houver campos obrigat√≥rios vazios.
            return

        # Atualiza os dados do cliente no banco de dados.
        # `colecao_clientes.update_one(...)` atualiza um √∫nico documento no MongoDB.
        # `{"_id": ObjectId(_id)}` encontra o cliente pelo ID,
        #       onde `_id` √© convertido para ObjectId.
        # `{"$set": {"nome": nome, "cpf": cpf, "telefone": telefone}}`
        #       define os novos valores para os campos.
        colecao_clientes.update_one(

            # Condi√ß√£o para encontrar o cliente pelo ID.
            {"_id": ObjectId(_id)},

            # Dados a serem atualizados.
            {"$set": {"nome": nome, "cpf": cpf, "telefone": telefone}})

        # Exibe uma janela de sucesso ap√≥s atualizar os dados do cliente.
        # `messagebox.showinfo("Sucesso", "Cliente atualizado com sucesso!")`
        #       exibe a mensagem de sucesso.
        # `parent=janela` define que a janela de sucesso ser√°
        #       exibida sobre a janela principal.
        messagebox.showinfo("Sucesso",
                            "Cliente atualizado com sucesso!",
                            parent=janela)

        # Chama a fun√ß√£o `carregar_lista()` para recarregar a tabela de clientes.
        # A tabela ser√° atualizada com as informa√ß√µes mais recentes ap√≥s a altera√ß√£o.
        carregar_lista()

        # Chama a fun√ß√£o `limpar_campos()` para limpar os campos de entrada.
        # Isso prepara os campos para o pr√≥ximo uso, seja
        #       para cadastrar ou alterar outro cliente.
        limpar_campos()


    # Define a fun√ß√£o 'excluir', que ser√° chamada quando o
    #       usu√°rio desejar excluir um cliente.
    def excluir():

        # Verifica se algum item foi selecionado na tabela.
        # `tabela_clientes.selection()` retorna a linha selecionada na
        #       tabela, se houver uma sele√ß√£o.
        # Se nenhum item for selecionado, a lista ficar√° vazia.
        selecionado = tabela_clientes.selection()

        # Se n√£o houver sele√ß√£o (ou seja, a lista 'selecionado' est√°
        #       vazia), exibe uma mensagem de erro.
        # O usu√°rio precisa selecionar um cliente antes de prosseguir.
        if not selecionado:

            # `messagebox.showerror()` exibe uma janela de erro com o
            #       t√≠tulo "Erro" e a mensagem fornecida.
            # `parent=janela` faz com que a janela de erro seja
            #       exibida sobre a janela principal da aplica√ß√£o.
            messagebox.showerror("Erro",
                                 "Selecione um cliente!",
                                 parent=janela)

            # A fun√ß√£o √© interrompida com 'return' caso nenhum
            #       cliente tenha sido selecionado.
            return

        # Obt√©m os valores da linha selecionada na tabela.
        # `tabela_clientes.item(selecionado[0], "values")` retorna os
        #       valores (dados) da linha selecionada.
        # `selecionado[0]` √© o identificador do item selecionado.
        valores = tabela_clientes.item(selecionado[0], "values")

        # O primeiro valor retornado pelos 'valores' √© o ID do cliente,
        #       que √© armazenado na vari√°vel `_id`.
        # Esse ID ser√° utilizado para localizar o cliente no banco de
        #       dados e proceder com a exclus√£o.
        _id = valores[0]

        # Exibe uma caixa de confirma√ß√£o perguntando se o usu√°rio tem
        #       certeza de que deseja excluir o cliente.
        # `messagebox.askyesno()` cria uma janela com bot√µes "Sim" e
        #       "N√£o" para o usu√°rio escolher.
        # Se o usu√°rio clicar em "Sim", a fun√ß√£o retorna True,
        #       permitindo a execu√ß√£o do c√≥digo de exclus√£o.
        if messagebox.askyesno("Confirma√ß√£o",
                               "Tem certeza que deseja excluir este cliente?",
                               parent=janela):

            # Exclui o cliente da cole√ß√£o do banco de dados usando `delete_one()`.
            # A fun√ß√£o `ObjectId(_id)` converte o valor de `_id` (string)
            #       para o formato exigido pelo MongoDB (ObjectId).
            # `colecao_clientes.delete_one()` ir√° excluir o cliente que
            #       corresponde ao ID fornecido.
            colecao_clientes.delete_one({"_id": ObjectId(_id)})

            # Exibe uma janela de sucesso ap√≥s a exclus√£o do cliente.
            # `messagebox.showinfo()` exibe uma caixa de mensagem com o
            #       t√≠tulo "Sucesso" e a mensagem informando que o cliente foi exclu√≠do.
            # `parent=janela` indica que a janela de sucesso ser√° exibida
            #       sobre a janela principal da aplica√ß√£o.
            messagebox.showinfo("Sucesso",
                                "Cliente exclu√≠do com sucesso!",
                                parent=janela)

            # Atualiza a lista exibida na tabela chamando a fun√ß√£o `carregar_lista()`.
            # Essa fun√ß√£o √© respons√°vel por recarregar a tabela
            #       com os dados mais recentes ap√≥s a exclus√£o.
            carregar_lista()

            # Limpa os campos de entrada de texto ap√≥s a exclus√£o do cliente.
            # A fun√ß√£o `limpar_campos()` √© chamada para garantir que os
            #       campos de nome, CPF e telefone fiquem vazios.
            limpar_campos()


    # Define a fun√ß√£o `limpar_campos()`, que √© respons√°vel por
    #       limpar os campos de entrada de dados.
    def limpar_campos():

        # Limpa o conte√∫do do campo de texto `campo_nome`:
        # `campo_nome.delete(0, tk.END)` remove qualquer texto
        #       presente no campo `campo_nome`.
        # O m√©todo `delete()` recebe dois par√¢metros: o primeiro (`0`)
        #       indica o √≠ndice inicial (in√≠cio do campo), e o
        #       segundo (`tk.END`) indica o √≠ndice final (final do campo), ou
        #       seja, apaga todo o conte√∫do do campo.
        campo_nome.delete(0, tk.END)

        # Limpa o conte√∫do do campo de texto `campo_cpf`:
        # Da mesma forma que o campo `campo_nome`, `campo_cpf.delete(0, tk.END)`
        #       apaga todo o texto do campo `campo_cpf`.
        campo_cpf.delete(0, tk.END)

        # Limpa o conte√∫do do campo de texto `campo_telefone`:
        # Aqui, o mesmo processo √© aplicado ao campo `campo_telefone`,
        #       removendo qualquer valor que o usu√°rio tenha digitado.
        campo_telefone.delete(0, tk.END)

        # Remove qualquer sele√ß√£o feita na tabela `tabela_clientes`:
        # `tabela_clientes.selection_remove(*tabela_clientes.selection())`
        #       remove a sele√ß√£o atual na tabela de clientes.
        # `tabela_clientes.selection()` retorna uma lista de itens
        #       selecionados, e `selection_remove()` limpa a sele√ß√£o.
        tabela_clientes.selection_remove(*tabela_clientes.selection())


    # Define a fun√ß√£o `abrir_historico()` que √© respons√°vel
    #       por abrir a tela de hist√≥rico do cliente.
    def abrir_historico():

        # Obt√©m o item selecionado na tabela `tabela_clientes`:
        # `tabela_clientes.selection()` retorna uma lista com os
        #       IDs dos itens selecionados na tabela.
        # Se n√£o houver nenhum item selecionado, `selecionado` ser√° uma lista vazia.
        selecionado = tabela_clientes.selection()

        # Verifica se algum cliente foi selecionado na tabela:
        # Caso n√£o haja nenhum item selecionado, exibe uma mensagem de erro.
        # `messagebox.showerror()` cria uma janela de erro com o
        #       t√≠tulo "Erro" e a mensagem "Selecione um cliente!".
        if not selecionado:
            messagebox.showerror("Erro",
                                 "Selecione um cliente!",
                                 parent=janela)

            # Se n√£o houver sele√ß√£o, a fun√ß√£o √© interrompida.
            return

        # Recupera os dados do cliente selecionado:
        # `tabela_clientes.item(selecionado[0], "values")` retorna os
        #       valores da linha selecionada.
        # O primeiro valor (`_id`) √© o ID do cliente, seguido pelo nome, CPF e
        #       telefone (que s√£o ignorados neste caso com `_`).
        valores = tabela_clientes.item(selecionado[0], "values")
        _id, nome, cpf, _ = valores

        # Chama a fun√ß√£o `tela_historico_cliente_com_filtro()`, passando a
        #       janela, o CPF e o nome do cliente:
        # Esta fun√ß√£o abre uma nova tela para exibir o
        #       hist√≥rico do cliente selecionado.
        tela_historico_cliente_com_filtro(janela, cpf, nome)

    # Chama a fun√ß√£o `carregar_lista()` para atualizar a tabela
    #       com os dados mais recentes dos clientes.
    carregar_lista()

    # Inicia o loop principal da interface gr√°fica da janela:
    # `janela.mainloop()` mant√©m a janela aberta,
    #       aguardando a intera√ß√£o do usu√°rio.
    janela.mainloop()


# Define a fun√ß√£o 'tela_historico_cliente_com_filtro' que recebe tr√™s par√¢metros:
# 'parent' √© a janela principal que servir√° de base para a nova janela,
# 'cpf_cliente' cont√©m o CPF do cliente cujo hist√≥rico ser√° exibido,
# 'nome_cliente' cont√©m o nome do cliente para personaliza√ß√£o do t√≠tulo da janela.
def tela_historico_cliente_com_filtro(parent, cpf_cliente, nome_cliente):

    # Cria uma nova inst√¢ncia de janela do tipo Toplevel, que √© uma janela secund√°ria
    # associada √† janela principal (passada como 'parent'). Essa janela √© independente,
    # permitindo que seja manipulada separadamente da janela principal.
    janela = Toplevel(parent)

    # Define o t√≠tulo da janela rec√©m-criada. A mensagem utiliza o nome do cliente,
    # fornecendo um contexto personalizado para o usu√°rio, por exemplo: "Hist√≥rico do Cliente Jo√£o".
    janela.title(f"Hist√≥rico do Cliente {nome_cliente}")

    # Ajusta o estado da janela para "zoomed", o que faz com que ela seja maximizada,
    # ocupando toda a √°rea de exibi√ß√£o dispon√≠vel na tela do usu√°rio.
    janela.state("zoomed")

    # Aplica um conjunto de estilos e configura√ß√µes visuais √† janela, utilizando
    # a fun√ß√£o 'criar_estilo_geral'. Essa fun√ß√£o, que deve ter sido definida previamente,
    # padroniza a apar√™ncia da interface, definindo fontes, cores, espa√ßamentos, etc.
    criar_estilo_geral(janela)

    # Cria um frame principal que servir√° como cont√™iner para os componentes
    #      da interface dentro da janela.
    # `ttk.Frame(janela)` cria um novo frame dentro da janela principal `janela`,
    #      permitindo organizar os elementos de forma estruturada.
    # `frame_main.pack(fill="both", expand=True, padx=10, pady=10)` posiciona o frame
    #      dentro da janela e define suas propriedades de layout.
    # O par√¢metro `fill="both"` permite que o frame ocupe todo o espa√ßo
    #      dispon√≠vel tanto na largura quanto na altura.
    # `expand=True` faz com que o frame se expanda conforme a janela √©
    #      redimensionada, garantindo um ajuste din√¢mico.
    # `padx=10` e `pady=10` adicionam 10 pixels de espa√ßamento ao redor do frame,
    #      criando uma margem para evitar que os elementos fiquem colados nas bordas.
    frame_main = ttk.Frame(janela)
    frame_main.pack(fill="both", expand=True, padx=10, pady=10)

    # T√≠tulo da tela, incluindo nome e CPF do cliente
    # Cria um r√≥tulo (`Label`) que ser√° utilizado como t√≠tulo da tela.
    # `ttk.Label(frame_main, ...)` cria um r√≥tulo dentro do `frame_main`, garantindo
    #      que ele fique alinhado com os outros elementos da interface.
    # `text=f"Hist√≥rico de Reservas do Cliente {nome_cliente} (CPF: {cpf_cliente})"` define o texto do r√≥tulo,
    # utilizando f-strings para inserir dinamicamente o nome e CPF do cliente,
    #      tornando o t√≠tulo personalizado.
    # `font=("Arial", 16, "bold")` define a fonte do texto como Arial,
    #      tamanho 16 e em negrito (`bold`),
    #      tornando o t√≠tulo mais destacado para facilitar a leitura.
    # `foreground="#3F51B5"` define a cor do texto como um tom de azul (`#3F51B5`),
    #      garantindo contraste e um visual profissional.
    # `lbl_title.pack(pady=10)` posiciona o r√≥tulo na tela com `pack()`, utilizando `pady=10`
    # para adicionar um espa√ßamento vertical de 10 pixels entre o t√≠tulo e os elementos abaixo dele.
    lbl_title = ttk.Label(frame_main,
                          text=f"Hist√≥rico de Reservas do Cliente {nome_cliente} (CPF: {cpf_cliente})",
                          font=("Arial", 16, "bold"),
                          foreground="#3F51B5")
    lbl_title.pack(pady=10)

    # =========================================================================
    # Frame de Filtros (Data e Status)
    # =========================================================================

    # Cria um frame (`frame_filtros`) dentro do `frame_main`, que ser√°
    #      respons√°vel por organizar os campos de filtro.
    frame_filtros = ttk.Frame(frame_main)

    # Posiciona o frame na interface usando o m√©todo `pack()`,
    #      garantindo que ele seja exibido corretamente.
    # O par√¢metro `pady=5` adiciona um espa√ßamento vertical de 5 pixels,
    #      separando este frame dos demais elementos da tela.
    frame_filtros.pack(pady=5)

    # ==================================================================
    # Filtro: Data In√≠cio
    # ==================================================================

    # Cria um r√≥tulo (`Label`) para indicar o campo de filtro "Data In√≠cio".
    # Esse r√≥tulo ser√° exibido ao lado do campo de sele√ß√£o de data,
    #      ajudando o usu√°rio a identificar sua fun√ß√£o.
    lbl_di = ttk.Label(frame_filtros, text="Data In√≠cio:")

    # Posiciona o r√≥tulo na grade (`grid`) do `frame_filtros`.
    # `row=0` e `column=0` indicam que o r√≥tulo ser√° inserido na primeira
    #      linha e na primeira coluna do frame.
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical de 5 pixels ao redor do r√≥tulo.
    # `sticky="e"` alinha o texto do r√≥tulo √† direita dentro da c√©lula,
    #      garantindo que ele fique pr√≥ximo ao campo de entrada.
    lbl_di.grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada de data (`DateEntry`) para permitir que o
    #      usu√°rio selecione a data inicial do filtro.
    # O campo ser√° posicionado ao lado do r√≥tulo "Data In√≠cio".
    # `date_pattern="dd/MM/yyyy"` define o formato de exibi√ß√£o da data
    #      como "dia/m√™s/ano" (padr√£o brasileiro).
    # `width=12` define a largura do campo para comportar a data no
    #      formato especificado, garantindo uma boa apresenta√ß√£o.
    date_ini = DateEntry(frame_filtros, date_pattern="dd/MM/yyyy", width=12)

    # Posiciona o campo de entrada de data na grade (`grid`) dentro do `frame_filtros`.
    # `row=0` e `column=1` indicam que o campo ser√° inserido na
    #      primeira linha e na segunda coluna do frame.
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical
    #      de 5 pixels ao redor do campo, garantindo espa√ßamento adequado.
    date_ini.grid(row=0, column=1, padx=5, pady=5)

    # ==================================================================
    # Filtro: Data Fim
    # ==================================================================

    # Cria um r√≥tulo (`Label`) para indicar o campo de filtro "Data Fim".
    # Esse r√≥tulo ser√° exibido ao lado do campo de sele√ß√£o de data final,
    #      ajudando o usu√°rio a identificar sua fun√ß√£o.
    lbl_df = ttk.Label(frame_filtros, text="Data Fim:")

    # Posiciona o r√≥tulo na grade (`grid`) dentro do `frame_filtros`.
    # `row=0` e `column=2` indicam que o r√≥tulo ser√° inserido na
    #      primeira linha e na terceira coluna do frame.
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical de 5 pixels ao
    #      redor do r√≥tulo, garantindo espa√ßamento adequado.
    # `sticky="e"` alinha o texto do r√≥tulo √† direita dentro da c√©lula,
    #      posicionando-o pr√≥ximo ao campo de entrada de data.
    lbl_df.grid(row=0, column=2, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada de data (`DateEntry`) para permitir que o
    #      usu√°rio selecione a data final do filtro.
    # O campo ser√° posicionado ao lado do r√≥tulo "Data Fim".
    # `date_pattern="dd/MM/yyyy"` define o formato de exibi√ß√£o da data
    #      como "dia/m√™s/ano" (padr√£o brasileiro).
    # `width=12` define a largura do campo para comportar a data no
    #      formato especificado, garantindo uma boa apresenta√ß√£o.
    date_fim = DateEntry(frame_filtros, date_pattern="dd/MM/yyyy", width=12)

    # Posiciona o campo de entrada de data na grade (`grid`) dentro do `frame_filtros`.
    # `row=0` e `column=3` indicam que o campo ser√° inserido na primeira
    #      linha e na quarta coluna do frame.
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical de 5 pixels ao
    #      redor do campo, garantindo espa√ßamento adequado.
    date_fim.grid(row=0, column=3, padx=5, pady=5)

    # ==================================================================
    # Filtro: Status
    # ==================================================================

    # Cria um r√≥tulo (`Label`) para indicar o campo de filtro "Status".
    # Esse r√≥tulo ser√° exibido ao lado do menu suspenso (Combobox) para
    #      que o usu√°rio possa selecionar o status desejado.
    lbl_st = ttk.Label(frame_filtros, text="Status:")

    # Posiciona o r√≥tulo na grade (`grid`) dentro do `frame_filtros`.
    # `row=0` e `column=4` indicam que o r√≥tulo ser√° inserido na primeira
    #      linha e na quinta coluna do frame.
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical de 5 pixels
    #      ao redor do r√≥tulo, garantindo um espa√ßamento adequado.
    # `sticky="e"` alinha o texto do r√≥tulo √† direita dentro da c√©lula,
    #      posicionando-o corretamente em rela√ß√£o ao campo de sele√ß√£o.
    lbl_st.grid(row=0, column=4, padx=5, pady=5, sticky="e")

    # Cria um menu suspenso (`Combobox`) para permitir a sele√ß√£o do status da reserva.
    # O `Combobox` restringe as op√ß√µes de entrada para evitar erros de digita√ß√£o.
    # `values=["", "Reservado", "Finalizado", "Cancelado", "Ocupada"]` define a
    #      lista de op√ß√µes dispon√≠veis no menu suspenso.
    # A primeira op√ß√£o √© uma string vazia (`""`), permitindo que o usu√°rio n√£o
    #      selecione nenhum status caso deseje visualizar todos os registros.
    # `state="readonly"` impede que o usu√°rio digite valores manualmente,
    #      limitando a escolha apenas √†s op√ß√µes predefinidas.
    # `width=12` define a largura do `Combobox` para garantir que as
    #      op√ß√µes sejam exibidas corretamente sem cortar o texto.
    combo_st = ttk.Combobox(frame_filtros,
                            values=["", "Reservado", "Finalizado", "Cancelado", "Ocupada"],
                            state="readonly",
                            width=12)

    # Posiciona o menu suspenso (`Combobox`) dentro da grade (`grid`) do `frame_filtros`.
    # `row=0` e `column=5` indicam que o `Combobox` ser√° inserido na
    #      primeira linha e na sexta coluna do frame.
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical
    #      de 5 pixels ao redor do `Combobox`,
    #      garantindo um alinhamento adequado e uma apar√™ncia organizada.
    combo_st.grid(row=0, column=5, padx=5, pady=5)

    # Define o valor inicial do `Combobox` como uma op√ß√£o vazia.
    # Isso garante que, ao abrir a tela, o campo de status n√£o esteja pr√©-selecionado,
    # permitindo que o usu√°rio visualize todas as op√ß√µes sem um filtro aplicado por padr√£o.
    combo_st.set("")

    # ==================================================================
    # Frame para Filtros Adicionais (Bloco, Vaga, Carro e Placa)
    # ==================================================================

    # Cria um novo frame (`frame_col_filtros`) dentro do `frame_main`.
    # Esse frame ser√° respons√°vel por organizar os filtros adicionais,
    #      como bloco, vaga, carro e placa.
    frame_col_filtros = ttk.Frame(frame_main)

    # Posiciona o `frame_col_filtros` dentro do `frame_main` utilizando o m√©todo `pack()`.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels entre
    #      este frame e os demais elementos,
    #      garantindo um layout bem distribu√≠do.
    frame_col_filtros.pack(pady=5)

    # ==================================================================
    # Filtro: Bloco
    # ==================================================================

    # Cria um r√≥tulo (`Label`) para indicar o campo de filtro "Bloco".
    # Esse r√≥tulo ser√° exibido ao lado do campo de entrada onde o
    #      usu√°rio poder√° digitar o bloco desejado.
    # `text="Filtrar Bloco:"` define o texto exibido no r√≥tulo, tornando a
    #      funcionalidade clara para o usu√°rio.
    ttk.Label(frame_col_filtros,
              text="Filtrar Bloco:").grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (`Entry`) para que o usu√°rio possa inserir
    #      manualmente um valor para o filtro de bloco.
    # `frame_col_filtros` define o local onde o campo de entrada ser√°
    #      posicionado dentro da interface.
    # `width=15` define a largura do campo de entrada, permitindo a
    #      digita√ß√£o de textos de tamanho adequado.
    entry_filtro_bloco = ttk.Entry(frame_col_filtros, width=15)

    # Posiciona o campo de entrada na grade (`grid`) dentro do `frame_col_filtros`.
    # `row=0` e `column=1` indicam que o campo ser√° inserido na primeira
    #      linha e na segunda coluna do frame.
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical
    #      de 5 pixels ao redor do campo,
    #      garantindo um alinhamento adequado e um visual organizado.
    entry_filtro_bloco.grid(row=0, column=1, padx=5, pady=5)

    # ==================================================================
    # Filtro: Vaga
    # ==================================================================

    # Cria um r√≥tulo (`Label`) dentro do frame `frame_col_filtros`
    #      para indicar o campo de filtro "Vaga".
    # Esse r√≥tulo ser√° exibido √† esquerda do campo de entrada onde o
    #      usu√°rio poder√° digitar o n√∫mero da vaga desejada.
    # `text="Filtrar Vaga:"` define o texto exibido no r√≥tulo, deixando claro
    #      que este campo serve para filtrar vagas espec√≠ficas.
    # O r√≥tulo ajuda o usu√°rio a entender qual tipo de informa√ß√£o
    #      deve ser inserida no campo ao lado.
    ttk.Label(frame_col_filtros,
              text="Filtrar Vaga:").grid(row=0, column=2, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (`Entry`) para que o usu√°rio possa inserir
    #      manualmente um valor para o filtro de vaga.
    # O campo de entrada permitir√° a digita√ß√£o do n√∫mero da vaga que o
    #      usu√°rio deseja visualizar na tabela.
    # `frame_col_filtros` √© o cont√™iner onde o campo ser√° posicionado,
    #      garantindo que ele esteja dentro da se√ß√£o de filtros.
    # `width=15` define a largura do campo de entrada, garantindo que
    #      ele tenha um tamanho adequado para acomodar n√∫meros de vagas
    #      sem que fiquem cortados ou ultrapassem o limite de exibi√ß√£o.
    entry_filtro_vaga = ttk.Entry(frame_col_filtros, width=15)

    # Posiciona o campo de entrada na grade (`grid`) dentro do `frame_col_filtros`,
    #      garantindo uma organiza√ß√£o estruturada.
    # `row=0` e `column=3` indicam que o campo ser√° inserido na primeira
    #      linha e na quarta coluna do frame, garantindo o alinhamento
    #      correto ao lado do r√≥tulo correspondente.
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical
    #      de 5 pixels ao redor do campo, garantindo que ele n√£o fique muito
    #      pr√≥ximo dos outros elementos e
    #      tenha um visual organizado.
    # O espa√ßamento melhora a usabilidade, facilitando a leitura e a
    #      intera√ß√£o do usu√°rio com os filtros.
    entry_filtro_vaga.grid(row=0, column=3, padx=5, pady=5)

    # ==================================================================
    # Filtro: Carro (Modelo)
    # ==================================================================

    # Cria um r√≥tulo (`Label`) dentro do frame `frame_col_filtros`
    #      para indicar o campo de filtro "Carro".
    # Esse r√≥tulo ser√° exibido √† esquerda do campo de entrada, ajudando o
    #      usu√°rio a entender que este filtro √© destinado √† busca de
    #      ve√≠culos com base no modelo do carro.
    # `text="Filtrar Carro:"` define o texto exibido no r√≥tulo,
    #      deixando claro que o usu√°rio deve inserir o nome ou parte do
    #      modelo do carro para realizar a filtragem na tabela.
    # O uso do r√≥tulo melhora a acessibilidade e a experi√™ncia do
    #      usu√°rio, tornando o layout mais intuitivo.
    ttk.Label(frame_col_filtros,
              text="Filtrar Carro:").grid(row=0, column=4, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (`Entry`) que permitir√° ao usu√°rio
    #      inserir manualmente um valor
    # para filtrar os registros de ve√≠culos com base no modelo do carro.
    # O usu√°rio pode digitar um modelo completo ou parte do nome do
    #      carro para refinar os resultados na tabela.
    # `frame_col_filtros` define que esse campo pertence ao
    #      cont√™iner de filtros adicionais.
    # `width=15` define a largura do campo de entrada, garantindo
    #      espa√ßo suficiente para a digita√ß√£o de nomes de modelos de
    #      ve√≠culos sem comprometer a legibilidade.
    # Esse tamanho foi definido para balancear a usabilidade e o
    #      espa√ßo dispon√≠vel na interface.
    entry_filtro_carro = ttk.Entry(frame_col_filtros, width=15)

    # Posiciona o campo de entrada na grade (`grid`) dentro do `frame_col_filtros`,
    # garantindo uma organiza√ß√£o estruturada do layout.
    # `row=0` e `column=5` indicam que o campo ser√° inserido na primeira
    #      linha e na sexta coluna do frame, garantindo o alinhamento correto ao
    #      lado do r√≥tulo correspondente "Filtrar Carro:".
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical
    #      de 5 pixels ao redor do campo, melhorando o espa√ßamento entre os
    #      elementos e evitando que fiquem muito pr√≥ximos uns dos outros.
    # Esse espa√ßamento contribui para um layout mais organizado e f√°cil de usar.
    entry_filtro_carro.grid(row=0, column=5, padx=5, pady=5)

    # ==================================================================
    # Filtro: Placa
    # ==================================================================

    # Cria um r√≥tulo (`Label`) dentro do frame `frame_col_filtros`
    #      para indicar o campo de filtro "Placa".
    # Esse r√≥tulo ser√° posicionado √† esquerda do campo de entrada,
    #      permitindo que o usu√°rio compreenda que esse filtro √©
    #      destinado √† busca de ve√≠culos com base na placa.
    # `text="Filtrar Placa:"` define o texto exibido no r√≥tulo,
    #      deixando claro que o usu√°rio deve inserir parte ou a placa
    #      completa do ve√≠culo para realizar a filtragem na tabela.
    # Esse r√≥tulo melhora a usabilidade e torna a interface mais intuitiva.
    ttk.Label(frame_col_filtros,
              text="Filtrar Placa:").grid(row=0, column=6, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (`Entry`) que permitir√° ao usu√°rio
    #      inserir manualmente uma placa de ve√≠culo
    #      para filtrar os registros na tabela. O usu√°rio pode digitar a
    #      placa completa ou apenas uma parte dela
    #      para encontrar ve√≠culos correspondentes.
    # `frame_col_filtros` define que esse campo pertence ao
    #      cont√™iner de filtros adicionais.
    # `width=15` define a largura do campo de entrada, garantindo
    #      espa√ßo suficiente para a digita√ß√£o de placas de ve√≠culos sem
    #      comprometer a visibilidade ou a experi√™ncia do usu√°rio.
    # Esse tamanho foi ajustado para balancear o espa√ßo dispon√≠vel na
    #      interface e manter a harmonia do layout.
    entry_filtro_placa = ttk.Entry(frame_col_filtros, width=15)

    # Posiciona o campo de entrada na grade (`grid`) dentro do `frame_col_filtros`,
    # garantindo uma estrutura organizada e alinhada com os demais filtros.
    # `row=0` e `column=7` indicam que o campo ser√° inserido na primeira
    #      linha e na oitava coluna do frame, garantindo seu correto
    #      alinhamento ao lado do r√≥tulo "Filtrar Placa:".
    # `padx=5, pady=5` adicionam espa√ßamentos horizontal e vertical
    #      de 5 pixels ao redor do campo, evitando que ele fique muito
    #      pr√≥ximo de outros elementos e melhorando a distribui√ß√£o visual.
    # Esse espa√ßamento proporciona uma interface mais
    #      organizada e agrad√°vel para o usu√°rio.
    entry_filtro_placa.grid(row=0, column=7, padx=5, pady=5)

    # ==================================================================
    # Cria√ß√£o da √Årea da Tabela (Treeview)
    # ==================================================================

    # Cria um frame (`frame_tv`) dentro do `frame_main`, que ser√° respons√°vel
    # por conter a tabela de exibi√ß√£o dos dados (Treeview).
    # Esse frame serve como um cont√™iner para melhor organiza√ß√£o e
    #      manipula√ß√£o da tabela na interface.
    frame_tv = ttk.Frame(frame_main)

    # Posiciona o frame da tabela (`frame_tv`) dentro do `frame_main`,
    #      utilizando o m√©todo `pack()`.
    # `fill="both"` faz com que o frame ocupe todo o espa√ßo dispon√≠vel,
    #      tanto na largura quanto na altura.
    # `expand=True` permite que o frame cres√ßa conforme a janela for
    #      redimensionada, garantindo uma interface flex√≠vel.
    frame_tv.pack(fill="both", expand=True)

    # ==================================================================
    # Defini√ß√£o das Colunas da Tabela (Treeview)
    # ==================================================================

    # Cria uma tupla (`tv_colunas`) contendo os nomes das colunas que
    #      ser√£o exibidas na tabela.
    # Cada string dentro da tupla representa uma coluna da tabela,
    #      permitindo a exibi√ß√£o estruturada dos dados.
    # As colunas incluem informa√ß√µes relevantes, como ID, datas,
    #      hor√°rios, ve√≠culo e status da reserva.
    tv_colunas = (
        "id", "data_entrada", "hora_entrada", "data_saida", "hora_saida",
        "bloco", "vaga", "veiculo", "tipo", "placa", "status", "valor_total"
    )

    # ==================================================================
    # Cria√ß√£o da Tabela (Treeview)
    # ==================================================================

    # Cria a tabela (`Treeview`) dentro do `frame_tv`, onde os
    #      dados ser√£o exibidos de forma tabular.
    # `columns=tv_colunas` define que a tabela ter√° as colunas
    #      especificadas na tupla `tv_colunas`.
    # `show="headings"` garante que apenas os t√≠tulos das colunas
    #      sejam exibidos,
    # ocultando a primeira coluna padr√£o do Treeview, que normalmente
    #      exibe um √≠ndice hier√°rquico.
    # `height=20` define que a tabela exibir√° at√© 20 linhas por vez,
    #      antes de precisar de rolagem vertical.
    tv = ttk.Treeview(frame_tv,
                      columns=tv_colunas,
                      show="headings",
                      height=20)

    # Posiciona a tabela (`tv`) dentro do `frame_tv` utilizando o m√©todo `pack()`.
    # `fill="both"` faz com que a tabela ocupe todo o espa√ßo dispon√≠vel,
    #      garantindo que os dados sejam exibidos corretamente.
    # `expand=True` permite que a tabela se ajuste ao redimensionamento da
    #      janela, garantindo flexibilidade na interface.
    tv.pack(fill="both", expand=True)

    # Dicion√°rio com os t√≠tulos dos cabe√ßalhos para cada coluna
    cabecalhos = {
        "id": "ID",
        "data_entrada": "Data Entrada",
        "hora_entrada": "Hora Entrada",
        "data_saida": "Data Sa√≠da",
        "hora_saida": "Hora Sa√≠da",
        "bloco": "Bloco",
        "vaga": "Vaga",
        "veiculo": "Ve√≠culo",
        "tipo": "Tipo",
        "placa": "Placa",
        "status": "Status",
        "valor_total": "Valor Total (R$)"
    }

    # ==================================================================
    # Configura√ß√£o das Colunas da Tabela (Treeview)
    # ==================================================================

    # Percorre todas as colunas definidas na tupla `tv_colunas`, aplicando
    #      configura√ß√µes individuais para cada uma delas.
    # O objetivo desse la√ßo `for` √© definir os t√≠tulos (cabe√ßalhos) e
    #      ajustar a largura de cada coluna da tabela.
    for c in tv_colunas:

        # Define o t√≠tulo do cabe√ßalho da coluna, utilizando um
        #      dicion√°rio chamado `cabecalhos`.
        # Esse dicion√°rio cont√©m os nomes formatados das colunas para
        #      melhor legibilidade na interface.
        # `tv.heading(c, text=cabecalhos[c])` configura o nome da
        #      coluna na interface, garantindo que
        #      o t√≠tulo correto seja exibido no cabe√ßalho da tabela.
        tv.heading(c, text=cabecalhos[c])

        # Define a largura padr√£o para cada coluna da tabela.
        # `tv.column(c, width=110)` ajusta o tamanho da coluna
        #      para 110 pixels, garantindo que os dados
        # fiquem vis√≠veis sem ficarem muito espremidos ou muito espa√ßados.
        # Esse valor pode ser ajustado conforme necess√°rio para
        #      diferentes resolu√ß√µes de tela.
        tv.column(c, width=110)

    # ==================================================================
    # R√≥tulo de Resumo (Total de Itens e Soma dos Valores)
    # ==================================================================

    # Cria um r√≥tulo (`Label`) que exibir√° um resumo das informa√ß√µes filtradas na tabela.
    # O r√≥tulo conter√° o total de registros exibidos e a soma total dos valores, facilitando
    # a an√°lise dos dados pelo usu√°rio.
    # `text="Total de itens: 0   |   Soma Valor: R$ 0,00"` define um valor inicial para o r√≥tulo,
    # indicando que nenhum item foi carregado ainda e que o total est√° zerado.
    lbl_resumo = ttk.Label(frame_main,
                           text="Total de itens: 0   |   Soma Valor: R$ 0,00")

    # Posiciona o r√≥tulo de resumo (`lbl_resumo`) na interface
    #      utilizando o m√©todo `pack()`.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels, separando o
    #      r√≥tulo dos demais elementos da tela,
    #      garantindo que ele fique bem vis√≠vel e n√£o colado na tabela.
    lbl_resumo.pack(pady=5)

    # ==================================================================
    # Fun√ß√£o para Filtrar os Dados na Tabela
    # ==================================================================

    # Define a fun√ß√£o `filtrar()`, que ser√° respons√°vel por aplicar os filtros
    # definidos pelo usu√°rio e exibir os resultados filtrados na tabela (Treeview).
    def filtrar():

        # --------------------------------------------------------------
        # Limpeza da Tabela Antes da Inser√ß√£o dos Novos Dados
        # --------------------------------------------------------------

        # Remove todos os itens atualmente exibidos na tabela
        #      antes de carregar novos resultados.
        # `tv.get_children()` retorna uma lista com todos os itens da tabela.
        # `tv.delete(*tv.get_children())` deleta todos os registros da tabela de uma vez,
        # garantindo que os novos dados exibidos sejam apenas aqueles
        #      que atendem aos filtros aplicados.
        tv.delete(*tv.get_children())

        # --------------------------------------------------------------
        # Captura dos Valores dos Filtros
        # --------------------------------------------------------------

        # Obt√©m os valores inseridos pelo usu√°rio nos campos de filtro para
        #      serem utilizados na busca dos dados.
        # Esses valores ser√£o comparados com os registros do banco de
        #      dados ou cole√ß√£o de dados.

        # Captura as datas selecionadas nos widgets `DateEntry` para os
        #      filtros de intervalo de datas.
        # Os widgets `DateEntry` retornam um objeto do tipo `date`, que
        #      ser√° utilizado para compara√ß√£o com as datas dos registros.
        filtro_data_ini = date_ini.get_date()  # Data de in√≠cio do filtro
        filtro_data_fim = date_fim.get_date()  # Data final do filtro

        # Captura o valor selecionado no `Combobox` de Status.
        # `combo_st.get().strip()` obt√©m o valor do filtro removendo
        #      espa√ßos extras antes e depois do texto.
        filtro_status = combo_st.get().strip()  # Status do filtro (exemplo: "Reservado", "Finalizado")

        # Captura os valores digitados nos campos de texto para os filtros adicionais.
        # `strip().lower()` √© aplicado para remover espa√ßos extras e
        #      converter o texto para min√∫sculas, tornando a compara√ß√£o
        #      entre valores insens√≠vel a mai√∫sculas e min√∫sculas.

        filtro_bloco = entry_filtro_bloco.get().strip().lower()  # Filtro pelo Bloco
        filtro_vaga = entry_filtro_vaga.get().strip().lower()  # Filtro pelo N√∫mero da Vaga
        filtro_carro = entry_filtro_carro.get().strip().lower()  # Filtro pelo Modelo do Ve√≠culo
        filtro_placa = entry_filtro_placa.get().strip().lower()  # Filtro pela Placa do Ve√≠culo

        # --------------------------------------------------------------
        # Consulta ao Banco de Dados para Buscar as Reservas do Cliente
        # --------------------------------------------------------------

        # Define o crit√©rio de consulta para buscar todas as reservas
        #      pertencentes ao cliente especificado.
        # O filtro √© aplicado utilizando o CPF do cliente (`cpf_cliente`),
        #      garantindo que apenas as reservas
        #      desse cliente sejam recuperadas.
        query = {"cliente_cpf": cpf_cliente}

        # Executa a consulta no banco de dados para encontrar todas as
        #      reservas que correspondem ao CPF do cliente.
        # `colecao_reservas.find(query)` retorna um cursor com os registros encontrados.
        # `list(colecao_reservas.find(query))` converte esse cursor em
        #      uma lista de dicion√°rios,
        #      onde cada dicion√°rio representa uma reserva do cliente.
        docs = list(colecao_reservas.find(query))

        # Inicializa a vari√°vel `soma_valor` com 0.0 para acumular o valor
        #      total das reservas do cliente.
        # Essa vari√°vel ser√° usada posteriormente para exibir o total dos
        #      valores das reservas filtradas.
        soma_valor = 0.0

        # --------------------------------------------------------------
        # Itera√ß√£o Sobre os Registros Encontrados
        # --------------------------------------------------------------

        # Percorre cada documento (reserva) retornado pela consulta ao banco de dados.
        # Cada reserva cont√©m diversas informa√ß√µes que ser√£o extra√≠das e processadas.
        for d in docs:

            # Obt√©m o identificador √∫nico da reserva (ID).
            # O campo `_id` √© uma chave prim√°ria no banco de dados MongoDB.
            # O `get("_id", "")` garante que, caso o campo n√£o exista,
            #      seja retornada uma string vazia.
            # O valor √© convertido para string (`str()`) para facilitar a
            #      exibi√ß√£o na interface.
            val_id = str(d.get("_id", ""))

            # Obt√©m as informa√ß√µes de data e hora de entrada da reserva.
            # `get("data_entrada", "")` retorna a data de entrada da reserva.
            # Caso o campo n√£o exista, retorna uma string vazia (`""`).
            val_de = d.get("data_entrada", "")
            val_he = d.get("hora_entrada", "")

            # Obt√©m as informa√ß√µes de data e hora de sa√≠da da reserva.
            # `get("data_saida", "")` retorna a data de sa√≠da da reserva.
            # Caso o campo n√£o exista, retorna uma string vazia (`""`).
            val_ds = d.get("data_saida", "")
            val_hs = d.get("hora_saida", "")

            # Obt√©m o bloco onde a reserva foi realizada.
            # `get("bloco", "")` retorna o bloco da reserva.
            # Caso o campo n√£o exista, retorna uma string vazia (`""`).
            val_bl = d.get("bloco", "")

            # Obt√©m o n√∫mero da vaga associada √† reserva.
            # `get("numero_vaga", "")` retorna o n√∫mero da vaga.
            # Caso o campo n√£o exista, retorna uma string vazia (`""`).
            val_vg = d.get("numero_vaga", "")

            # Obt√©m o status da reserva.
            # `get("status", "")` retorna o status da reserva,
            #      como "Reservado", "Finalizado" ou "Cancelado".
            # Caso o campo n√£o exista, retorna uma string vazia (`""`).
            val_st = d.get("status", "")

            # Obt√©m o valor total da reserva.
            # `get("valor_total", 0)` retorna o valor total da reserva.
            # Caso o campo n√£o exista, o valor padr√£o ser√° `0`.
            val_vt = d.get("valor_total", 0)

            # Obt√©m a placa do ve√≠culo associado √† reserva.
            # `get("veiculo_placa", "")` retorna a placa do ve√≠culo.
            # Caso o campo n√£o exista, retorna uma string vazia (`""`).
            veiculo_placa = d.get("veiculo_placa", "")

            # =========================================================================
            # Filtro por intervalo de datas
            # =========================================================================

            # --------------------------------------------------------------
            # Valida√ß√£o da Data de Entrada da Reserva
            # --------------------------------------------------------------

            # Verifica se o campo `val_de` (Data de Entrada) cont√©m algum valor.
            # Isso √© necess√°rio para evitar erros ao tentar converter um
            #      valor nulo ou inv√°lido.
            if val_de:

                try:

                    # Converte a string `val_de` (ex: "15/03/2028") para um objeto de data (`date`).
                    # `datetime.strptime(val_de, "%d/%m/%Y").date()` realiza a convers√£o utilizando o
                    # formato de data brasileiro (dia/m√™s/ano).
                    # Se a convers√£o for bem-sucedida, a vari√°vel `data_entrada_obj`
                    #      conter√° um objeto de data v√°lido.
                    data_entrada_obj = datetime.strptime(val_de, "%d/%m/%Y").date()

                except ValueError:

                    # Caso ocorra um erro na convers√£o (ex: formato inv√°lido),
                    #      define `data_entrada_obj` como `None`.
                    # Isso evita que o c√≥digo tente comparar uma data inv√°lida
                    #      com os filtros, prevenindo falhas.
                    data_entrada_obj = None

                # --------------------------------------------------------------
                # Aplica√ß√£o do Filtro de Data
                # --------------------------------------------------------------

                # Se a convers√£o da data foi bem-sucedida (`data_entrada_obj` n√£o √© `None`),
                # verifica se a data est√° dentro do intervalo selecionado pelo usu√°rio nos filtros.
                if data_entrada_obj:

                    # Se a `data_entrada_obj` for menor que `filtro_data_ini` ou maior que `filtro_data_fim`,
                    # significa que a reserva n√£o est√° dentro do intervalo especificado.
                    # O comando `continue` faz com que a reserva seja ignorada e o
                    #      loop avance para o pr√≥ximo registro.
                    if data_entrada_obj < filtro_data_ini or data_entrada_obj > filtro_data_fim:
                        continue

            # =========================================================================
            # Filtro por Status
            # =========================================================================

            # Verifica se o usu√°rio selecionou um status no filtro (`filtro_status`).
            # Se `filtro_status` n√£o estiver vazio e for diferente do status da reserva (`val_st`),
            # significa que a reserva n√£o corresponde ao crit√©rio de busca.
            # `filtro_status.lower() != val_st.lower()` √© usado para garantir que a compara√ß√£o
            # seja insens√≠vel a mai√∫sculas e min√∫sculas.
            # Se a reserva n√£o atender ao crit√©rio, o comando `continue`
            #      faz com que ela seja ignorada
            #      e o loop passe para o pr√≥ximo registro.
            if filtro_status and filtro_status.lower() != val_st.lower():
                continue

            # =========================================================================
            # Filtro por Bloco
            # =========================================================================

            # Verifica se o usu√°rio digitou um bloco no filtro (`filtro_bloco`).
            # Se `filtro_bloco` n√£o estiver vazio e o bloco da reserva (`val_bl`)
            #      n√£o contiver o valor digitado, a reserva ser√° ignorada.
            # `filtro_bloco not in val_bl.lower()` √© utilizado para
            #      comparar os valores de forma insens√≠vel a
            #      mai√∫sculas e min√∫sculas, garantindo que qualquer
            #      ocorr√™ncia do bloco digitado seja considerada.
            if filtro_bloco and filtro_bloco not in val_bl.lower():
                continue

            # =========================================================================
            # Filtro por Vaga
            # =========================================================================

            # Verifica se o usu√°rio digitou um n√∫mero de vaga no filtro (`filtro_vaga`).
            # Se `filtro_vaga` n√£o estiver vazio e o n√∫mero da vaga na reserva (`val_vg`)
            # n√£o contiver o valor digitado, a reserva ser√° ignorada.
            # `str(val_vg).lower()` √© utilizado para converter o
            #      n√∫mero da vaga em string e evitar erros,
            #      permitindo que a compara√ß√£o seja feita corretamente.
            if filtro_vaga and filtro_vaga not in str(val_vg).lower():
                continue

            # =========================================================================
            # Busca informa√ß√µes adicionais do ve√≠culo (modelo, categoria e placa)
            # =========================================================================

            # Realiza uma consulta na cole√ß√£o de ve√≠culos (`colecao_veiculos`) para obter
            # mais informa√ß√µes sobre o ve√≠culo associado √† reserva.
            # O crit√©rio de busca utiliza a placa do ve√≠culo (`veiculo_placa`) cadastrada na reserva.
            # `find_one({"placa": veiculo_placa})` retorna um √∫nico documento (registro) correspondente.
            doc_veiculo = colecao_veiculos.find_one({"placa": veiculo_placa})

            # =========================================================================
            # Verifica√ß√£o do Resultado da Consulta
            # =========================================================================

            # Se um documento correspondente for encontrado (`doc_veiculo` n√£o for `None`),
            # extrai os detalhes do ve√≠culo a partir dos campos dispon√≠veis no banco de dados.
            if doc_veiculo:

                # Obt√©m o modelo do ve√≠culo.
                # `get("modelo", "Desconhecido")` retorna o valor do campo `"modelo"` caso exista.
                # Se o campo n√£o for encontrado, retorna `"Desconhecido"` como valor padr√£o.
                val_veiculo = doc_veiculo.get("modelo", "Desconhecido")

                # Obt√©m a categoria do ve√≠culo (exemplo: "Sedan", "SUV", "Hatch").
                # Se a categoria n√£o for encontrada no banco de dados, o
                #      valor padr√£o `"Desconhecido"` ser√° usado.
                val_tipo = doc_veiculo.get("categoria", "Desconhecido")

                # Obt√©m a placa do ve√≠culo.
                # Se o campo `"placa"` n√£o existir no documento, retorna `"Desconhecido"`.
                val_placa = doc_veiculo.get("placa", "Desconhecido")

            # Caso o ve√≠culo n√£o seja encontrado no banco de dados,
            #      define valores padr√£o indicando
            #      que a informa√ß√£o n√£o est√° dispon√≠vel.
            else:

                # Define `"N√£o Encontrado"` para o modelo do ve√≠culo.
                val_veiculo = "N√£o Encontrado"

                # Define `"N√£o Encontrado"` para a categoria do ve√≠culo.
                val_tipo = "N√£o Encontrado"

                # Como a placa j√° est√° armazenada na vari√°vel `veiculo_placa`, usa-se esse valor,
                # garantindo que, mesmo sem informa√ß√µes no banco de dados, a
                #      placa da reserva seja mantida.
                val_placa = veiculo_placa

            # =========================================================================
            # Filtro por Carro (modelo)
            # =========================================================================
            if filtro_carro and filtro_carro not in val_veiculo.lower():
                continue

            # =========================================================================
            # Filtro por Placa
            # =========================================================================
            if filtro_placa and filtro_placa not in val_placa.lower():
                continue

            # =========================================================================
            # Convers√£o e Formata√ß√£o do Valor Total da Reserva
            # =========================================================================

            # Verifica se o valor total da reserva (`val_vt`) √© um n√∫mero v√°lido.
            # `isinstance(val_vt, (int, float))` verifica se `val_vt` √© do
            #      tipo `int` (inteiro) ou `float` (decimal).
            if isinstance(val_vt, (int, float)):

                # Adiciona o valor total da reserva √† vari√°vel `soma_valor`,
                # que acumula o total de todas as reservas filtradas.
                soma_valor += val_vt

                # Formata o valor total para exibi√ß√£o na interface no formato monet√°rio brasileiro (R$).
                # `f"{val_vt:,.2f}"` converte o n√∫mero para string, separando milhares por v√≠rgula
                # e usando ponto para indicar as casas decimais (exemplo: `1,234.56`).
                # `.replace(",", "X").replace(".", ",").replace("X", ".")` ajusta a formata√ß√£o
                # para o padr√£o brasileiro, trocando a v√≠rgula pelos pontos e vice-versa
                # (exemplo final: `1.234,56`).
                valor_formatado = f"{val_vt:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

            # Se `val_vt` n√£o for um n√∫mero v√°lido, define um valor
            #      padr√£o "0,00" para evitar erros.
            else:
                valor_formatado = "0,00"

            # =========================================================================
            # Inser√ß√£o dos Dados na Tabela (Treeview)
            # =========================================================================

            # Insere uma nova linha na tabela (`Treeview`), adicionando os valores formatados
            # da reserva correspondente.
            # `tv.insert("", END, values=(...))` adiciona a linha no final da tabela.
            # Cada item dentro da tupla `values=(...)` representa uma coluna da tabela.
            tv.insert("", END, values=(
                val_id,  # Identificador √∫nico da reserva
                val_de,  # Data de entrada
                val_he,  # Hora de entrada
                val_ds,  # Data de sa√≠da
                val_hs,  # Hora de sa√≠da
                val_bl,  # Bloco da reserva
                val_vg,  # N√∫mero da vaga
                val_veiculo,  # Modelo do ve√≠culo associado √† reserva
                val_tipo,  # Tipo do ve√≠culo (exemplo: Sedan, SUV)
                val_placa,  # Placa do ve√≠culo
                val_st,  # Status da reserva (exemplo: Reservado, Finalizado)
                valor_formatado  # Valor total formatado no padr√£o monet√°rio brasileiro
            ))

        # =========================================================================
        # Atualiza√ß√£o do Resumo (Total de Itens e Soma dos Valores)
        # =========================================================================

        # Atualiza o r√≥tulo de resumo (`lbl_resumo`) com o n√∫mero total de itens filtrados
        # e a soma total dos valores exibidos na tabela.

        # `len(tv.get_children())` retorna o n√∫mero total de registros
        #      atualmente exibidos na `Treeview`.
        # Isso representa o n√∫mero de reservas que atenderam aos
        #      filtros aplicados pelo usu√°rio.

        # `soma_valor:,.2f` formata a soma total dos valores no padr√£o financeiro,
        # garantindo duas casas decimais e separa√ß√£o de milhares.
        # `.replace(".", ",")` ajusta a formata√ß√£o para o padr√£o brasileiro,
        # onde a v√≠rgula √© usada como separador decimal.
        lbl_resumo.config(text=f"Total de itens: {len(tv.get_children())}   |   Soma Valor: R$ {soma_valor:,.2f}".replace(".", ","))

        # =========================================================================
        # Fun√ß√£o para Limpar os Filtros e Restaurar os Valores Iniciais
        # =========================================================================


    # Define a fun√ß√£o `limpar_()`, respons√°vel por resetar os filtros e
    #      limpar os dados exibidos na tabela.
    def limpar_():

        # ---------------------------------------------------------------------
        # Resetando os Filtros de Data
        # ---------------------------------------------------------------------

        # Define os campos de data (`DateEntry`) para a data atual, garantindo que
        # ao limpar os filtros, o intervalo de datas seja reiniciado corretamente.

        # `date_ini.set_date(datetime.now())` ajusta a Data In√≠cio para a data do dia.
        date_ini.set_date(datetime.now())

        # `date_fim.set_date(datetime.now())` ajusta a Data Fim para a data do dia.
        date_fim.set_date(datetime.now())

        # ---------------------------------------------------------------------
        # Resetando o Filtro de Status
        # ---------------------------------------------------------------------

        # Define o campo de sele√ß√£o de status (`Combobox`) como vazio.
        # `combo_st.set("")` garante que nenhuma op√ß√£o de status fique selecionada.
        combo_st.set("")

        # ---------------------------------------------------------------------
        # Limpando os Campos de Texto dos Filtros
        # ---------------------------------------------------------------------

        # `entry_filtro_bloco.delete(0, END)` remove qualquer texto inserido
        #      no campo de filtro por bloco.
        entry_filtro_bloco.delete(0, END)

        # `entry_filtro_vaga.delete(0, END)` remove qualquer texto
        #      inserido no campo de filtro por vaga.
        entry_filtro_vaga.delete(0, END)

        # `entry_filtro_carro.delete(0, END)` remove qualquer texto
        #      inserido no campo de filtro por modelo de carro.
        entry_filtro_carro.delete(0, END)

        # `entry_filtro_placa.delete(0, END)` remove qualquer texto
        #      inserido no campo de filtro por placa do ve√≠culo.
        entry_filtro_placa.delete(0, END)

        # ---------------------------------------------------------------------
        # Limpando a Tabela (Treeview)
        # ---------------------------------------------------------------------

        # Remove todos os itens atualmente exibidos na `Treeview`.
        # `tv.get_children()` retorna uma lista com todos os registros da tabela.
        # `tv.delete(*tv.get_children())` deleta todos os registros,
        #      garantindo que a tabela fique vazia.
        tv.delete(*tv.get_children())

        # ---------------------------------------------------------------------
        # Resetando o Resumo de Itens e Valores
        # ---------------------------------------------------------------------

        # Atualiza o r√≥tulo de resumo (`lbl_resumo`) para
        #      exibir "0" itens e "R$ 0,00" no total.
        # Isso garante que o resumo da tela seja reiniciado
        #      corretamente ap√≥s a limpeza.
        lbl_resumo.config(text="Total de itens: 0   |   Soma Valor: R$ 0,00")



    # =========================================================================
    # Cria√ß√£o do Frame para os Bot√µes de A√ß√£o (Filtrar e Limpar)
    # =========================================================================

    # Cria um frame (`frame_btn`) dentro do `frame_main` que
    #      conter√° os bot√µes de a√ß√£o.
    # Esse frame √© utilizado para organizar os bot√µes e
    #      garantir um layout mais organizado.
    frame_btn = ttk.Frame(frame_main)

    # Posiciona o frame na interface utilizando `pack()`,
    #      garantindo espa√ßamento adequado.
    # `pady=5` adiciona um espa√ßamento vertical de 5 pixels,
    #      separando os bot√µes dos outros elementos da tela.
    frame_btn.pack(pady=5)

    # =========================================================================
    # Bot√£o para Aplicar o Filtro
    # =========================================================================

    # Cria um bot√£o para acionar a fun√ß√£o `filtrar()`, respons√°vel por
    #      aplicar os filtros selecionados pelo usu√°rio.
    # `text="Filtrar"` define o texto exibido no bot√£o, informando sua funcionalidade.
    # `command=filtrar` associa o clique do bot√£o √† execu√ß√£o da fun√ß√£o `filtrar()`.
    ttk.Button(frame_btn, text="Filtrar", command=filtrar).pack(

        # `side="left"` alinha o bot√£o √† esquerda dentro do `frame_btn`.
        # `padx=10` adiciona um espa√ßamento horizontal de 10 pixels entre os bot√µes.
        side="left", padx=10

    )

    # =========================================================================
    # Bot√£o para Limpar os Filtros
    # =========================================================================

    # Cria um bot√£o para acionar a fun√ß√£o `limpar_()`, que redefine todos os
    #      filtros e limpa os resultados exibidos na tabela.
    # `text="Limpar"` define o texto exibido no bot√£o, deixando claro que
    #      sua fun√ß√£o √© restaurar a tela ao estado inicial.
    # `command=limpar_` associa o clique do bot√£o √† execu√ß√£o da fun√ß√£o `limpar_()`.
    ttk.Button(frame_btn, text="Limpar", command=limpar_).pack(

        # `side="left"` alinha o bot√£o √† esquerda dentro do `frame_btn`, ao
        #      lado do bot√£o "Filtrar".
        # `padx=10` adiciona um espa√ßamento horizontal de 10 pixels entre os
        #      bot√µes para evitar que fiquem muito pr√≥ximos.
        side="left", padx=10
    )

    # Chama a fun√ß√£o filtrar ao iniciar a tela para
    #      exibir os dados iniciais
    filtrar()



# -------------------------------------------------------------------------
# CRUD de Usu√°rios
# -------------------------------------------------------------------------

# Define a fun√ß√£o para criar a tela de gerenciamento de usu√°rios.
# `tela_usuarios_crud(janela_pai)` recebe a janela
#       principal como argumento.
def tela_usuarios_crud(janela_pai):

    # Cria uma nova janela para o CRUD de usu√°rios.
    # `tk.Toplevel(janela_pai)` cria a janela como filha da
    #       janela principal, caso exista.
    # Se `janela_pai` for None, `tk.Tk()` cria
    #       uma nova janela independente.
    janela = tk.Toplevel(janela_pai) if janela_pai else tk.Tk()

    # Define o t√≠tulo da janela.
    # `title("Gerenciamento de Usu√°rios")` exibe o nome da janela no topo.
    janela.title("Gerenciamento de Usu√°rios")

    # Define as dimens√µes da janela.
    # `largura=850` define a largura da janela em 850 pixels.
    # `altura=550` define a altura da janela em 550 pixels.
    largura, altura = 850, 550

    # Chama a fun√ß√£o para centralizar a janela na tela.
    # `centralizar_janela(janela, largura, altura)`
    #       posiciona a janela no centro da tela.
    centralizar_janela(janela, largura, altura)

    # Define a cor de fundo da janela.
    # `bg="#F5F5F5"` aplica um fundo cinza claro para um visual limpo.
    janela.configure(bg="#F5F5F5")

    # Cria o container principal da janela.
    # `tk.Frame(janela, bg="#F5F5F5")` cria um frame dentro da janela principal.
    # `bg="#F5F5F5"` define a cor de fundo do container como cinza claro.
    container_principal = tk.Frame(janela, bg="#F5F5F5")

    # Expande o container para preencher toda a janela.
    # `expand=True` faz com que o frame ocupe todo o espa√ßo dispon√≠vel.
    # `fill="both"` permite que ele seja redimensionado
    #       tanto na largura quanto na altura.
    container_principal.pack(expand=True, fill="both")

    # Cria um r√≥tulo de t√≠tulo para a tela de gerenciamento de usu√°rios.
    # `ttk.Label(container_principal, text="üë§ Gerenciar Usu√°rios")`
    #       cria um r√≥tulo dentro do container principal.
    # `font=("Arial", 22, "bold")` define a fonte do texto
    #       como Arial, tamanho 22, em negrito.
    # `foreground="#2E86C1"` define a cor do texto como azul escuro.
    # `background="#F5F5F5"` mant√©m a cor de fundo igual √† do container principal.
    rotulo_titulo = ttk.Label(container_principal,
                              text="üë§ Gerenciar Usu√°rios",
                              font=("Arial", 22, "bold"),
                              foreground="#2E86C1",
                              background="#F5F5F5")

    # Posiciona o r√≥tulo de t√≠tulo na interface.
    # `pady=10` adiciona um espa√ßamento vertical de 10
    #       pixels acima e abaixo do r√≥tulo.
    rotulo_titulo.pack(pady=10)

    # Cria um container para o formul√°rio de entrada de dados.
    # `ttk.Frame(container_principal)` cria um frame dentro do
    #       container principal para organizar os elementos do formul√°rio.
    container_formulario = ttk.Frame(container_principal)

    # Posiciona o container do formul√°rio na interface.
    # `pady=10` adiciona um espa√ßamento vertical de 10 pixels acima e
    #       abaixo do container para melhor organiza√ß√£o visual.
    container_formulario.pack(pady=10)

    # Cria um r√≥tulo (label) para identificar o campo de entrada do nome de usu√°rio.
    # `text="Nome de Usu√°rio:"` define o texto exibido ao lado do campo.
    # `font=("Arial", 12)` define a fonte do texto como Arial, tamanho 12.
    # `grid(row=0, column=0, padx=5, pady=5, sticky="e")` posiciona o
    #       r√≥tulo na linha 0, coluna 0 da grade,
    # adiciona um espa√ßamento horizontal (padx=5) e vertical (pady=5),
    # e alinha o r√≥tulo √† direita da c√©lula com `sticky="e"` (east = leste = direita).
    ttk.Label(container_formulario,
              text="Nome de Usu√°rio:",
              font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (entry) para o usu√°rio digitar o nome.
    # `width=30` define a largura do campo para 30 caracteres.
    # `font=("Arial", 12)` aplica a fonte Arial tamanho 12 para o texto digitado.
    campo_usuario = ttk.Entry(container_formulario,
                              width=30,
                              font=("Arial", 12))

    # Posiciona o campo de entrada na interface.
    # `grid(row=0, column=1, padx=5, pady=5)` coloca o
    #       campo de entrada na linha 0, coluna 1 da grade,
    # adicionando um espa√ßamento horizontal (padx=5) e
    #       vertical (pady=5) para melhor organiza√ß√£o.
    campo_usuario.grid(row=0, column=1, padx=5, pady=5)

    # Cria um r√≥tulo (label) para identificar o campo de entrada da senha.
    # `text="Senha:"` define o texto exibido ao lado do campo.
    # `font=("Arial", 12)` define a fonte do texto como Arial, tamanho 12.
    # `grid(row=1, column=0, padx=5, pady=5, sticky="e")`
    #       posiciona o r√≥tulo na linha 1, coluna 0 da grade,
    # adiciona um espa√ßamento horizontal (padx=5) e vertical (pady=5),
    #       e alinha o r√≥tulo √† direita da c√©lula com `sticky="e"` (east = leste = direita).
    ttk.Label(container_formulario,
              text="Senha:",
              font=("Arial", 12)).grid(row=1, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de entrada (entry) para o usu√°rio digitar a senha.
    # `width=30` define a largura do campo para 30 caracteres.
    # `show="*"` oculta os caracteres digitados, exibindo asteriscos para proteger a senha.
    # `font=("Arial", 12)` aplica a fonte Arial tamanho 12 para o texto digitado.
    campo_senha = ttk.Entry(container_formulario,
                            width=30,
                            show="*",
                            font=("Arial", 12))

    # Posiciona o campo de entrada na interface.
    # `grid(row=1, column=1, padx=5, pady=5)` coloca o
    #       campo de entrada na linha 1, coluna 1 da grade,
    #       adicionando um espa√ßamento horizontal (padx=5) e
    #       vertical (pady=5) para melhor organiza√ß√£o.
    campo_senha.grid(row=1, column=1, padx=5, pady=5)

    # Cria um r√≥tulo (label) para indicar o campo de sele√ß√£o do tipo de usu√°rio.
    # `text="Tipo de Usu√°rio:"` define o texto exibido ao lado do campo.
    # `font=("Arial", 12)` define a fonte do texto como Arial, tamanho 12.
    # `grid(row=2, column=0, padx=5, pady=5, sticky="e")` posiciona o
    #       r√≥tulo na linha 2, coluna 0 da grade,
    #       adiciona um espa√ßamento horizontal (padx=5) e vertical (pady=5),
    #       e alinha o r√≥tulo √† direita da c√©lula com
    #       `sticky="e"` (east = leste = direita).
    ttk.Label(container_formulario,
              text="Tipo de Usu√°rio:",
              font=("Arial", 12)).grid(row=2, column=0, padx=5, pady=5, sticky="e")

    # Cria um campo de sele√ß√£o (Combobox) para escolher o tipo de usu√°rio.
    # `values=["Administrador", "Atendente"]` define as op√ß√µes
    #       dispon√≠veis no menu suspenso.
    # `state="readonly"` impede a digita√ß√£o manual e restringe a
    #       escolha apenas √†s op√ß√µes fornecidas.
    # `width=28` define a largura da caixa de sele√ß√£o para 28 caracteres.
    selecao_tipo = ttk.Combobox(container_formulario,
                                values=["Administrador", "Atendente"],
                                state="readonly",
                                width=28)

    # Posiciona a Combobox na interface.
    # `grid(row=2, column=1, padx=5, pady=5)` coloca a
    #       caixa de sele√ß√£o na linha 2, coluna 1 da grade,
    #       adicionando um espa√ßamento horizontal (padx=5) e
    #       vertical (pady=5) para melhor organiza√ß√£o.
    selecao_tipo.grid(row=2, column=1, padx=5, pady=5)

    # Define um valor padr√£o para a Combobox.
    # `set("Atendente")` seleciona automaticamente a
    #       op√ß√£o "Atendente" ao abrir o formul√°rio.
    selecao_tipo.set("Atendente")

    # Cria um cont√™iner (Frame) para organizar os bot√µes na interface.
    # `ttk.Frame(container_principal)` cria um frame
    #       dentro do cont√™iner principal.
    container_botoes = ttk.Frame(container_principal)

    # Posiciona o frame na tela.
    # `pack(pady=10)` adiciona um espa√ßamento vertical
    #       de 10 pixels ao redor do frame,
    #       garantindo um melhor espa√ßamento entre os elementos.
    container_botoes.pack(pady=10)

    # Lista contendo os bot√µes do CRUD (Cadastrar, Alterar, Excluir, Limpar).
    # Cada item da lista √© uma tupla, onde:
    # - O primeiro elemento √© o texto do bot√£o (incluindo um
    #       emoji para melhor visualiza√ß√£o).
    # - O segundo elemento √© uma fun√ß√£o `lambda` que chama a
    #       fun√ß√£o correspondente ao clicar no bot√£o.
    botoes = [
        ("‚úÖ Cadastrar", lambda: cadastrar()),  # Bot√£o para cadastrar um novo usu√°rio.
        ("‚úèÔ∏è Alterar", lambda: alterar()),  # Bot√£o para alterar os dados de um usu√°rio existente.
        ("‚ùå Excluir", lambda: excluir()),  # Bot√£o para excluir um usu√°rio do banco de dados.
        ("üßπ Limpar", lambda: limpar_campos())  # Bot√£o para limpar os campos do formul√°rio.
    ]

    # Loop que percorre a lista de bot√µes e os cria dinamicamente.
    # `enumerate(botoes)` percorre a lista de bot√µes, retornando o
    #       √≠ndice (i) e os valores (texto, comando).
    for i, (texto, comando) in enumerate(botoes):

        # Cria um bot√£o dentro do cont√™iner de bot√µes.
        # `ttk.Button(container_botoes, text=texto, style="TButton",
        #       command=comando, width=15)`
        # - `container_botoes`: Define o frame onde o bot√£o ser√° colocado.
        # - `text=texto`: Define o texto do bot√£o (exemplo: "‚úÖ Cadastrar").
        # - `style="TButton"`: Aplica o estilo configurado anteriormente no ttk.Style().
        # - `command=comando`: Define a fun√ß√£o que ser√° executada
        #       quando o bot√£o for pressionado.
        # - `width=15`: Define a largura do bot√£o.
        btn = ttk.Button(container_botoes,
                         text=texto,
                         style="TButton",
                         command=comando,
                         width=15)

        # Posiciona o bot√£o na grade (grid).
        # `row=0`: Todos os bot√µes ficam na mesma linha.
        # `column=i`: Define a posi√ß√£o do bot√£o com base no
        #       √≠ndice da lista (cada bot√£o em uma coluna diferente).
        # `padx=8`: Adiciona um espa√ßamento horizontal
        #       de 8 pixels entre os bot√µes.
        # `pady=5`: Adiciona um espa√ßamento vertical
        #       de 5 pixels ao redor dos bot√µes.
        btn.grid(row=0, column=i, padx=8, pady=5)

    # Criar o cont√™iner onde a tabela de usu√°rios ser√° exibida.
    # `ttk.Frame(container_principal)`: Cria um
    #       frame dentro do cont√™iner principal.
    container_tabela = ttk.Frame(container_principal)

    # Posiciona o frame na tela.
    # `fill="both"`: O frame ocupar√° todo o espa√ßo dispon√≠vel na horizontal e vertical.
    # `expand=True`: Permite que o frame cres√ßa automaticamente conforme o tamanho da janela.
    # `padx=10`: Adiciona um espa√ßamento de 10 pixels √† esquerda e √† direita do frame.
    # `pady=10`: Adiciona um espa√ßamento de 10 pixels acima e abaixo do frame.
    container_tabela.pack(fill="both", expand=True, padx=10, pady=10)

    # Define os nomes das colunas da tabela de usu√°rios.
    # `("ID", "Nome de Usu√°rio", "Senha", "Tipo de Usu√°rio")`: S√£o
    #       as colunas que ser√£o exibidas na tabela.
    colunas = ("ID", "Nome de Usu√°rio", "Senha", "Tipo de Usu√°rio")

    # Cria a tabela (Treeview) dentro do frame `container_tabela`.
    # `ttk.Treeview(container_tabela, columns=colunas, show="headings", height=10)`
    # - `container_tabela`: Define que a tabela ser√° colocada dentro desse frame.
    # - `columns=colunas`: Define as colunas da tabela usando a tupla `colunas`.
    # - `show="headings"`: Remove a primeira coluna vazia
    #       padr√£o do Treeview e exibe apenas os cabe√ßalhos.
    # - `height=10`: Define o n√∫mero de linhas vis√≠veis da tabela.
    tabela_usuarios = ttk.Treeview(container_tabela,
                                   columns=colunas,
                                   show="headings",
                                   height=10)

    # Posiciona a tabela dentro do cont√™iner.
    # `fill="both"`: Faz a tabela ocupar todo o espa√ßo
    #       horizontal e vertical dispon√≠vel dentro do cont√™iner.
    # `expand=True`: Permite que a tabela cres√ßa
    #       automaticamente conforme o tamanho da janela.
    tabela_usuarios.pack(fill="both", expand=True)

    # Percorre a lista de colunas para configurar cada uma delas na tabela.
    for coluna in colunas:

        # Define o texto exibido no cabe√ßalho da coluna.
        # `tabela_usuarios.heading(coluna, text=coluna, anchor="center")`
        # - `coluna`: Define o nome da coluna.
        # - `text=coluna`: Usa o pr√≥prio nome da coluna como r√≥tulo no cabe√ßalho.
        # - `anchor="center"`: Centraliza o texto no cabe√ßalho da coluna.
        tabela_usuarios.heading(coluna, text=coluna, anchor="center")

        # Configura as propriedades de cada coluna.
        # `tabela_usuarios.column(coluna, width=150, anchor="center")`
        # - `width=150`: Define a largura da coluna como 150 pixels.
        # - `anchor="center"`: Centraliza o conte√∫do dentro da coluna.
        tabela_usuarios.column(coluna, width=150, anchor="center")

    # Ajusta a largura da coluna "ID" separadamente.
    # `tabela_usuarios.column("ID", width=50)`: Define a
    #       largura da coluna "ID" como 50 pixels.
    tabela_usuarios.column("ID", width=50)

    # Adiciona um evento de duplo clique na tabela.
    # `tabela_usuarios.bind("<Double-1>", lambda event: ao_clicar(event))`
    # - `<Double-1>`: Especifica que o evento ocorre ao
    #       clicar duas vezes com o bot√£o esquerdo do mouse.
    # - `lambda event: ao_clicar(event)`: Chama a
    #       fun√ß√£o `ao_clicar(event)` quando um item for duplamente clicado.
    tabela_usuarios.bind("<Double-1>", lambda event: ao_clicar(event))


    # Fun√ß√£o para carregar a lista de usu√°rios na tabela.
    def carregar_lista():

        # Remove todos os itens da tabela antes de recarregar os dados.
        # `tabela_usuarios.delete(*tabela_usuarios.get_children())`
        # - `tabela_usuarios.get_children()`: Obt√©m todos os itens existentes na tabela.
        # - `*`: Expande a lista retornada para remover todos os itens de uma vez.
        tabela_usuarios.delete(*tabela_usuarios.get_children())

        # Obt√©m todos os usu√°rios do banco de dados.
        # `colecao_usuarios.find()`: Retorna todos os
        #       documentos da cole√ß√£o "usuarios".
        usuarios = colecao_usuarios.find()

        # Percorre a lista de usu√°rios obtidos do banco de dados.
        for usuario in usuarios:

            # Insere os dados do usu√°rio na tabela.
            # `tabela_usuarios.insert("", "end", values=(...))`
            # - `""`: Define que o item ser√° inserido na raiz da hierarquia (sem pai).
            # - `"end"`: Insere o item na √∫ltima posi√ß√£o da tabela.
            # - `values=(...)`: Define os valores que ser√£o exibidos em cada coluna.
            #     - `str(usuario["_id"])`: Converte o `_id` (identificador
            #           √∫nico do MongoDB) para string.
            #     - `usuario["usuario"]`: Obt√©m o nome do usu√°rio.
            #     - `usuario["senha"]`: Obt√©m a senha do usu√°rio.
            #     - `usuario["tipo"]`: Obt√©m o tipo de usu√°rio (Administrador/Atendente).
            tabela_usuarios.insert("",
                                   "end",
                                   values=(str(usuario["_id"]),
                                           usuario["usuario"],
                                           usuario["senha"],
                                           usuario["tipo"]))


    # Fun√ß√£o chamada ao clicar duas vezes em um item da tabela de usu√°rios.
    def ao_clicar(evento):

        # Obt√©m o item selecionado na tabela.
        # `tabela_usuarios.selection()`: Retorna uma lista com os
        #       identificadores dos itens selecionados.
        selecionado = tabela_usuarios.selection()

        # Verifica se algum item foi selecionado.
        # Caso n√£o tenha sido, a fun√ß√£o retorna sem fazer nada.
        if not selecionado:
            return

        # Obt√©m os valores do item selecionado.
        # `tabela_usuarios.item(selecionado[0], "values")`
        # - `selecionado[0]`: Pega o primeiro item
        #       selecionado (caso haja m√∫ltiplos, considera apenas um).
        # - `"values"`: Obt√©m os valores armazenados no item da tabela.
        valores = tabela_usuarios.item(selecionado[0], "values")

        # Desempacota os valores nas vari√°veis correspondentes.
        # `_id`: Identificador do usu√°rio.
        # `nome`: Nome de usu√°rio.
        # `senha`: Senha cadastrada.
        # `tipo`: Tipo de usu√°rio (Administrador ou Atendente).
        _id, nome, senha, tipo = valores

        # Limpa o campo de entrada do nome de usu√°rio
        #       antes de inserir um novo valor.
        # `campo_usuario.delete(0, tk.END)`: Remove
        #       todo o conte√∫do do campo.
        campo_usuario.delete(0, tk.END)

        # Insere o nome do usu√°rio selecionado no campo de entrada.
        # `campo_usuario.insert(0, nome)`: Define o nome do
        #       usu√°rio no campo de entrada.
        campo_usuario.insert(0, nome)

        # Limpa o campo de entrada da senha antes de inserir um novo valor.
        campo_senha.delete(0, tk.END)

        # Insere a senha do usu√°rio selecionado no campo de entrada.
        campo_senha.insert(0, senha)

        # Atualiza a sele√ß√£o do tipo de usu√°rio no combobox.
        # `selecao_tipo.set(tipo)`: Define a op√ß√£o
        #       correspondente ao usu√°rio selecionado.
        selecao_tipo.set(tipo)


    # Fun√ß√£o para cadastrar um novo usu√°rio no banco de dados.
    def cadastrar():

        # Obt√©m o valor do campo de entrada do nome do usu√°rio.
        # `.get().strip()`: Recupera o texto digitado e remove
        #       espa√ßos extras no in√≠cio e no fim.
        nome = campo_usuario.get().strip()

        # Obt√©m o valor do campo de entrada da senha do usu√°rio.
        senha = campo_senha.get().strip()

        # Obt√©m o valor selecionado no combobox do tipo de usu√°rio.
        tipo = selecao_tipo.get().strip()

        # Verifica se o nome de usu√°rio e a senha foram preenchidos.
        # Caso algum dos campos esteja vazio, exibe uma mensagem de
        #       erro e interrompe a execu√ß√£o.
        if not nome or not senha:
            messagebox.showerror("Erro", "Usu√°rio e senha s√£o obrigat√≥rios!",
                                 parent=janela)

            # Sai da fun√ß√£o sem cadastrar o usu√°rio.
            return

        # Verifica se o nome de usu√°rio j√° existe no banco de dados.
        # `colecao_usuarios.find_one({"usuario": nome})` busca um
        #       documento onde o campo "usuario" seja igual ao nome informado.
        if colecao_usuarios.find_one({"usuario": nome}):

            # Se um usu√°rio com o mesmo nome for encontrado, exibe
            #       uma mensagem de erro e interrompe o cadastro.
            messagebox.showerror("Erro", "Usu√°rio j√° cadastrado!",
                                 parent=janela)

            # Sai da fun√ß√£o sem cadastrar o usu√°rio.
            return

        # Insere o novo usu√°rio na cole√ß√£o do MongoDB.
        # `insert_one({})`: Insere um documento com os dados informados.
        colecao_usuarios.insert_one({"usuario": nome, "senha": senha, "tipo": tipo})

        # Exibe uma mensagem informando que o cadastro foi realizado com sucesso.
        messagebox.showinfo("Sucesso",
                            "Usu√°rio cadastrado com sucesso!",
                            parent=janela)

        # Atualiza a lista de usu√°rios na interface
        #       ap√≥s a inser√ß√£o do novo usu√°rio.
        carregar_lista()

        # Limpa os campos do formul√°rio ap√≥s o cadastro bem-sucedido.
        limpar_campos()


    # Cria uma fun√ß√£o para alterar os dados de um
    #       usu√°rio selecionado na tabela.
    def alterar():

        # Obt√©m o item selecionado na tabela de usu√°rios.
        # `tabela_usuarios.selection()` retorna uma tupla
        #       com os IDs dos itens selecionados.
        selecionado = tabela_usuarios.selection()

        # Verifica se nenhum usu√°rio foi selecionado.
        # Se nenhum usu√°rio estiver selecionado, exibe uma
        #       mensagem de erro e encerra a fun√ß√£o.
        if not selecionado:

            # `messagebox.showerror()` exibe uma caixa de erro
            #       informando que o usu√°rio deve ser selecionado.
            # `parent=janela` garante que a mensagem seja associada √† janela principal.
            messagebox.showerror("Erro",
                                 "Selecione um usu√°rio!",
                                 parent=janela)

            # Encerra a fun√ß√£o.
            return

        # Obt√©m os valores do usu√°rio selecionado na tabela.
        # `tabela_usuarios.item(selecionado[0], "values")`
        #       retorna uma tupla com os valores do item.
        valores = tabela_usuarios.item(selecionado[0], "values")

        # Obt√©m o ID do usu√°rio que ser√° alterado.
        # O ID est√° localizado na primeira posi√ß√£o da tupla retornada.
        _id = valores[0]

        # Obt√©m o novo nome digitado no campo de entrada do nome do usu√°rio.
        # `.get().strip()` recupera o texto digitado e
        #       remove espa√ßos extras antes e depois.
        nome = campo_usuario.get().strip()

        # Obt√©m a nova senha digitada no campo de
        #       entrada da senha do usu√°rio.
        # `.get().strip()` garante que n√£o haja espa√ßos
        #       extras no in√≠cio ou no final.
        senha = campo_senha.get().strip()

        # Obt√©m o novo tipo de usu√°rio selecionado no combobox.
        # `.get().strip()` remove espa√ßos adicionais para
        #       evitar problemas na valida√ß√£o.
        tipo = selecao_tipo.get().strip()

        # Verifica se os campos de nome ou senha est√£o vazios.
        # Se um dos campos estiver vazio, exibe uma mensagem de
        #       erro e encerra a fun√ß√£o.
        if not nome or not senha:

            # `messagebox.showerror()` exibe um alerta informando
            #       que os campos s√£o obrigat√≥rios.
            # `parent=janela` associa a mensagem √† janela principal.
            messagebox.showerror("Erro",
                                 "Usu√°rio e senha s√£o obrigat√≥rios!",
                                 parent=janela)

            # Encerra a fun√ß√£o.
            return

        # Atualiza o usu√°rio no banco de dados.
        # `colecao_usuarios.update_one()` modifica apenas o
        #       documento que corresponde ao `_id` selecionado.
        # O filtro `{"_id": ObjectId(_id)}` encontra o usu√°rio pelo ID.
        # `{"$set": {"usuario": nome, "senha": senha, "tipo": tipo}}`
        #       define os novos valores dos campos.
        colecao_usuarios.update_one({"_id": ObjectId(_id)},
                                    {"$set": {"usuario": nome, "senha": senha, "tipo": tipo}})

        # Exibe uma mensagem de sucesso informando que o usu√°rio
        #       foi atualizado corretamente.
        # `messagebox.showinfo()` exibe uma caixa de di√°logo com a
        #       confirma√ß√£o da atualiza√ß√£o.
        # `parent=janela` mant√©m a mensagem associada √† janela principal.
        messagebox.showinfo("Sucesso",
                            "Usu√°rio atualizado com sucesso!",
                            parent=janela)

        # Atualiza a tabela de usu√°rios recarregando os
        #       dados do banco de dados.
        # Isso garante que a interface exiba os dados
        #       mais recentes ap√≥s a altera√ß√£o.
        carregar_lista()

        # Limpa os campos de entrada para permitir um
        #       novo cadastro ou edi√ß√£o.
        limpar_campos()


    # Fun√ß√£o respons√°vel por excluir um usu√°rio do banco de
    #       dados e da interface gr√°fica.
    # √â chamada quando o usu√°rio seleciona um item na
    #       tabela e clica no bot√£o "Excluir".
    def excluir():

        # Obt√©m o item selecionado na tabela de usu√°rios.
        # `tabela_usuarios.selection()` retorna uma tupla
        #       com os itens selecionados.
        selecionado = tabela_usuarios.selection()

        # Verifica se algum usu√°rio foi selecionado.
        # Se a tupla estiver vazia, exibe uma mensagem de erro e interrompe a fun√ß√£o.
        if not selecionado:
            messagebox.showerror("Erro",
                                 "Selecione um usu√°rio!",
                                 parent=janela)

            # Encerra a execu√ß√£o.
            return

        # Obt√©m os valores do usu√°rio selecionado na tabela.
        # `tabela_usuarios.item(selecionado[0], "values")`
        #       retorna uma tupla com os dados do usu√°rio.
        valores = tabela_usuarios.item(selecionado[0], "values")

        # Extrai o ID do usu√°rio da tupla de valores.
        # O ID √© armazenado na primeira posi√ß√£o (`index 0`).
        _id = valores[0]

        # Exibe uma caixa de di√°logo para confirmar a exclus√£o do usu√°rio.
        # `messagebox.askyesno()` retorna `True` se o usu√°rio confirmar ou `False` se cancelar.
        # O par√¢metro `parent=janela` mant√©m o alerta vinculado √† janela principal.
        if messagebox.askyesno("Confirma√ß√£o",
                               "Tem certeza que deseja excluir este usu√°rio?",
                               parent=janela):

            # Se o usu√°rio confirmou, exclui o usu√°rio do
            #       banco de dados com base no ID.
            # `colecao_usuarios.delete_one({"_id": ObjectId(_id)})`
            #       remove apenas o registro correspondente.
            colecao_usuarios.delete_one({"_id": ObjectId(_id)})

            # Exibe uma mensagem informando que a exclus√£o foi bem-sucedida.
            # `messagebox.showinfo()` cria um alerta para o usu√°rio.
            messagebox.showinfo("Sucesso",
                                "Usu√°rio exclu√≠do com sucesso!",
                                parent=janela)

            # Atualiza a tabela para remover o usu√°rio exclu√≠do da interface.
            # `carregar_lista()` recarrega os dados diretamente do banco de dados.
            carregar_lista()

            # Limpa os campos de entrada ap√≥s a exclus√£o para evitar confus√£o.
            # `limpar_campos()` remove qualquer dado
            #       preenchido nos campos de entrada.
            limpar_campos()


    # Define a fun√ß√£o `limpar_campos()` que ser√°
    #       respons√°vel por limpar os campos do formul√°rio.
    def limpar_campos():

        # `""" Limpa os campos do formul√°rio. """`
        # Esta fun√ß√£o apaga qualquer informa√ß√£o digitada nos campos de entrada
        # e redefine a sele√ß√£o do tipo de usu√°rio para o valor padr√£o.

        # Remove o conte√∫do do campo de entrada do nome do usu√°rio.
        # `campo_usuario.delete(0, tk.END)` apaga o
        #       texto do campo, do in√≠cio ao fim.
        campo_usuario.delete(0, tk.END)

        # Remove o conte√∫do do campo de senha.
        # `campo_senha.delete(0, tk.END)` apaga qualquer senha digitada.
        campo_senha.delete(0, tk.END)

        # Reseta a sele√ß√£o do tipo de usu√°rio para o valor padr√£o "Atendente".
        # `selecao_tipo.set("Atendente")` altera o valor do
        #       campo de sele√ß√£o (Combobox).
        selecao_tipo.set("Atendente")

        # Remove qualquer sele√ß√£o existente na tabela de usu√°rios.
        # selection_remove: Limpa a sele√ß√£o atual.
        tabela_usuarios.selection_remove(*tabela_usuarios.selection())


    # Chama a fun√ß√£o `carregar_lista()` para atualizar a
    #       tabela de usu√°rios.
    # `carregar_lista()` recarrega os dados diretamente do banco de dados.
    carregar_lista()

    # Inicia o loop principal da interface gr√°fica.
    # `janela.mainloop()` mant√©m a janela aberta e
    #       aguardando intera√ß√µes do usu√°rio.
    janela.mainloop()


# Inicia a tela de login ao executar o programa.
# A fun√ß√£o `tela_login()` exibe a interface de login do sistema.
tela_login()